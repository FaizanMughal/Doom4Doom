//==============================================================================
//==============================================================================
// D4D Event Handler
//==============================================================================
//==============================================================================

Class D4DHandler : EventHandler
{
	PlayerDelta deltas[MAXPLAYERS];
	/*
	uint Credits, MonsterPortion;
	uint Monsters[2];
	uint Secrets[2];
	double MonsterPercent;
	double SecretPercent;
	bool DontRun;
	
	override void WorldTick()
	{
		if (DontRun)	return;
		Monsters[0] = level.killed_monsters;
		Monsters[1] = level.total_monsters;
		Secrets[0] = level.found_secrets;
		Secrets[1] = level.total_secrets;
		MonsterPercent = (Monsters[1] > 0) ? (Monsters[0] / Monsters[1]) * 100.0 : 0.0;
		SecretPercent = (Secrets[1] > 0) ? (Secrets[0] / Secrets[1]) * 100.0 : 0.0;
		
		if (Monsters[1] < 5 && 
		if (Monsters[1] >= 5)
		{
			
		}
	}
	
	
	override void WorldThingDied(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[0]++;
			}
		}
	}
	
	// For spawning, make sure to count friendly D4D monsters since they will
	// eventually turn on the player after they unmorph.
	override void WorldThingSpawned(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[1]++;
			}
		}
	}
	*/
	
	int KNMInput[8];
	
	clearscope private void IncrementKNM(int which) { D4DHandler.SendNetworkEvent("D4D_KNM++", which); }
	clearscope private void ResetKNM(int which) 	{ D4DHandler.SendNetworkEvent("D4D_KNM0", which); }
	clearscope private int GetKNM(int which) 		{ return KNMInput[which]; }
	
	override bool InputProcess(InputEvent ev)
	{
		if (ev.Type == InputEvent.Type_KeyDown)
		{
			int index = consoleplayer;
			let plr = players[index].mo;
			if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph",true))
				return false;
			
			static const String KeyBindsCCMDs[] =
			{
				"+forward", "+back", "+moveleft", "+moveright", 
				"+attack", "+altattack"
			};
			
			int bind1, bind2;
			for (int i = 0; i < KeyBindsCCMDs.Size(); i++) 
			{
				[bind1, bind2] = Bindings.GetKeysForCommand (KeyBindsCCMDs [i]);
				
				if (ev.KeyScan == bind1 || ev.KeyScan == bind2) 
				{
					int knm = KNMInput[index];
					Switch (knm)
					{
						Case 0: 
							if (i == 0)	IncrementKNM(index);	break;
						Case 1:
							if (i == 0)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 2:
						Case 3:
							if (i == 1)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 4:
						Case 6:
							if (i == 2)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 5:
						Case 7:
							if (i == 3)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 8:
							if (i == 4)	IncrementKNM(index);	else	ResetKNM(index);	break;
						Case 9:
							if (i == 5)	D4DHandler.SendNetworkEvent("D4D_KNM", index);
						Default:
							ResetKNM(index);
					}
					return false;
				}
			}
		}
		return false;
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		
		if (!plr)	
		{	Console.Printf("No player found");	return;	}
		
		static const String KeyWords[] =
		{
			'D4DAddon_',
			'Akimbo_SetLeft_',
			'Akimbo_SetRight_',
			'Rune_'
		};
		
		// Blocks execution of certain netevent commands that can and will
		// destabilize the game if used improperly. These should only be
		// called from code like the menu.
		if (e.isManual)
		{
			static const Name ProtectedCommands[] =
			{
				//'AkimboSystem'
				'DisableReception',
				'EnableReception',
				'UpdateItems'
			};
			int size = ProtectedCommands.Size();
			for (int i = 0; i < size; i++)
			{
				if (e.Name == ProtectedCommands[i])
				{
					Console.Printf(e.Name.." cannot be called by console.");
					return;
				}
			}
		}
		else
		{
			int arg = e.Args[0];
			if (e.Name == 'D4D_KNM++')			{	KNMInput[arg]++;	return;	}
			else if (e.Name == 'D4D_KNM0')		{	KNMInput[arg] = 0;	return;	}
			else if (e.Name == 'D4D_KNM')		{	KNM(e);				return;	}
		}
		if (e.Name == 'Dash')
		{
			let pl = Doom4Player(plr);
			if (pl)	pl.TryDash();
		}
		else if (e.Name == 'DisableReception')
		{
			deltas[num].receiving = false;
			//Console.Printf("Disabled receiving.");
		}
		else if (deltas[num].receiving)
		{
			deltas[num].SetItem(e.Name, e.Args[0], e.Args[1]);
			//Console.Printf("%s, %d, %d", e.Name, e.Args[0], e.Args[1]);
		}
		else if (e.Name == 'EnableReception')
		{
			deltas[num].receiving = true;
			//Console.Printf("Enabled receiving.");
		}
		else if (e.Name == 'UpdateItems')
		{
			if (deltas[num].ItemName.Size() > 0)
			{
				for (int i = 0; i < deltas[num].ItemName.Size(); i++)
				{
					Class<Inventory> item = deltas[num].ItemName[i];
					if (item)
					{
						plr.A_SetInventory(item, deltas[num].Count[i]);
						let it = UpgradeItem(plr.FindInventory(item));
						
						if (it)
						{
							it.UpdateItem();
						}
					}
				}
			}
			deltas[num].ItemName.Clear();
			deltas[num].Count.Clear();			
		}
		else if (e.Name == 'SectorLight')		{	SetSectorLight(e);	}
		else if (e.Name == 'ClearFakeCash')
		{
			plr.A_SetInventory("D4DCashFake",0);
		}
		else if (e.Name == 'RemoveAmmo')
		{
			RemoveAmmoActors();
		}
		else if (e.Name == 'FindLiveTID')
		{
			FindLiveTID(e);
		}
		else
		{
			int size = KeyWords.Size();
			for (int i = 0; i < size; i++)
			{
				// If it doesn't have the matching command, next please.
				
				
				Name check1 = e.Name.Left(Keywords[i].Length());
				Name check2 = KeyWords[i];
				if (check1 != check2)
					continue;
					
				// It's one of the keywords. Process it.
				String suffix = e.Name.Mid(KeyWords[i].Length(), e.Name.Length());
				//Console.Printf(suffix);
				
				Switch(i)
				{
					// For external mods to use as they please using their own handlers
					// without interrupting this one.
					Case 0:		// D4DAddon_
						return;
					
					Case 1:		// Akimbo_SetLeft_
					Case 2:		// Akimbo_SetRight_
					{
						bool IsRight = (i == 2);
						let ak = AkimboWeapon(plr.FindInventory("AkimboWeapon",true));
						if (ak)	ak.SetWeaponSide(suffix, IsRight);
						return;
					}
					
					Case 3:
					{
						SummonRune(plr, suffix, e.Args[0]);
						return;
					}
					
					Default:	// Some other command that's not viable.
						break;
				}
			}
			CVar EventPrint = CVar.FindCVar("D4D_NetEventDebug");
			if (EventPrint && EventPrint.GetBool())
			{
				Console.Printf(e.Name..": Undefined net event");
			}
		}
		
	}
	
	//==========================================================================
	// Functions
	
	// Sets the light level of the current sector the player is in.
	void SetSectorLight(ConsoleEvent e)
	{
		let plr = players[e.Player].mo;
		if (!plr)	return;
		
		Sector s = plr.CurSector;
		if (!s)	return;
		
		s.SetLightLevel(e.Args[0]);
	}
	
	// Summons a rune with a power level.
	void SummonRune(Actor player, String suffix, Int power)
	{
		if (!player)	return;
		
		Class<Inventory> check = suffix;
		if (!check)
		{	Console.Printf("%s is not a demon rune", suffix);	return;	}
		
		double rad = player.radius;
		double ang = player.angle;
		Vector3 pos = player.Vec3Angle(rad * 2, ang);
		pos.z = player.pos.z;
		let rune = DemonRuneBase(Actor.Spawn(check, pos));
		
		if (rune)
		{
			rune.PowerLevel = Clamp(abs(power), 0, MaxRunePower);
		}
		else
			Console.Printf("%s failed to spawn.", suffix);
	}
	
	
	// Completely clear off all listings for a particular player.
	void Init(int num)
	{
		deltas[num].ItemName.Clear();
		deltas[num].Count.Clear();
	}

	// Update the listings in the struct.
	void Update(int num, string iname, uint count, bool ofs = false)
	{
		if (players[num].mo)
		{
			if (!deltas[num].SetItem(iname, count, ofs))
			{
				console.printf(iname.." is not a proper item");
			}
		}
	}
	
	// Removes all ammo actors from the map.
	void RemoveAmmoActors()
	{
		static const Class<Inventory> names[] =
		{
			"Ammo",
			"ClipReplacer",
			"ClipBoxReplacer",
			"ShellReplacer",
			"ShellBoxReplacer",
			"RocketBoxReplacer",
			"RocketAmmoReplacer",
			"CellReplacer",
			"CellPackReplacer"
		};
		
		ThinkerIterator it = ThinkerIterator.Create("Inventory");
		Inventory mo;
		int count = 0;
		while (mo = Inventory(it.Next()))
		{
			// Do not attempt to remove any actors with the following properties: 
			// - Owner (An actor that 'has' this inventory)
			// - TID 
			// - Special
			if (mo.Owner || mo.TID || mo.Special)
				continue;
			
			let am = Ammo(mo);
			if (am)
			{
				count++;
				am.Destroy();
				continue;
			}
			int size = names.Size();
			for (int i = 0; i < size; i++)
			{
				if (mo is names[i])
				{
					count++;
					mo.Destroy();
					continue;
				}
			}
			
		}
		Console.Printf("%d ammo actors destroyed", count);
	}
	
	void FindLiveTID(ConsoleEvent e)
	{
		if (e.Args[0] != 0)
		{
			let it = ActorIterator.Create(e.Args[0]);
			Actor mo;
			while (mo = Actor(it.Next()))
			{
				if (mo.health > 0 && mo.tid == e.Args[0])
					Console.Printf("%s", mo.GetClassName());				
			}
		}
	}
	
	private void KNM(ConsoleEvent e)
	{
		int i = e.Args[0];
		if (e.IsManual || i < 0 || i >= MAXPLAYERS)
			return;
		if (gamestate == GS_LEVEL)
		{
			if (playeringame[i])
			{
				let plr = players[i].mo;
				if (!plr || plr.health < 1 || plr.FindInventory("PowerMorph", true))
					return;
					
				plr.A_GiveInventory("ModuleGiver");
				plr.A_Log("Blissfully Ecstatic Upgrades Added", true);
			}
		}
		else
		{
			Console.Printf("Clever!");
		}
	}
}

/*==============================================================================
================================================================================



================================================================================
==============================================================================*/

Struct PlayerDelta
{
	bool receiving;
	Array<String> ItemName;
	Array<Int> Count;
	
	//==========================================================================
	// Checks for an item and returns its position.
	int CheckForItem (String thing, bool getQuantity = false)
	{
		// Abort if the item's invalid.
		Class<Inventory> check = thing;
		if (!check)	
		{
			return -2;
		}
		
		// Otherwise, look for it.
		for (int i = 0; i < ItemName.Size(); i++)
		{
			let tng = ItemName[i];
			if (tng.Length() > 0 && thing ~== tng)
			{
				return i;
			}
		}
		return -1;
	}
	
	//==========================================================================
	// Sets an item if it exists, or adds the item to the array if not already,
	// providing that item type is real. ofs means add/subtract amt to the 
	// current amount.
	bool SetItem (String thing, int amt, bool ofs = false)
	{
		// Don't bother if we're not adding or taking away.
		if (!amt && ofs)	return true;
		
		Class<Inventory> check = thing;
		if (!check)	
		{
			Console.Printf(thing.." is not a valid item");
			return false;
		}
		
		if (ItemName.Size() > 0)
		{
			for (int i = 0; i < ItemName.Size(); i++)
			{
				if (thing ~== ItemName[i])
				{
					// Already exists, just update the amount.
					if (ofs)	Count[i] = Max(Count[i] + amt,0);
					else		Count[i] = amt;
					return true;
				}
			}
		}
		// Doesn't exist, make one.
		ItemName.Push(thing);
		Count.Push(amt);
		return true;
	}
	
	void Reset()
	{
		ItemName.Clear();
		Count.Clear();
	}
}