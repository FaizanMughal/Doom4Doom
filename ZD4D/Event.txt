Class D4DHandler : EventHandler
{
	PlayerDelta deltas[MAXPLAYERS];
	int Credits;
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		
		if (plr)
		{
			if (e.Name == 'DisableReception')
			{
				deltas[num].receiving = false;
				//Console.Printf("Disabled receiving.");
			}
			else if (deltas[num].receiving)
			{
				//Console.Printf("%s, %d, %d", e.Name, e.Args[0], e.Args[1]);
				deltas[num].SetItem(e.Name, e.Args[0], e.Args[1]);
			}
			else if (e.Name == 'EnableReception')
			{
				deltas[num].receiving = true;
				//Console.Printf("Enabled receiving.");
			}
			else if (e.Name == 'UpdateItems')
			{
				if (deltas[num].ItemName.Size() > 0)
				{
					for (int i = 0; i < deltas[num].ItemName.Size(); i++)
					{
						Class<Inventory> item = deltas[num].ItemName[i];
						if (item)
						{
							plr.A_SetInventory(item, deltas[num].Count[i]);
							let it = UpgradeItem(plr.FindInventory(item));
							
							if (it)
							{
								it.UpdateItem();
							}
						}
					}
				}
				deltas[num].ItemName.Clear();
				deltas[num].Count.Clear();			
			}
			else if (e.Name == 'ClearFakeCash')
			{
				plr.A_SetInventory("D4DCashFake",0);
			}
		}
	}
	
	//==========================================================================
	
	// Completely clear off all listings for a particular player.
	void Init(int num)
	{
		deltas[num].ItemName.Clear();
		deltas[num].Count.Clear();
	}

	// Update the listings in the struct.
	void Update(int num, string iname, uint count, bool ofs = false)
	{
		if (players[num].mo)
		{
			if (!deltas[num].SetItem(iname, count, ofs))
			{
				console.printf(iname.." is not a proper item");
			}
		}
	}	
}