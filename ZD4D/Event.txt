//==============================================================================
//==============================================================================
// D4D Event Handler
//==============================================================================
//==============================================================================

Class D4DHandler : EventHandler
{
	PlayerDelta deltas[MAXPLAYERS];
	/*
	uint Credits, MonsterPortion;
	uint Monsters[2];
	uint Secrets[2];
	double MonsterPercent;
	double SecretPercent;
	bool DontRun;
	
	override void WorldTick()
	{
		if (DontRun)	return;
		Monsters[0] = level.killed_monsters;
		Monsters[1] = level.total_monsters;
		Secrets[0] = level.found_secrets;
		Secrets[1] = level.total_secrets;
		MonsterPercent = (Monsters[1] > 0) ? (Monsters[0] / Monsters[1]) * 100.0 : 0.0;
		SecretPercent = (Secrets[1] > 0) ? (Secrets[0] / Secrets[1]) * 100.0 : 0.0;
		
		if (Monsters[1] < 5 && 
		if (Monsters[1] >= 5)
		{
			
		}
	}
	
	
	override void WorldThingDied(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[0]++;
			}
		}
	}
	
	// For spawning, make sure to count friendly D4D monsters since they will
	// eventually turn on the player after they unmorph.
	override void WorldThingSpawned(WorldEvent e)
	{
		let mo = e.Thing;
		if (mo && mo.bCOUNTKILL && mo.bISMONSTER)
		{
			if (!mo.bFRIENDLY || mo is "D4AbstractMonster")
			{
				Monsters[1]++;
			}
		}
	}
	*/
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		
		if (plr)
		{
			// Blocks execution of certain netevent commands that can and will
			// destabilize the game if used improperly. These should only be
			// called from code like the menu.
			if (e.isManual)
			{
				static const Name ProtectedCommands[] =
				{
					'DisableReception',
					'EnableReception',
					'UpdateItems'
				};
				int size = ProtectedCommands.Size();
				for (int i = 0; i < size; i++)
				{
					if (e.Name == ProtectedCommands[i])
					{
						Console.Printf(e.Name.." cannot be called by console.");
						return;
					}
				}
				
			}
			if (e.Name == 'DisableReception')
			{
				deltas[num].receiving = false;
				//Console.Printf("Disabled receiving.");
			}
			else if (deltas[num].receiving)
			{
				deltas[num].SetItem(e.Name, e.Args[0], e.Args[1]);
				//Console.Printf("%s, %d, %d", e.Name, e.Args[0], e.Args[1]);
			}
			else if (e.Name == 'EnableReception')
			{
				deltas[num].receiving = true;
				//Console.Printf("Enabled receiving.");
			}
			else if (e.Name == 'UpdateItems')
			{
				if (deltas[num].ItemName.Size() > 0)
				{
					for (int i = 0; i < deltas[num].ItemName.Size(); i++)
					{
						Class<Inventory> item = deltas[num].ItemName[i];
						if (item)
						{
							plr.A_SetInventory(item, deltas[num].Count[i]);
							let it = UpgradeItem(plr.FindInventory(item));
							
							if (it)
							{
								it.UpdateItem();
							}
						}
					}
				}
				deltas[num].ItemName.Clear();
				deltas[num].Count.Clear();			
			}
			else if (e.Name == 'ClearFakeCash')
			{
				plr.A_SetInventory("D4DCashFake",0);
			}
			else if (e.Name == 'RemoveAmmo')
			{
				RemoveAmmoActors();
			}
			/*
			else
			{
				Console.Printf(e.Name..": Undefined net event");
			}
			*/
		}
	}
	
	//==========================================================================
	// Functions
	
	// Completely clear off all listings for a particular player.
	void Init(int num)
	{
		deltas[num].ItemName.Clear();
		deltas[num].Count.Clear();
	}

	// Update the listings in the struct.
	void Update(int num, string iname, uint count, bool ofs = false)
	{
		if (players[num].mo)
		{
			if (!deltas[num].SetItem(iname, count, ofs))
			{
				console.printf(iname.." is not a proper item");
			}
		}
	}
	
	// Removes all ammo actors from the map.
	void RemoveAmmoActors()
	{
		static const Class<Inventory> names[] =
		{
			"Ammo",
			"ClipReplacer",
			"ClipBoxReplacer",
			"ShellReplacer",
			"ShellBoxReplacer",
			"RocketBoxReplacer",
			"RocketAmmoReplacer",
			"CellReplacer",
			"CellPackReplacer"
		};
		
		ThinkerIterator it = ThinkerIterator.Create("Inventory");
		Inventory mo;
		int count = 0;
		while (mo = Inventory(it.Next()))
		{
			// Do not attempt to remove any actors with the following properties: 
			// - Owner (An actor that 'has' this inventory)
			// - TID 
			// - Special
			if (mo.Owner || mo.TID || mo.Special)
				continue;
			
			let am = Ammo(mo);
			if (am)
			{
				count++;
				am.Destroy();
				continue;
			}
			int size = names.Size();
			for (int i = 0; i < size; i++)
			{
				if (mo is names[i])
				{
					count++;
					mo.Destroy();
					continue;
				}
			}
			
		}
		Console.Printf("%d ammo actors destroyed", count);
	}
	
}