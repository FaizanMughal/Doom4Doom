#include "ZD4D/Spawners.txt"
#include "ZD4D/EventMisc.txt"
#include "ZD4D/EventItemDrops.txt"

Class D4bum : D4Zombieman
{
}

enum ERestrictFlags
{
	RF_NONE =			0,
	RF_NOHEALTH = 		1,
	RF_NOARMOR = 		1 << 1,	//2
	RF_NOBULLETS =		1 << 2,	//4
	RF_NOSHELLS =		1 << 3,	//8
	RF_NOROCKETS =		1 << 4,	//16
	RF_NOCELLS =		1 << 5,	//32
	RF_NOBFGAMMO =		1 << 6,	//64
	RF_NOCARRION =		1 << 7,	//128
	RF_NOCREDITS =		1 << 8,	//256
	RF_NOCRATES =		1 << 9,	//512
	RF_NOUPGRADES =		1 << 10, //1024	- Has no effect in credit mode.
	
	RF_NOCURRENCY = (RF_NOCREDITS|RF_NOCRATES),	
	RF_NOREGAMMO = (RF_NOBULLETS|RF_NOSHELLS|RF_NOROCKETS|RF_NOCELLS),
	RF_NOSPECAMMO = (RF_NOBFGAMMO|RF_NOCARRION),
	RF_NOAMMO = (RF_NOREGAMMO|RF_NOSPECAMMO),
	
	RF_NOPINATAS = (RF_NOHEALTH|RF_NOARMOR|RF_NOAMMO),
	RF_NOTHING = (RF_NOPINATAS|RF_NOCURRENCY|RF_NOUPGRADES)
};

Class D4Restriction play
{
	Class<Actor> mo;
	int Restrictions;
	bool parent, replacement;
}

extend class D4DHandler
{
	const Second = 35;
	const TimeTrigger = Second * 5;
	const DefaultDropChance = 200;

	enum EObjectIndex
	{
		BFGAmmo = 0,
		ChainsawAmmo = 1,
		ObjectIndexMax
	};
	private bool Spawnable[ObjectIndexMax];	
	private bool FirstTime;
	private uint Timer;
	
	AArray 	DemonRunes, Carrion, Beams;
	Array<D4Restriction> RestrictList;
	D4LootContainer LootList;
	D4DDeathStorage Storage[MAXPLAYERS];
	private int UpgradeMode, CurrentUpgradeMode;
	
	bool CheckActorSpawn(EObjectIndex index)			{	return Spawnable[index];	}
	void SetActorSpawn(EObjectIndex index, bool can) 	{	Spawnable[index] = can; 	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	void StageCleanUp()
	{
		Timer = TimeTrigger;
	}
	
	override void WorldTick()
	{
		// Clear the lists every TimeTrigger seconds of null pointers.
		Timer++;
		if (Timer >= TimeTrigger)
		{
			DemonRunes.Clean();
			Carrion.Clean();
			Beams.Clean();
		}
	}
	
	override void OnRegister()
	{
		SetOrder(1001);
		Super.OnRegister();
	}
	
	clearscope int GetUpgradeMode()	{	return CurrentUpgradeMode;	}
	override void WorldLoaded(WorldEvent e)
	{
		DemonRunes = AArray.Create();
		Carrion = AArray.Create();
		Beams = AArray.Create();
		
		LootList = D4LootContainer.Create();
		LootList.SetEntry('LegendaryZombie',				64, 5, 2, 300,-1,10,0);
		LootList.SetEntry('LegendaryAssaultCaptain',		64, 5, 3, 350,-1,10,0);
		LootList.SetEntry('LegendaryStealthTrooper',		64, 6, 3, 400,-1,10,0);
		LootList.SetEntry('LegendaryCommando',				64,10, 4, 500,-1,10,0);
		LootList.SetEntry('LegendaryImp',					64, 8, 3, 400,-1,10,0);
		LootList.SetEntry('LegendaryPhaseImp',				64, 5, 3, 400,-1,10,0);
		LootList.SetEntry('LegendaryFiend',					64, 6, 4, 500,-1,10,0);
		LootList.SetEntry('LegendaryApparition',			64,15,10, 750,-1,10,1);
		LootList.SetEntry('LegendarySoul',					64, 3, 3, 300,-1,10,0);
		LootList.SetEntry('LegendaryRedeemer',				64,10, 5, 500,-1,10,0);
		LootList.SetEntry('LegendaryNecromancer',			64, 7, 4, 450,-1,10,0);
		LootList.SetEntry('LegendaryHellKnight',			64, 8, 4, 400,-1,10,0);
		LootList.SetEntry('LegendaryCyberNoble',			64, 9, 4, 500,-1,10,0);
		LootList.SetEntry('LegendaryAfrit',					64,10, 5, 450,-1,10,0);
		LootList.SetEntry('LegendaryArchon',				64,10, 5, 600,-1,10,0);
		LootList.SetEntry('LegendaryBehemoth',				64,10, 6, 550,-1,10,0);
		LootList.SetEntry('LegendaryBabySentient',			64,10, 5, 450,-1,10,0);
		LootList.SetEntry('LegendaryTormentor',				64,10, 7, 700,-1, 7,0);
		LootList.SetEntry('LegendaryRevenant',				64,10, 6, 500,-1,12,0);
		LootList.SetEntry('LegendaryVile',					64,10, 7, 800,-1,10,0);
		LootList.SetEntry('LegendarySentient',				64,10,12,1000,-1, 4,0);
		LootList.SetEntry('LegendaryCyberdemon',			64,10,10, 900,-1, 6,0);
		LootList.SetEntry('LegendaryAnnihilator',			64,10,11,1100,-1, 5,0);
		LootList.SetEntry('LegendaryCardinal',				64,10,12,1000,-1,10,1);
		LootList.SetEntry('TrueLegendaryCardinal',			64,10,30,2000,-1,10,4);
		LootList.SetEntry('TrueLegendaryCyberdemon',		64,10,25,2000,-1,10,3);
		LootList.SetEntry('TrueLegendaryCyberdemonNormal',	64,10,20,2000,-1,10,2);
		LootList.SetEntry('TrueLegendarySentient',			64,10,30,2000,-1,10,5);
		LootList.SetEntry('TrueLegendaryBabySentient',		64,10,15,1000,-1,10,1);
		LootList.SetEntry('EnragedLegendaryZombie',			64,10, 5, 400,-1, 7,0);
		LootList.SetEntry('EnragedLegendaryAssaultCaptain',	64,10, 6, 450,-1, 7,0);
		LootList.SetEntry('EnragedLegendaryStealthTrooper',	64,10, 6, 500,-1, 7,0);
		LootList.SetEntry('EnragedLegendaryCommando',		64,10, 7, 500,-1, 6,0);
		LootList.SetEntry('EnragedLegendaryFiend',			64,10, 7, 600,-1, 6,0);
		LootList.SetEntry('EnragedLegendarySoul',			64,10, 5, 400,-1,10,0);
		LootList.SetEntry('EnragedLegendaryRedeemer',		64,10,10, 600,-1, 8,0);
		LootList.SetEntry('EnragedLegendaryHellKnight',		64,10, 8, 650,-1,10,0);
		LootList.SetEntry('EnragedLegendaryCybruiser',		64,10,10, 700,-1,10,1);
		LootList.SetEntry('EnragedLegendaryBehemoth',		64,10, 9, 800,-1, 4,0);
		LootList.SetEntry('EnragedLegendaryBabySentient',	64,10, 8, 700,-1, 3,0);
		LootList.SetEntry('EnragedLegendaryTormentor',		64,10,12, 900,-1, 2,0);
		LootList.SetEntry('EnragedLegendaryRevenant',		64,10, 8, 700,-1, 5,0);
		
		// Use the ERestrictFlags at the top of the file to set restrictions.
		// Most of them should be self explanatory.
		int LostSoulRestrictions = (RF_NOHEALTH|RF_NOARMOR|RF_NOBFGAMMO|RF_NOUPGRADES);
		SetRestrictions("D4LostSoulNoCash", LostSoulRestrictions, true);
		SetRestrictions("D4OldLostSoulNoCash", LostSoulRestrictions, true);
		
		for (int i = 0; i < MAXPLAYERS; i++)	KNMInput[i] = 0;
		// If starting a new game, set the upgrade mode appropriately. 
		
		if (!FirstTime && !e.IsSaveGame)
		{
			CVar Upgrade[2];
			Upgrade[0] = CVar.FindCVar("D4D_UpgradeMode");
			Upgrade[1] = CVar.FindCVar("D4D_CurrentUpgradeMode");
			
			if (Upgrade[0] && Upgrade[1])
			{
				UpgradeMode = Upgrade[0].GetInt();
				Upgrade[1].SetInt(UpgradeMode);
				CurrentUpgradeMode = UpgradeMode;
			}
		}
	}
	
	// Don't clear out the arrays, in the event this is a hub.
	override void WorldUnloaded(WorldEvent e)
	{
		for (int i = 0; i < MAXPLAYERS; i++)	KNMInput[i] = 0;
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	bool IsPlayerPawn(Actor mo)
	{
		return (!mo || mo is "PlayerPawn" || mo.player);
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	// Recording section. Here, we add things that have specifics needs for 
	// tracking so we don't have to rely on iterators. As Graf Zahl stated,
	// an array will go much farther to optimize the crap out of searching
	// over using an iterator in almost all circumstances.
	override void WorldThingSpawned(WorldEvent e)
	{
		Actor mo = e.thing;
		if (mo is "D4DBeamBase")
		{
			Beams.Push(D4DBeamBase(mo));
			return;
		}
		
		let car = D4PinataCarrion(mo);
		if (car)
		{
			car.Event = self;
			Carrion.Push(mo);
			return;
		}
		
		if (mo is 'DemonRuneBase')
		{
			DemonRunes.Push(mo);
			return;
		}
		
		if ((mo.bISMONSTER || mo.bSHOOTABLE) && mo.health > 0)
		{
			let mon = D4AbstractMonster(mo);
			if (mon)	
			{
				if (D4D_MonsterType >= 2)
				{
					mon.Event = self;
					int amt = mon.ChoosePowerLevel();
					if (amt)  mon.SetupPowerLevel(amt);
				}
			}
			else if (D4D_MonsterType >= 2)
			{
				int amt = ChoosePowerLevel();
				mo.SetInventory('D4MonsterUpgrader', amt);
			}
		}
	}
	
	int ChoosePowerLevel()
	{
		int rng = random(1, 2000);
		if (rng <= 1)	return 7;	
		if (rng <= 5)	return 6;	
		if (rng <= 10)	return 5;	
		if (rng <= 30)	return 4;	
		if (rng <= 60)	return 3;	
		if (rng <= 100)	return 2;	
		if (rng <= 200)	return 1;
		return 0;
	}
	
	//--------------------------------------------------------------------------
	// Called by carrion whenever collected, so carrion won't merge with it.
	//--------------------------------------------------------------------------

	void RemoveCarrion(D4PinataCarrion mo)
	{
		if (mo && Carrion.Size() > 0)
		{
			int i = Carrion.Find(mo);
			if (i < Carrion.Size())
				Carrion.Actors[i] = null;
		}
	}
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	override void WorldThingDied(WorldEvent e)
	{
		Actor mo = e.Thing;
		
		if (IsPlayerPawn(mo))
			return;
		
		DropPinatas(mo, e.Inflictor);
	}
	
	//--------------------------------------------------------------------------
	//--------------------------------------------------------------------------
	
	override void NetworkProcess(ConsoleEvent e)
	{
		int num = e.Player;
		let plr = players[num].mo;
		
		if (!plr)	
		{	Console.Printf("No player found");	return;	}
		
		if (e.Name == 'ClearFakeCash')
		{
			plr.A_SetInventory("D4DCashFake",0);
			return;
		}
		
		
		// Blocks execution of certain netevent commands that can and will
		// destabilize the game if used improperly. These should only be
		// called from code like the menu.
		if (e.isManual)
		{
			static const Name ProtectedCommands[] =
			{
				//'AkimboSystem'
				'DisableReception',
				'EnableReception',
				'UpdateItems'
			};
			int size = ProtectedCommands.Size();
			for (int i = 0; i < size; i++)
			{
				if (e.Name == ProtectedCommands[i])
				{
					Console.Printf(e.Name.." cannot be called by console.");
					return;
				}
			}
		}
		else
		{
			int arg = e.Args[0];
			if (e.Name == 'D4D_KNM++')			{	KNMInput[arg]++;	return;	}
			else if (e.Name == 'D4D_KNM0')		{	KNMInput[arg] = 0;	return;	}
			else if (e.Name == 'D4D_KNM')		{	KNM(e);				return;	}
		}
		if (e.Name == 'Dash')
		{
			let pl = Doom4Player(plr);
			if (pl)	pl.TryDash();
		}
		else if (e.Name == 'DisableReception')
		{
			deltas[num].receiving = false;
		}
		else if (deltas[num].receiving)
		{
			deltas[num].SetItem(e.Name, e.Args[0], e.Args[1]);
		}
		else if (e.Name == 'EnableReception')
		{
			deltas[num].receiving = true;
		}
		else if (e.Name == 'UpdateItems')
		{
			if (deltas[num].ItemName.Size() > 0)
			{
				for (int i = 0; i < deltas[num].ItemName.Size(); i++)
				{
					Class<Inventory> item = deltas[num].ItemName[i];
					if (item)
					{
						plr.A_SetInventory(item, deltas[num].Count[i]);
						let it = UpgradeItem(plr.FindInventory(item));
						
						if (it)
						{
							it.UpdateItem();
						}
					}
				}
			}
			deltas[num].ItemName.Clear();
			deltas[num].Count.Clear();			
		}
		else if (e.Name == 'SectorLight')		{	SetSectorLight(e);	}		
		else if (e.Name == 'RemoveAmmo')
		{
			RemoveAmmoActors();
		}
		else if (e.Name == 'FindLiveTID')
		{
			FindLiveTID(e);
		}
		else if (e.Name == 'PrintSlots')
		{
			PrintSlots(e);
		}
		else
		{
			static const String KeyWords[] =
			{
				'D4DAddon_',
				'Akimbo_SetLeft_',
				'Akimbo_SetRight_',
				'Rune_'
			};
			int size = KeyWords.Size();
			for (int i = 0; i < size; i++)
			{
				// If it doesn't have the matching command, next please.
				
				
				Name check1 = e.Name.Left(Keywords[i].Length());
				Name check2 = KeyWords[i];
				if (check1 != check2)
					continue;
					
				// It's one of the keywords. Process it.
				String suffix = e.Name.Mid(KeyWords[i].Length(), e.Name.Length());
				
				Switch(i)
				{
					// For external mods to use as they please using their own handlers
					// without interrupting this one.
					Case 0:		// D4DAddon_
						return;
					
					Case 1:		// Akimbo_SetLeft_
					Case 2:		// Akimbo_SetRight_
					{
						bool IsRight = (i == 2);
						let ak = AkimboWeapon(plr.FindInventory("AkimboWeapon",true));
						if (ak)	ak.SetWeaponSide(suffix, IsRight);
						return;
					}
					
					Case 3:
					{
						SummonRune(plr, suffix, e.Args[0]);
						return;
					}
					
					Default:	// Some other command that's not viable.
						break;
				}
			}
			CVar EventPrint = CVar.FindCVar("D4D_NetEventDebug");
			if (EventPrint && EventPrint.GetInt())
			{
				Console.Printf("D4DHandler: "..e.Name.."- Undefined net event");
			}
		}
	}
	
	//==========================================================================
	//==========================================================================
	
	bool DropPinatas(Actor mo, Actor inf = null)
	{
		// First, make sure it exists and it's a monster.
		// Abort if they're set to not drop anything.
		if (!mo || !mo.bISMONSTER || mo.bNOINTERACTION)	return false;
		int Restrictions = GetRestrictions(mo.GetClass());
		if (Restrictions >= RF_NOTHING)					return true;
		
		D4DropList Pinatas;
		bool Armor[4];		for (int i = 0; i < Armor.Size(); i++)	Armor[i] = false;
		bool HPPin = false;
		bool Bullets = false;
		bool Shells = false;
		bool Cells = false;
		bool Rockets = false;
		bool BFG = false;
		bool CashPower = false;
		int UpgradeDropChance = -1, UpgradeDropAlways = 0;
		int CrateDropChance = 0, CrateDropAmount = 0, CrateDropAlways = 0;
		int CashChainsawPinata = 0;
		int RunePowerMin = 0, RunePowerMax = 7;
		int CashAmount = 0;
		
		int CashMul = 1;
		int CrateAmt, CrateDrops;
		int LootDrop = mo.GetCvar("D4D_LootDrop");
		int TotalMul = mo.CountInv("D4MonsterUpgrader");
		
		// Needed because the inventory is based on n + 1 (i.e. uncommon has 1 of the above, rare has 2, etc).
		if (TotalMul > 0)	
		{
			TotalMul++;
			CashMul *= TotalMul;
		}
		else TotalMul = 1;
		int Chance = Max(1,TotalMul);
		
		Vector3 pos = 	mo.pos;
		//int hp = 		mo.health;
		int spawnhp = 	mo.GetSpawnHealth();
		Name mod = 		mo.DamageTypeReceived;
		
		// Drop carrion if enabled and the monster can drop it, and if the
		// monster was gibbed.
		if (MPWeapons) 
		{
			if (!(Restrictions & RF_NOCARRION) &&
				(inf && 
					!inf.bNOEXTREMEDEATH &&
						(inf.bEXTREMEDEATH || 
						inf.DamageType == "Extreme" || 
						inf.DeathType == "Extreme")) ||
				(MOD == 'Extreme' ||
					MOD == 'BerserkKill' || 
					MOD == 'ChainsawKill' || 
					MOD == 'MeleePunch' ||
					MOD == 'GloryKill') ||
				(mo.InStateSequence(mo.CurState, mo.ResolveState("XDeathNoDrops"))) ||
				(mo.InStateSequence(mo.CurState, mo.ResolveState("XDeath"))) ||
				(mo.health < mo.GetGibHealth()))
			{
				Pinatas.AddItem("D4PinataCarrion", 1 * TotalMul);
			}	
		}
		
		// First set up the base multiplier upon damage type when killed.
		if (mod == 'ChainsawPinata')
		{
			CashMul *= 4;
			if (!(Restrictions & RF_NOBULLETS))	Pinatas.AddItem("D4PinataBulletsBig", 	LootDrop ? 4 : 1);
			if (!(Restrictions & RF_NOSHELLS))	Pinatas.AddItem("D4PinataShellsBig", 	LootDrop ? 4 : 1);
			if (!(Restrictions & RF_NOCELLS))	Pinatas.AddItem("D4PinataCellsBig", 	LootDrop ? 5 : 1);
			if (!(Restrictions & RF_NOROCKETS))	Pinatas.AddItem("D4PinataRocketsBig", 	LootDrop ? 3 : 1);
		}
		else if (MOD == 'BerserkKill' || 
				MOD == 'ChainsawKill' || 
				MOD == 'MeleePunch' ||
				MOD == 'GloryKill')
		{
			CashMul *= 2;
			if (LootDrop && !(Restrictions & RF_NOHEALTH))
				Pinatas.AddItem("D4PinataHealth", 5); 
		}
		
		// Now check to see if it's a D4D monster. If so, just use what's given.
		// If not, see if it's a manual loot table.
		// Otherwise, establish a formula based on health.
		let d4m = D4AbstractMonster(mo);
		Class<Actor> thing = mo.GetClass();
		
		//Is it manual? This is defined above (see D4bum example).
		// Find the thing and snag its contents, if it has any.
		let Loot = D4LootDef(LootList.FindEntry(mo.GetClassName()));
		if (Loot)
		{
			[CrateDropChance, CrateDropAmount, CrateDropAlways] = Loot.GetCrateDrops();
			[CashAmount, CashChainsawPinata] = Loot.GetCashDrops();
			[UpgradeDropChance, UpgradeDropAlways] = Loot.GetUpgradeDrops();
			
		}
		else if (d4m) // Not manually overridden -- D4D monster.
		{
			CrateDropChance = 		d4m.CrateDropChance;
			CrateDropAmount = 		d4m.CrateDropAmount;
			CrateDropAlways = 		d4m.CrateDropAlways;
			CashChainsawPinata = 	d4m.CashChainsawPinata;
			CashAmount = 			d4m.CashAmount;
			UpgradeDropChance =		d4m.UpgradeDropChance;
			UpgradeDropAlways =		d4m.UpgradeDropAlways;
			
		}
		else	// Neither D4D monster nor a manually added one.
		{
			if (CurrentUpgradeMode)
			{
				// For every 1000 health, guarantee a crate.
				// Otherwise, divide the HP by 20 and use that as a base chance.
				CrateDropAlways = int(floor(spawnhp / 1000));
				CrateDropChance = Max(1,spawnhp / 20) * (mo.bBOSS ? 2 : 1);
				if (CrateDropChance > 256)
				{
					CrateDropAmount = CrateDropChance / 256;
				}
			}
			else
			{
				CashAmount = spawnhp / (mo.bBoss ? 12 : 15);
			}
		}
		
		if (!(mo is 'D4AbstractMonster'))
		{
			Class<Actor> rune = GetRune(mo);
			if (rune)
			{
				let DRune = DemonRuneBase(mo.Spawn(rune, mo.pos, ALLOW_REPLACE));
				if (DRune)	DRune.OnDrop(mo);
			}
		}
		
		// Now that the monster has been prepared, set up the drop chances for crates.
		if (!CurrentUpgradeMode)	// Credits
		{
			if (CashChainsawPinata > 0 && mod == 'ChainsawPinata')
			{
				CashAmount = CashChainsawPinata;
				CashMul = Max(1, TotalMul); // Only multiply if they are a colored monster.
			}
		}
		else	// Crates
		{
			// Cycle through the drop chances of each, excluding the always
			// dropping. If the chance is within valid ranges, just add to
			// amount that will always be given.
			if (!(Restrictions & RF_NOCRATES))
			{
				CrateDrops = CrateDropAmount * CashMul;
				if (CrateDrops > 0)
				{
					for (int i = 0; i < CrateDrops; i++)
					{
						if (random[drop](1,256) <= CrateDropChance)
							CrateDropAlways++;
					}
				}
			}
			// Drop some upgrades based on chance. UpgradeDropChance is the divisor,
			// inverse of how the crates work. 
			// 0 means no chance. 
			// 1 means guaranteed.
			// 2 means 1/2 chance, etc.
			
			
			if (!(Restrictions & RF_NOUPGRADES))
			{	
				bool Soviet = false;
				for (int i = 0; i < MAXPLAYERS; i++)
				{
					if (!playeringame[i]) continue;
					let plr = players[i].mo;
					if (!plr)	continue;
					
					if (!CashPower && plr.CountInv("PowerD4Money"))
					{
						Chance *= 4;
						CashPower = true;
					}
					
					if (!Soviet && 
					!plr.CountInv("SovietToken") &&
					plr.CountInv("AssaultRifleMod1") &&
					plr.CountInv("AssaultRifleMod2") &&
					plr.CountInv("ChaingunMod1") &&
					plr.CountInv("ChaingunMod2") &&
					plr.CountInv("GaussCannonMod1") &&
					plr.CountInv("GaussCannonMod2") &&
					plr.CountInv("PlasmaRifleMod1") &&
					plr.CountInv("PlasmaRifleMod2") &&
					plr.CountInv("RocketLauncherMod1") &&
					plr.CountInv("RocketLauncherMod2") &&
					plr.CountInv("ShotgunMod1") &&
					plr.CountInv("ShotgunMod2") &&
					plr.CountInv("SSGUpgrade1") &&
					plr.CountInv("SSGUpgrade2") &&
					plr.CountInv("SSGUpgrade3") &&
					plr.CountInv("SSGUpgrade4") &&
					plr.CountInv("PistolUpgradeAutomatic") &&
					plr.CountInv("PistolUpgradeAltDamage") &&
					plr.CountInv("PistolUpgradeAltCharge") &&
					plr.CountInv("PistolUpgradeDamage") &&
					plr.CountInv("PistolUpgradeLance") &&
					plr.CountInv("BFGUpgrade1") &&
					plr.CountInv("BFGUpgrade2") &&
					plr.CountInv("BFGUpgrade3") &&
					plr.CountInv("BFGUpgrade4"))
					{
						Soviet = true;
						mo.A_DropItem("SovietChaingunUpgradePickup");
					}
					
					if (Soviet && CashPower)
						break;
				}
				
				
				bool AllowSleight = (UpgradeDropChance < 0);
				if (AllowSleight)	UpgradeDropChance = DefaultDropChance;
				
				// Black and white monsters always drop an upgrade.
				// White drops 2, black drops 1. This stacks in accumulation
				// with the rest of the drop chances.
				UpgradeDropAlways += Clamp(TotalMul - 5, 0, 2);
				
				if (UpgradeDropChance > 0)
				{
					// Give a slight boost to enemies that are bosses as they're tougher.
					if (AllowSleight && mo.bBOSS)
					{
						if (UpgradeDropChance <= 10)
							UpgradeDropChance /= (mo.bBOSS ? 2 : 1);
						else
							UpgradeDropChance -= 10;
					}
					
					if (Max(1,random[drop](1, (UpgradeDropChance / Chance))) == 1)
						UpgradeDropAlways++;
				}
				
				// If we have something to drop, do it.
				if (UpgradeDropAlways > 0)
				{
					for (int i = 0; i < UpgradeDropAlways; i++)
						mo.A_DropItem("D4UpgradePickupSpawner");
				}
			}
		}
		
		if (CashPower)
			CashMul *= 4;
		
		// Iterate through each player to see who has the highest upgrades.
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			let p = players[i].mo;
			if (!p)	continue;
		
			// Drop items first.
			if (mod != 'Massacre')
			{
				if (LootDrop)
				{
					if (!(Restrictions & RF_NOARMOR))
					{
						if (mod == 'ChainsawPinata')
						{
							// Armor
							if (!Armor[0] && p.CountInv("D4ArmorCapRaiser") >= 25)
							{
								Armor[0] = true;
								int rng[2];
								rng[0] = random[drop](1,256) > 128 ? 1 : 0;
								rng[1] = random[drop](1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[1] && p.CountInv("D4ArmorCapRaiser") >= 50)
							{
								Armor[1] = true;
								int rng[2];
								rng[0] = random[drop](1,256) > 128 ? 1 : 0;
								rng[1] = random[drop](1,256) > 128 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng[0] + rng[1]);
							}
							if (!Armor[2] && p.CountInv("D4ArmorCapRaiser") >= 100)
							{
								Armor[2] = true;
								Pinatas.AddItem("D4PinataArmor", 2);
							}
						}
						else 
						{
							if (!Armor[3] && p.CountInv("BasicArmor") < 200 && p.CountInv("D4ArmorCapRaiser") >= 25)	//only if player isnt at full armor and has upgraded his armor
							{
								Armor[3] = true;
								int rng = random[drop](1,256) > 192 ? 1 : 0;
								Pinatas.AddItem("D4PinataArmor", rng); //very rarely they will drop armor
							}
						}
					}
					//health giver
					if (!HPPin && !(Restrictions & RF_NOHEALTH) && p.health < 60)
					{
						HPPin = true;
						int rng = random[drop](1,256) > 192 ? 1 : 0;
						Pinatas.AddItem("D4PinataHealth", 1 + rng);
					}
					if (!(Restrictions & RF_NOREGAMMO))
					{
						//bullets giver
						if (!Bullets && !(Restrictions & RF_NOBULLETS) && 
							(p.CountInv("D4AssaultRifle") || 
							p.CountInv("D4Chaingun") ||
							p.CountInv("D4Repeater")) && 
							p.CountInv("D4Bullets") < 10)
						{
							Bullets = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 240 ? 1 : 0;
							Pinatas.AddItem("D4PinataBullets", rng[0] + rng[1]);
						}
						
						//Shells giver
						if (!Shells && !(Restrictions & RF_NOSHELLS) &&
							(p.CountInv("D4Shotgun") || 
							p.CountInv("D4SuperShotgun")) && 
							p.CountInv("D4Shells") < 5)
						{
							Shells = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataShells", rng[0] + rng[1]);
						}
						
						//Cells giver
						if (!Cells && !(Restrictions & RF_NOCELLS) &&
							(p.CountInv("D4PlasmaRifle") ||
							p.CountInv("D4GaussCannon") ||
							p.CountInv("D4LightningGun")) && 
							p.CountInv("D4Cells") < 16)
						{
							Cells = true;
							int rng[2];
							rng[0] = random[drop](1,256) > 128 ? 1 : 0;
							rng[1] = random[drop](1,256) > 128 ? 1 : 0;
							Pinatas.AddItem("D4PinataCells", rng[0] + rng[1]);
						}
						//Rockets giver
						if (!Rockets && !(Restrictions & RF_NOROCKETS) &&
							(p.CountInv("D4RocketLauncher") || 
							p.CountInv("D4GrenadeLauncher")) &&
							p.CountInv("D4Rockets") < 5)
						{
							Rockets = true;
							int rng = random[drop](1,256) > 196 ? 1 : 0;
							Pinatas.AddItem("D4PinataRockets", rng);
						}
					}
					//BFG ammo giver, this one doesnt check for low ammo, but it does check for the weapon
					if (!BFG && !(Restrictions & RF_NOBFGAMMO) && p.CountInv("D4BFG"))
					{
						BFG = true;
						if (random[drop](1,512) < 16)	Pinatas.AddItem("D4PinataBFG", 1);
					}
				}
			}
			
			// -------------------------------------------------------------
			// Drop the cash.
			// -------------------------------------------------------------
			// Crates
			if (CurrentUpgradeMode)
			{
				if (!(Restrictions & RF_NOCRATES) && CrateDropAlways > 0)
				{	// The multiplier is already calculated above so do nothing else.
					p.A_GiveInventory("D4DCash",		CrateDropAlways);
					p.A_GiveInventory("D4DCashFake",	CrateDropAlways);
					p.A_GiveInventory("CashUpdater",	1);
				}
			}
			else // Credits
			{
				if (!(Restrictions & RF_NOCREDITS) && CashAmount > 0)
				{
					int OldMul = CashMul;
					CashMul *= p.CountInv("PowerD4Money") ? 4 : 1;
					int CPB1 = p.CountInv("CashPercentBonus");
					int CPB2 = p.CountInv("CashPercentBonusTemp");
					
					double CashAmtPercent = CashAmount * (CPB1 + CPB2);
					CashAmount = (CashAmount + (CashAmtPercent / 100)) * CashMul;
					p.A_GiveInventory("D4DCash",		CashAmount);
					p.A_GiveInventory("D4DCashFake",	CashAmount);
					p.A_GiveInventory("CashUpdater",	1);
					CashMul = oldmul;
				}
			}
		
		}
		
		if (TotalMul > 0)	
			Pinatas.Multiply(TotalMul);
		Pinatas.DropItemsPos(pos);
		return true;
	}
	//==========================================================================
	//==========================================================================
	// Custom functions
	//==========================================================================
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// IsUpgradeBlacklisted
	//
	// Global function. Checks if the item is directly a set of blacklisted
	// items. Blacklisted items should never be given.
	//--------------------------------------------------------------------------
	static bool IsUpgradeBlacklisted(Class<D4DKeeperItem> Item, bool crate = false)
	{
		if (!Item)	return true;
		static const Name Blacklist[] =
		{
			'UpgradeItem',
			'UpgradeItemSpecial',
			'D4DKeeperItem',
			'D4RuneUpgrade1'
		};
		
		// Make sure it's not directly a blacklisted item.
		String Check = Item.GetClassName();
		for (int j = 0; j < Blacklist.Size(); j++)
			if (Check == Blacklist[j])
				return true;
		
		if (crate)
		{
			if (Check == 'CashPercentBonus')	return true;
		}
		
		// UpgradeBase derived items should never be given. They are merely
		// there for the sake of giving the hint for which weapon they belong to.
		if (Check.IndexOf("UpgradeBase") >= 0)
			return true;
		
		return false;
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	static clearscope D4DHandler Fetch()
	{
		return D4DHandler(Find("D4DHandler"));
	}
	
	//==========================================================================
	// Item Restrictions
	//==========================================================================
	
	//--------------------------------------------------------------------------
	// ClearAllRestrictions
	// 
	// Removes all item drop restrictions.
	//--------------------------------------------------------------------------
	void ClearAllRestrictions()
	{
		if (RestrictList.Size() < 1)	return;
		
		
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (res) res.Destroy();
		}
		RestrictList.Clear();
	}
	
	//--------------------------------------------------------------------------
	// SetRestrictions
	// 
	// Sets restrictions on what a monster can drop when they die.
	// No flags means it will delete whatever context there is that was 
	// previously established.
	//--------------------------------------------------------------------------
	
	void SetRestrictions(Class<Actor> mo, int flags, bool parent = false)
	{
		if (!mo)	return;
		bool SizeChanged = false;
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (!res)
			{
				SizeChanged = true;
				RestrictList.Delete(i);
				i--;
				continue;
			}
			
			if (res.mo == mo)
			{
				if (flags <= 0)
				{
					SizeChanged = true;
					res.Destroy();
					RestrictList.Delete(i);
					continue; // Just to be safe, make sure there's no duplicates.
				}
				res.Restrictions = flags;
				if (SizeChanged)	RestrictList.ShrinkToFit();
				return;
			}
		}
		if (SizeChanged)	RestrictList.ShrinkToFit();
		// Do nothing if the object isn't found and we want to erase it.
		if (flags <= 0)	
			return;
		
		// None found, so make a new one.
		D4Restriction res = new('D4Restriction');
		res.mo = mo;
		res.Restrictions = flags;
		res.parent = parent;
		RestrictList.Push(res);
	}
	
	//--------------------------------------------------------------------------
	// GetRestrictions
	// 
	// Checks for restrictions on monsters and returns the bytes.
	//--------------------------------------------------------------------------
	
	int GetRestrictions(Class<Actor> mo)
	{
		if (!mo || RestrictList.Size() < 1)
			return RF_NONE;
		
		int size = RestrictList.Size();
		for (int i = 0; i < RestrictList.Size(); i++)
		{
			D4Restriction res = RestrictList[i];
			if (!res)	continue;
			
			// Check if the class is directly that, or a child, if the parent 
			// boolean is set in the restriction class.
			if ((mo == res.mo) || (res.parent && CheckParent(mo, res.mo)))
			{
				return res.Restrictions;
			}
		}
		return RF_NONE;
	}
	
	//==========================================================================
	// Misc
	//==========================================================================
	static clearscope bool CheckParent(Class<Object> child, Class<Object> parent)
	{
		if (!child)	return false;
		while (true)
		{
			let check = child.GetParentClass();
			if (child == null || check == null)
				return (parent == null) ? true : false;
			if (check == parent)
				return true;
			child = child.GetParentClass();
		}
		return false;
	}
	
	void DestroyBeams(Actor caller)
	{
		if (caller && Beams && Beams.Size() > 0)
		{
			for (int i = 0; i < Beams.Size(); i++)
			{
				D4DBeamBase mo = D4DBeamBase(Beams.Actors[i]);
				if (mo && (mo.Master == caller) && !mo.bNODAMAGE)
				{
					mo.bNODAMAGE = true;
					mo.SetStateLabel('Death');
				}
			}
		}
	}
	
	static void ConvertBerserkToQuad(D4DBerserk mo)
	{
		if (!mo)	return;
		let quad = D4QuadDamage(Actor.Spawn("D4QuadDamage", mo.pos, ALLOW_REPLACE));
		if (quad)
		{
			quad.ChangeTID(mo.TID);
			quad.A_SetSpecial(mo.Special, mo.args[0], mo.args[1], mo.args[2], mo.args[3], mo.args[4]);
			quad.A_ChangeCountFlags(FLAG_NO_CHANGE, mo.bCOUNTITEM, mo.bCOUNTSECRET);
			quad.ObtainInventory(mo);
			quad.Vel = mo.Vel;
			quad.Angle = mo.Angle;
			quad.Pitch = mo.Pitch;
			quad.SpawnPoint = mo.SpawnPoint;
			quad.ActivationType = mo.ActivationType;
			quad.BlockingMobj = mo.BlockingMobj;
			quad.BlockingLine = mo.BlockingLine;
			quad.FloorZ = mo.FloorZ;
			quad.CeilingZ = mo.CeilingZ;
			quad.DropoffZ = mo.DropoffZ;
			quad.Target = mo.Target;
			quad.Master = mo.Master;
			quad.Tracer = mo.Tracer;
			mo.Destroy();
		}
	}
	
	//==========================================================================
	// Death Storage
	//
	// The purpose of these is to store the player's items when they die in
	// death exits, and restore them on the other side.
	//==========================================================================
	
	override void PlayerRespawned(PlayerEvent e)
	{
		
	}
	
	int FetchPlayerNumber(Actor mo)
	{
		if (!mo || !mo.player)	return-1;
		
		int i = 0;
		for (i = 0; i < MAXPLAYERS; i++)
			if (playeringame[i] && players[i].mo == mo)
				return i;
		
		return -1;
	}
	
	//--------------------------------------------------------------------------
	// Stores the players items into D4DDeathStorage, a static thinker that
	// crosses levels and remembers their inventory. This doesn't take into
	// account any novelties - only the items they had and their amount.
	void StorePlayerItems(Actor mo)
	{
		int i = FetchPlayerNumber(mo);
		if (i < 0)	return;
		
		if (!Storage[i])	Storage[i] = new("D4DDeathStorage");
		Storage[i].Init();
		
		for (let probe = mo.Inv; probe != null; probe = probe.Inv)
		{
			// Powerups, weapons, armor and health don't transfer over since they
			// were dead.
			if (!probe || probe is "Powerup" || probe is "Weapon" || probe is "BasicArmor" ||
				probe is "Health")
				continue;
			
			// Save it.
			Storage[i].SetItem(probe.GetClass(), probe.Amount);
			CVar debug = CVar.FindCVar("D4Debug");
			if (debug && debug.GetInt() > 0)
			{
				String msg = String.Format("%s : %d ", probe.GetClassName(), probe.Amount);
				Console.Printf("%s", msg);
			}
		}
	}
	
	//--------------------------------------------------------------------------
	// 
	void ReturnPlayerItems(Actor mo)
	{
		int i = FetchPlayerNumber(mo);
		if (i < 0 || !Storage[i])	return;
		
		let store = D4DDeathStorage(Storage[i]);
		Class<Inventory> item = null;	int amt = 0;
		
		do
		{
			[item, amt] = store.GetNextItem();
			if (item)
			{
				if (amt > 0)
					mo.SetInventory(item, amt);
				else
				{
					mo.SetInventory(item, 1);
					mo.SetInventory(item, 0);
				}
					
			}
		}
		while (amt > -1);
	}
	
	//==========================================================================
	// ChangeWeapons
	//
	// Sets the forthcoming weapon based on the command sent to it. Applicable
	// commands are:
	// 
	// slot # (0-9)
	// weapnext
	// weapprev
	//==========================================================================
	void ChangeWeapons(ConsoleEvent e) 
	{
		int pnum = e.Player;
		if (!playeringame[pnum])
			return;
			
		PlayerInfo player = players[pnum];

		if (!player) // Return if the player is null
			return;

		Array<String> commandStrings;
		e.Name.Split (commandStrings, ":");
		if (commandStrings.Size() < 2) // Return if the array contains less than two strings
			return;
			
		// At this point, we should have at minimum two strings in this form:
		// [0] = AEoD_SelectWeapon
		// [1] = <command>
		// See InputProcess for the translations (from first to second array)
		
		let ready = player.ReadyWeapon;
		let pending = player.PendingWeapon;
	}
}