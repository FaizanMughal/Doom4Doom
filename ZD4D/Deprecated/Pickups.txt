

//==============================================================================
// Powerups
//==============================================================================

Class D4PowerUpgradePickup : CustomInventory
{
	UpgradePinataFlier flier;
	int count;
	int ticker;
	bool Flying;
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+BRIGHT
		Inventory.PickupMessage "Random Powerup Upgrade gives you...";
	}
	States
	{
	Spawn:
		M670 F 17 NoDelay
		{
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.NoItem = true;
			}
		}
		M671 F 17;
		"----" A 1
		{
			invoker.ticker = (invoker.ticker + 1) % 35;
			
			Name spr = (invoker.ticker < 17) ? "M670" : "M671";
			sprite = GetSpriteIndex(spr);
			
			if (invoker.count >= DelayVacuum)
			{
				if (invoker.tracer)
				{
					invoker.count = DelayVacuum;
					PlrCheck.SetFlying(invoker, true);
					A_FaceTracer(0,0,0,0,FAF_MIDDLE);
					A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
					if (Distance3D(tracer) <= 32)
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false);	}
				}
				else	PlrCheck.SetFlying(invoker, false);
			}
			else invoker.count++;
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			Array<String> items;
			items.Clear();
			if (!CountInv("D4MegachargeUpgrade1"))	items.Push("D4MegachargeUpgrade1");
			if (!CountInv("D4MegachargeUpgrade2"))	items.Push("D4MegachargeUpgrade2");
			if (!CountInv("D4DoomDollUpgrade1"))	items.Push("D4DoomDollUpgrade1");
			if (!CountInv("D4DoomDollUpgrade2"))	items.Push("D4DoomDollUpgrade2");
			if (!CountInv("D4RegenUpgrade1"))		items.Push("D4RegenUpgrade1");
			else if (!CountInv("D4RegenUpgrade2"))	items.Push("D4RegenUpgrade2"); //Requires the first.
			if (!CountInv("D4RegenUpgrade3"))		items.Push("D4RegenUpgrade3");
			if (!CountInv("D4RegenUpgrade4"))		items.Push("D4RegenUpgrade4");
			if (!CountInv("D4PentagramUpgrade1"))	items.Push("D4PentagramUpgrade1");
			if (!CountInv("D4PentagramUpgrade2"))	items.Push("D4PentagramUpgrade2");
			if (!CountInv("D4PentagramUpgrade3"))	items.Push("D4PentagramUpgrade3");
			if (!CountInv("D4PentagramUpgrade4"))	items.Push("D4PentagramUpgrade4");
			//if (!CountInv("D4RuneUpgrade1"))		items.Push("D4RuneUpgrade1");
			if (!CountInv("D4RuneUpgrade2"))		items.Push("D4RuneUpgrade2");
			if (!CountInv("D4RuneUpgrade3"))		items.Push("D4RuneUpgrade3");
			if (!CountInv("D4RuneUpgrade4"))		items.Push("D4RuneUpgrade4");
			if (!CountInv("D4QuadUpgrade1"))		items.Push("D4QuadUpgrade1");
			if (!CountInv("D4QuadUpgrade2"))		items.Push("D4QuadUpgrade2");
			if (!CountInv("D4HasteUpgrade1"))		items.Push("D4HasteUpgrade1");
			if (!CountInv("D4HasteUpgrade2"))		items.Push("D4HasteUpgrade2");
			if (items.Size() > 0)
			{
				int rng = random(0, items.Size() - 1);
				Class<Inventory> som = items[rng];
				if (som)	A_GiveInventory(som);
				A_Print("$"..items[rng]);
			}
			
			items.Clear();
			return true;
		}
		Stop;
	}
}


/*
// Template
Class D4UpgradePickup : D4PowerUpgradePickup
{
	Default
	{
		Inventory.PickupMessage " Upgrade";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (!CountInv(""))
			
			
			return true;
		}
		Stop;
	}
}*/

//==============================================================================
// Suit
//==============================================================================

Class D4SuitUpgradePickup : CustomInventory
{
	int ticker;
	int count;
	bool Flying;
	UpgradePinataFlier flier;
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+BRIGHT
	}
	States
	{
	Spawn:
		M670 G 17 NoDelay
		{
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.NoItem = true;
			}
		}
		M671 G 17;
		"----" A 1
		{
			invoker.ticker = (invoker.ticker + 1) % 34;
			
			Name spr = (invoker.ticker < 17) ? "M670" : "M671";
			sprite = GetSpriteIndex(spr);
				
			if (invoker.count >= DelayVacuum)
			{
				if (tracer)
				{
					invoker.count = DelayVacuum;
					PlrCheck.SetFlying(invoker, true);
					A_FaceTracer(0,0,0,0,FAF_MIDDLE);
					A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
					if (Distance3D(tracer) <= 32)
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false);	}
				}
				else	PlrCheck.SetFlying(invoker, false);
			}
			else invoker.count++;
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			// He's making a list, checking it twice!
			// Gonna find out whose a jackass or vice!
			// Satan Claws is coming to drown!
			
			Array<Class<Inventory> > list;
			list.Clear();
			
			static const Class<Inventory> Items[] =
			{
				"D4AirUpgrade",
				"D4Stamina",
				"D4ArmorCapRaiser",
				"D4CrateUpgrade",
				"ProtectionBonus"
			};
			
			for (int i = 0; i < Items.Size(); i++)
			{
				let inv = FindInventory(Items[i]);
				if (!inv || inv.Amount < inv.MaxAmount)
					list.Push(Items[i]);
			}
			if (list.Size() < 1)	
				return true;
			
			int rng = random(0, list.Size() - 1);	// Choose a random one.
			Class<Inventory> check = list[rng];		// Make sure it exists.
			
			if (check)
			{
				if (list[rng] == 'D4Stamina' || list[rng] == 'D4ArmorCapRaiser')
				{
					if (CountInv(check) >= 50)	A_SetInventory(check,100);
					else						A_GiveInventory(check, 25);
				}
				else
				{
					A_GiveInventory(check,1);
				}
				let item = UpgradeItem(FindInventory(check));
				if (item)
				{
					item.UpdateItem();
					item.PrintDesc();
				}
			}
			else Console.Printf("ERROR: %s - bad item!", list[rng]);
			
			return true;
		}
		Stop;
	}
}

Class D4ArmorUpgradePickup : D4SuitUpgradePickup
{
	Default
	{
		Inventory.PickupMessage "Armor Upgrade";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			bool given = true;
			int amt = CountInv("D4ArmorCapRaiser");
				 if (amt < 25)		A_SetInventory("D4ArmorCapRaiser",25);
			else if (amt < 50)		A_SetInventory("D4ArmorCapRaiser",50);
			else if (amt < 100)		A_SetInventory("D4ArmorCapRaiser",100);
			else
			{
				given = false;
				if (A_GiveInventory("ArmorStripper",1))
					A_GiveInventory("D4BlueArmorMegasphere",1);
			}
			
			if (given)
			{
				amt = CountInv("D4ArmorCapRaiser");
				String line1 = "Armor Capacity +"..amt.."\n";
				
					 if (amt >= 100)	line1 = line1.."Chainsaw Alt guarantees minimum 2 armor shards";
				else if (amt >= 50)		line1 = line1.."Chainsaw Alt: + 0 to 4 Armor Shards";
				else					line1 = line1.."Chainsaw Alt: + 0 to 2 Armor Shards";
				
				A_Print(line1);
			}
			//
			return true;
		}
		Stop;
	}
}

Class D4CashUpgradePickup : D4SuitUpgradePickup
{
	Default
	{
		Inventory.PickupMessage "Credit Upgrade";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CountInv("CashPercentBonus") < 40)		
			{
				A_GiveInventory("CashPercentBonus",10);
				int amt = CountInv("CashPercentBonus");
				
				A_Print("Credit Upgrade +"..amt.."%");
			}
			//
			return true;
		}
		Stop;
	}
}

Class D4CrateUpgradePickup : D4SuitUpgradePickup
{
	Default
	{
		Inventory.PickupMessage "Crate Upgrade";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			int amt = CountInv("D4CrateUpgrade");
			if (amt < 3)		
			{
				A_GiveInventory("D4CrateUpgrade",1);
				
				amt += 1;
					 if (amt == 1)	A_Print("Heavy Crates\nGuarantees larger quality items");
				else if (amt == 2)	A_Print("Sensor Crates\nCrates are more situationally aware");
				else				A_Print("Weapon Crates\nCrates may contain weapons");
				
			}
			return true;
		}
		Stop;
	}
}

Class D4ProtectionUpgradePickup : D4SuitUpgradePickup
{
	Default
	{
		Inventory.PickupMessage "Protection Upgrade";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (!CountInv("ProtectionBonus1"))
			{
				A_SetInventory("ProtectionBonus1",1);
				A_Print("50% Environment Damage Reduction");
			}
			else if (!CountInv("ProtectionBonus2"))
			{
				A_SetInventory("ProtectionBonus2",1);
				A_Print("50% Self Damage Reduction");
			}
			else if (!CountInv("ProtectionBonus3"))
			{
				A_SetInventory("ProtectionBonus3",1);
				A_Print("50% Radius Damage Reduction");
			}
			else
			{
				A_PlaySound("PentagramOfProtection/Pickup",CHAN_ITEM,1);
				A_GiveInventory("PentagramOfProtection",1); //Fuck it, why not. :P
			}
			return true;
		}
		Stop;
	}
}

//==============================================================================
// Weapon Upgrades
//==============================================================================

Class PistolUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 1;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"PistolUpgradeAutomatic",	
				"PistolUpgradeAltDamage",	
				"PistolUpgradeAltCharge",	
				"PistolUpgradeDamage",
				"PistolUpgradeLance"	};
			
			static const String itemstr[] =
			{	"$PistolUpgradeAutomatic",	
				"$PistolUpgradeAltDamage",	
				"$PistolUpgradeAltCharge",	
				"$PistolUpgradeDamage",
				"$PistolUpgradeLance"	};
			
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					if (itemnames[i] == "PistolUpgradeLance" && 
						(!CountInv("PistolUpgradeAltDamage") || !CountInv("PistolUpgradeAltCharge")))
						continue;
						
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			
			invoker.index--;
			uint rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			return true;
		}
		Stop;
	}
}

Class ShotgunUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 2;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"ShotgunMod1",	"ShotgunMod2"	};
			
			static const String itemstr[] =
			{	"$ShotgunMod1",	"$ShotgunMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
				count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			return true;
		}
		Stop;
	}
}

Class SuperShotgunUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 3;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"SSGUpgrade1",	"SSGUpgrade2",	"SSGUpgrade3",	"SSGUpgrade4"	};
			
			static const String itemstr[] =
			{	"$SSGUpgrade1",	"$SSGUpgrade2",	"$SSGUpgrade3",	"$SSGUpgrade4"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					if (itemnames[i] == "SSGUpgrade4" &&
						(!CountInv("SSGUpgrade1") || !CountInv("SSGUpgrade2")))
						continue;
					
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}	
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class StaticRifleUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 10;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			// This one's entirely linear enough, so don't bother with randomizing.
			if (!CountInv("StaticUpgrade1"))
			{
				A_GiveInventory("StaticUpgrade1");
				A_PrintBold("$StaticUpgrade1");
			}
			else if (!CountInv("StaticUpgrade2"))
			{
				A_GiveInventory("StaticUpgrade2");
				A_PrintBold("$StaticUpgrade2");
			}
			else if (!CountInv("StaticUpgrade3"))
			{
				A_GiveInventory("StaticUpgrade3");
				A_PrintBold("$StaticUpgrade3");
			}
			else if (!CountInv("StaticUpgrade4"))
			{
				A_GiveInventory("StaticUpgrade4");
				A_PrintBold("$StaticUpgrade4");
			}
			
			return true;
		}
		Stop;
	}
}

Class RepeaterUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 11;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{ "RepeaterUpgradePiercing", "RepeaterUpgradeDamage", "RepeaterUpgradeAltDamage", "RepeaterUpgradeAltAmmo" };
			
			static const String itemstr[] =
			{ "$RepeaterUpgradePiercing", "$RepeaterUpgradeDamage", "$RepeaterUpgradeAltDamage", "$RepeaterUpgradeAltAmmo" };
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class AssaultRifleUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 4;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"AssaultRifleMod1",		"AssaultRifleMod2"	};
			
			static const String itemstr[] =
			{	"$AssaultRifleMod1",	"$AssaultRifleMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class ChaingunUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 5;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"ChaingunMod1",		"ChaingunMod2"	};
			
			static const String itemstr[] =
			{	"$ChaingunMod1",	"$ChaingunMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class RocketLauncherUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 6;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"RocketLauncherMod1",	"RocketLauncherMod2"	};
			
			static const String itemstr[] =
			{	"$RocketLauncherMod1",	"$RocketLauncherMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class PlasmaRifleUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 7;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"PlasmaRifleMod1",	"PlasmaRifleMod2"	};
			
			static const String itemstr[] =
			{	"$PlasmaRifleMod1",	"$PlasmaRifleMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class LightningGunUpgradePickup : D4UpgradePickup
{	
	Default
	{
		D4UpgradePickup.Frame 13;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{ "LGUpgradeAmmo", "LGUpgradeRange", "LGUpgradeDamage", "LGUpgradeAltFire" };
			
			static const String itemstr[] =
			{ "$LGUpgradeAmmo", "$LGUpgradeRange", "$LGUpgradeDamage", "$LGUpgradeAltFire" };
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class VortexRifleUpgradePickup : D4UpgradePickup
{	
	Default
	{
		D4UpgradePickup.Frame 12;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{ "VortexUpgradeDamage", "VortexUpgradeAmmo", "VortexUpgradeAltSpeed", "VortexUpgradeAltPierce" };
			
			static const String itemstr[] =
			{ "$VortexUpgradeDamage", "$VortexUpgradeAmmo", "$VortexUpgradeAltSpeed", "$VortexUpgradeAltPierce" };
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class GaussCannonUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 9;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{	"GaussCannonMod1",	"GaussCannonMod2"	};
			
			static const String itemstr[] =
			{	"$GaussCannonMod1",	"$GaussCannonMod2"	};
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
				count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class BFGUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 8;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{ "BFGUpgrade1", "BFGUpgrade2", "BFGUpgrade3", "BFGUpgrade4" };
			
			static const String itemstr[] =
			{ "$BFGUpgrade1", "$BFGUpgrade2", "$BFGUpgrade3", "$BFGUpgrade4" };
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

Class CarrionCannonUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 14;
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			static const Class<Inventory> itemnames[] =
			{ "CarrionUpgradePickup", "CarrionUpgradeAmmo", "CarrionUpgradeStun", "CarrionUpgradeTime" };
			
			static const String itemstr[] =
			{ "$CarrionUpgradePickup", "$CarrionUpgradeAmmo", "$CarrionUpgradeStun", "$CarrionUpgradeTime" };
			int count = 0;
			for (int i = 0; i < itemnames.Size(); i++)
			{
				if (itemnames[i] && !CountInv(itemnames[i]))
				{
					invoker.desc[invoker.index] = itemstr[i];
					invoker.items[invoker.index] = itemnames[i];
					invoker.index++;
					count++;
				}
			}
			
			if (count < 1)
				return true;
			invoker.index--;
			int rng = random(0,invoker.index);
			
			if (invoker.items[rng])
			{
				A_PrintBold(invoker.desc[rng]);
				A_GiveInventory(invoker.items[rng]);
			}
			
			return true;
		}
		Stop;
	}
}

/*
//Chainsaw
M668A = "M668A" {Spin=50}
M669A = "M669A" {Spin=50}
WPPKA = "WPPKA" {Spin=50}

//Pistol
M668B = "M668B" {Spin=50}
M669B = "M669B" {Spin=50}
WPPKB = "WPPKB" {Spin=50}

//Shotgun
M668C = "M668C" {Spin=50}
M669C = "M669C" {Spin=50}
WPPKC = "WPPKC" {Spin=50}

//Super Shotgun
M668D = "M668D" {Spin=50}
M669D = "M669D" {Spin=50}
WPPKD = "WPPKD" {Spin=50}

//Heavy Assault Rifle
M668E = "M668E" {Spin=50}
M669E = "M669E" {Spin=50}
WPPKE = "WPPKE" {Spin=50}

//Chaingun
M668F = "M668F" {Spin=50}
M669F = "M669F" {Spin=50}
WPPKF = "WPPKF" {Spin=50}

//Rocket Launcher
M668G = "M668G" {Spin=50}
M669G = "M669G" {Spin=50}
WPPKG = "WPPKG" {Spin=50}

//Plasma Rifle
M668H = "M668H" {Spin=50}
M669H = "M669H" {Spin=50}
WPPKH = "WPPKH" {Spin=50}

//BFG 9000
M668I = "M668I" {Spin=50}
M669I = "M669I" {Spin=50}
WPPKI = "WPPKI" {Spin=50}

//Gauss Cannon
M668J = "M668J" {Spin=50}
M669J = "M669J" {Spin=50}
WPPKJ = "WPPKJ" {Spin=50}

//Static rifle
M668K = "Voxels/staticNOTSELECTED.kvx" {scale=0.7 Spin=50}
M669K = "Voxels/staticSELECTED.kvx" {scale=0.7 Spin=50}
WPPKK = "WPPKK" {Spin=50}

//Repeater
M668L = "Voxels/repeaterNOTSELECTED.kvx" {scale=0.85 Spin=50}
M669L = "Voxels/repeaterSELECTED.kvx" {scale=0.85 Spin=50}
WPPKL = "Voxels/PickupRepeater.kvx" {Spin=50}

//Vortex Rifle
M668M = "Voxels/vortexNOTSELECTED.kvx" {scale=0.7 Spin=50}
M669M = "Voxels/vortexSELECTED.kvx" {scale=0.7 Spin=50}
WPPKM = "Voxels/PickupVortex.kvx" {Spin=50}

//Lightning Gun 
M668N = "Voxels/lgunNOTSELECTED.kvx" {scale=0.7 Spin=50}
M669N = "Voxels/lgunSELECTED.kvx" {scale=0.7 Spin=50}
WPPKN = "WPPKN" {Spin=50}

//Carrion Cannon
M668O = "Voxels/hellNOTSELECTED.kvx" {scale=0.7 Spin=50}
M669O = "Voxels/hellSELECTED.kvx" {scale=0.7 Spin=50}
WPPKO = "Voxels/PickupHellshot.kvx" {scale=0.7 Spin=50}
*/