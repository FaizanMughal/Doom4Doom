//==============================================================================
//
// D4D Loot Definitions
//
// The base class for defining crates/cash/upgrade drops.
// 
//==============================================================================

Class D4LootContainer play
{
	private Array<D4LootDef> Defs;
	
	// Start-up functions.
	static D4LootContainer Create()
	{
		let con = new('D4LootContainer').Init();
		return con;
	}
	
	protected D4LootContainer Init()
	{
		Defs.Clear();
		return self;
	}
	
	void SetEntry(String cls, 
		uint CrateDropChance, uint CrateDropAmount, uint CrateDropAlways,
		uint CashAmount, uint CashChainsawPinata,
		uint UpgradeDropChance, uint UpgradeDropAlways,
		uint RunePowerMin = 0, uint RunePowerMax = 7)
	{
		Class<Actor> ClassName = cls;
		if (!ClassName)	return;
		
		if (RunePowerMin > RunePowerMax)
		{
			uint temp = RunePowerMax;
			RunePowerMax = RunePowerMin;
			RunePowerMin = temp;
		}
		
		RunePowerMin = Clamp(RunePowerMin, 0, 7);
		RunePowerMax = Clamp(RunePowerMax, 0, 7);
		
		D4LootDef def;
		for (int i = 0; i < Defs.Size(); i++)
		{
			def = D4LootDef(Defs[i]);
			if (def && def.ClassName == ClassName)
			{
				return;
			}
			def = null;
		}
		
		if (!def)
		{
			def = D4LootDef.Create(ClassName, CrateDropChance, CrateDropAmount, CrateDropAlways,
				CashAmount, CashChainsawPinata, UpgradeDropChance, UpgradeDropAlways,
				RunePowerMin, RunePowerMax);
			Defs.Push(def);
		}
	}
	
	D4LootDef FindEntry(String cls)
	{
		for (int i = 0; i < Defs.Size(); i++)
		{
			let def = D4LootDef(Defs[i]);
			if (!def)
			{
				Defs.Delete(i);	i--;
				continue;
			}
			Class<Actor> check = cls;
			if (def && def.ClassName == check)
			return def;
			
		}
		return null;
	}
	
	bool DeleteEntry(String cls)
	{
		Class<Actor> ClassName = cls;
		for (int i = 0; i < Defs.Size(); i++)
		{
			if (!Defs[i])
			{
				Defs.Delete(i);	i--;
				continue;
			}
			if (Defs[i] && Defs[i].ClassName == ClassName)
			{
				Defs[i].Destroy();
				Defs.Delete(i);
				return true;
			}
		}
		return false;
	}
}

Class D4LootDef play
{
	const DONT_USE = 0;
	Class<Actor> 	ClassName;
	uint			CrateDropChance, CrateDropAmount, CrateDropAlways,
					CashAmount, CashChainsawPinata,
					UpgradeDropChance, UpgradeDropAlways,
					RunePowerMin, RunePowerMax;
	
	
	protected D4LootDef Init()
	{
		ClassName = 			null;
		CrateDropChance = 	-1;
		CrateDropAmount =		0;
		CrateDropAlways =		0;
		CashAmount = 			-1;
		CashChainsawPinata = 	-1;
		UpgradeDropChance = 	-1;
		UpgradeDropAlways = 	0;
		RunePowerMin =		0;
		RunePowerMax =		7;
		return self;
	}
		
	static D4LootDef Create( Class<Actor> ClassName, 
		uint CrateDropChance, uint CrateDropAmount, uint CrateDropAlways,
		uint CashAmount, uint CashChainsawPinata,
		uint UpgradeDropChance, uint UpgradeDropAlways,
		uint RunePowerMin, uint RunePowerMax)
	{
		if (!ClassName)	return null;
		
		let loot = new('D4LootDef').Init();
		loot.ClassName = ClassName;
		loot.CrateDropChance = CrateDropChance;
		loot.CrateDropAmount = CrateDropAmount;
		loot.CrateDropAlways = CrateDropAlways;
		loot.CashAmount = CashAmount;
		loot.CashChainsawPinata = CashChainsawPinata;
		loot.UpgradeDropChance = UpgradeDropChance;
		loot.UpgradeDropAlways = UpgradeDropAlways;
		loot.RunePowerMin = RunePowerMin;
		loot.RunePowerMax = RunePowerMax;
		return loot;
	}
	
	void SetCrateDrops(uint CrateDropChance, uint CrateDropAmount, uint CrateDropAlways)
	{
		if (CrateDropChance >= 0)	self.CrateDropChance = CrateDropChance;
		if (CrateDropAmount >= 0)	self.CrateDropAmount = CrateDropAmount;
		if (CrateDropAlways >= 0)	self.CrateDropAlways = CrateDropAlways;
	}
	
	void SetCashDrops(uint CashAmount, uint CashChainsawPinata)
	{
		if (CashAmount >= 0)		self.CashAmount = 			CashAmount;
		if (CashChainsawPinata)		self.CashChainsawPinata = 	CashChainsawPinata;
	}
	
	void SetUpgradeDrops(uint UpgradeDropChance, uint UpgradeDropAlways)
	{
		if (UpgradeDropChance)		self.UpgradeDropChance = UpgradeDropChance;
		if (UpgradeDropAlways)		self.UpgradeDropAlways = UpgradeDropAlways;
	}
	
	void SetRunePowers(uint RunePowerMin, uint RunePowerMax)
	{
		if (RunePowerMin > RunePowerMax)
		{
			int temp = RunePowerMin;
			RunePowerMin = RunePowerMax;
			RunePowerMax = temp;
		}
		//MaxRunePower is defined in Constants.txt
		self.RunePowerMin = Clamp(RunePowerMin, 0, MaxRunePower);
		self.RunePowerMax = Clamp(RunePowerMax, 0, MaxRunePower);
	}
	
	// The parameters are merely there to remind me of the order.
	uint, uint, uint GetCrateDrops(int Chance = DONT_USE, int Amount = DONT_USE, int Always = DONT_USE)
	{	return CrateDropChance, CrateDropAmount, CrateDropAlways;	}
	
	uint, uint GetCashDrops(int Amount = DONT_USE, int ChainsawPinata = DONT_USE)
	{	return CashAmount, CashChainsawPinata;	}
	
	uint, uint GetUpgradeDrops(int Chance = DONT_USE, int Always = DONT_USE)
	{	return UpgradeDropChance, UpgradeDropAlways;	}
	
	uint, uint GetRunePowerThreshold(int Minimum = DONT_USE, int Maximum = DONT_USE)
	{	return RunePowerMin, RunePowerMax;	}
	
}

extend class D4DHandler
{	
	MCHandler MC;

	Class<Actor> GetRune(Actor mon)
	{
		if (!mon || D4D_DemonRunes < 1)	return null;
		
		Class<Actor> check = Actor.GetReplacee(mon.GetClass());
		
		if (D4D_PrintDebug == 1)
		{
			if (check)	Console.Printf("%s replaces %s", mon.GetClassName(), check.GetClassName());
			else		Console.Printf("%s replaces nothing", mon.GetClassName());
		}
		int rarity = D4D_DemonRunes;
		int upgrade = mon.CountInv("D4MonsterUpgrader");
		int id = 0;
		
		static const Class<Actor> Replaced[] =
		{
			'HellKnight',			// Must come first because it inherits from the Baron.
			'BaronOfHell',			
			'Revenant',				
			'Cacodemon',			
			'Fatso',				
			'PainElemental',		
			'Cyberdemon',			
			'SpiderMastermind',		
			'Arachnotron',			
			'Archvile'				
		};
		
		static const Class<Actor> Runes[] =
		{
			'KnightRune',
			'BaronRune',
			'RevenantRune',
			'CacodemonRune',
			'FatsoRune',
			'PainElementalRune',
			'CyberdemonRune',
			'MastermindRune',
			'ArachnotronRune',
			'ArchvileRune'
		};
		
		static const int RuneDropChances[] =
		{
			RuneChance_Knight,
			RuneChance_Baron,
			RuneChance_Rev,
			RuneChance_Caco,
			RuneChance_Fatso,
			RuneChance_PainEl,
			RuneChance_Cyber,
			RuneChance_Master,
			RuneChance_Arach,
			RuneChance_Archie
		};
		
		Class<Actor> rep = null;
		int i = 0;
		for (i = 0; i < Replaced.Size(); i++)
		{
			if (check is Replaced[i] || mon is Replaced[i])
			{
				check = Replaced[i];
				rep = Runes[i];
				id = RuneDropChances[i];
				break;
			}
		}
		// No rune found.
		if (rep == null)
			return null;
		
		// Black and white monsters always drop demon runes.
		if (upgrade >= 6)	
			return rep;
			
		int originalID = id;
		id = Max(1, id - (upgrade * 2));
		
		// Give spider masterminds and cyberdemons special treatments since they
		// are the biggest monsters.
		if (check is "SpiderMastermind" || check is "Cyberdemon")
		{
			// Only check for live ones.
			if (!MC)	MC = MCHandler.Fetch();
			int howmany = 1;
			int size = MC.Monsters.Size();
			for (int i = 0; i < size; i++)
			{
				Actor mo = MC.Monsters.Actors[i];
				if (mo && check && mo.health > 0 && (mo is check || mo.GetReplacee(mo.GetClass())) 
					&& mo.CountInv("D4MonsterUpgrader") == upgrade)
				{
					if (howmany++ >= originalID)
						break;
				}
			}
			return (random(1, Max(1, howmany / rarity)) == 1) ? rep : null;
		}
		else if (rarity == 2)		// Common
		{
			return (random(1, (id / 2)) == 1) ? rep : null;
		}
		else if (rarity == 1) 	// Rare
		{
			return (random(1, id) == 1) ? rep : null;
		}
		return null;
	}
}