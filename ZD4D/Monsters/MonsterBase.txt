//===================================================================================
//===================================================================================
//
//	Chance to spawn demon rune
//  This value is "x". Formula to spawn any rune is 
//   "if(random(1,X) == 1)" 
//===================================================================================
//===================================================================================
enum RuneChances
{
	RuneChance_Knight = 18,
	RuneChance_Baron = 15,
	RuneChance_Rev = 18,
	RuneChance_Caco = 18,
	RuneChance_Fatso = 15,
	RuneChance_PainEl = 12,
	RuneChance_Cyber = 6,
	RuneChance_Master = 3,
	RuneChance_Arach = 15,
	RuneChance_Archie = 10,
}

Class D4AbstractMonster : Actor 
{

	Class<DemonRuneBase> RuneItem;
	int RuneDropChance;
	D4DHandler Event;
	int PrevWoundHealth;
	int UpgradeDropChance, UpgradeDropAlways;
	uint CrateDropChance, CrateDropAmount, CrateDropAlways;
	uint CashAmount, CashChainsawPinata;
	int CashMultiplier;
	Name MOD;
	Actor Spawner;
	Color BC;
	bool HQ;
	transient CVar HighQuality, EnhancedChase, ExecuteCheck, StaggerCheck;
	
	Property Rune: RuneItem, RuneDropChance;
	property BC: BC;
	property UpgradeDropChance: UpgradeDropChance;
	property UpgradeDropAlways: UpgradeDropAlways;
	property CrateDropChance: CrateDropChance;
	property CrateDropAmount: CrateDropAmount;
	property CrateDropAlways: CrateDropAlways;
	property CashAmount: CashAmount;
	property CashChainsawFinisher: CashChainsawPinata;
	Default
	{
		D4AbstractMonster.UpgradeDropChance -1;
		D4AbstractMonster.UpgradeDropAlways 0;
		D4AbstractMonster.CrateDropAmount 0;
		D4AbstractMonster.CrateDropChance 0;
		D4AbstractMonster.CrateDropAlways 0;
		D4AbstractMonster.CashAmount -1;
		D4AbstractMonster.CashChainsawFinisher -1;
		D4AbstractMonster.BC "Red";
		BloodColor "Red";
		DamageFactor "Crush", 15.0;
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		PrevWoundHealth = WoundHealth;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		ExecuteCheck = Cvar.FindCvar("D4D_ExecutionsON");
		StaggerCheck = Cvar.FindCvar("D4D_MonsterStagger");
		oldLeap = false;
	}
		
	bool CheckEffects()
	{
		if (!HighQuality)	HighQuality = CVar.FindCvar("HQEffects");
		return (HighQuality && HighQuality.GetBool());
	}
	
	bool CheckStagger()
	{
		if (!ExecuteCheck)	ExecuteCheck = Cvar.FindCvar("D4D_ExecutionsON");
		if (!ExecuteCheck || !ExecuteCheck.GetBool())	return false;
		
		if (!StaggerCheck)	StaggerCheck = Cvar.FindCvar("D4D_MonsterStagger");
		if (!StaggerCheck || !StaggerCheck.GetBool())	return false;
		return true;
	}
	
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (CheckStagger())
			WoundHealth = PrevWoundHealth;
		else
		{
			PrevWoundHealth = WoundHealth;
			WoundHealth = -1;
		}
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	// Don't let removing scripts leave gaps.
	
	override void OnDestroy()
	{
		if (health > 1)
		{
			if (Spawner && Spawner.health > 0)
			{
				Spawner.bVULNERABLE = true;
				Spawner.A_Die();
			}
		}
		Super.OnDestroy();
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		SpawnRune();
		bTHRUACTORS = true;
		if (Spawner && Spawner.health > 0)
		{
			Spawner.bVULNERABLE = true;
			Spawner.A_Die();
		}
		else if (master && (master is "D4DMonsterSpawner" || master is master.GetReplacee("D4DMonsterSpawner")))
		{
			master.bVULNERABLE = true;
			master.A_Die();
		}
		Super.Die(source, inflictor, dmgflags);
		
		if (DamageTypeReceived == 'Crush')
		{
			let next = FindState("XDeath", true);
			if (next)	SetState(next);
		}
	}
	
	void SpawnRune()
	{
		if (!RuneItem || RuneDropChance < 1)
			return;
			
		if (RuneChance(RuneDropChance))
		{
			let Rune = DemonRuneBase(Spawn(RuneItem, pos, ALLOW_REPLACE));
			Class<Inventory> Token = "D4MonsterUpgrader";
			int Count = CountInv(Token);
			if (Rune && Token && Count > 0)
			{
				Rune.A_SetInventory(Token, Count, beyondMax: true);
				Rune.Translation = Translation;
			}
		}
	}
	
	//--------------------------------------------------------------------------
	//
	// D4Chase(melee, missile, flags, max turn)
	//
	// A_Chase enhanced, + new parameter: Max turn.
	// Specifies how much in degrees the monster should turn towards its target.
	// -1 will not turn it.
	//--------------------------------------------------------------------------
	void D4Chase(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0, double maxturn = 30.0)
	{
		int newflags = 0;
		
		if (!EnhancedChase)
		{
			EnhancedChase = Cvar.FindCvar("D4D_EnhancedChase");
		}
		
		if (EnhancedChase && EnhancedChase.GetBool())
		{
			// Get a target if invalid.
			
			if (!Target || Target.bKilled)
			{
				A_Chase(null,null,CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NORANDOMTURN|CHF_NOPOSTATTACKTURN);
			}
			
			if (Target && Target.Health > 0 && CheckSight(Target,SF_IGNOREVISIBILITY)) // Use regular A_Chase if cannot see.
			{
				bool good = false;
				double ang = angle;
				A_Face(Target, Max(0.01, maxturn), 0, flags: FAF_MIDDLE);
				if (Target)
				{
					if (bFLOAT)
					{	
						
						double c = cos(Pitch) * Speed;
						double s = -sin(Pitch) * Speed;
						Vector3 old = pos;
						Vector2 new = Vec2Angle(c, angle);
						
						SetZ(pos.z + s);
						if (TryMove(new, bDROPOFF))
							good = true;
						else SetXYZ(old);
						
					}
					else
					{
						Vector2 nmpos = Vec2Angle(speed,angle);
						if (TryMove(nmpos, bDROPOFF))
							good = true;
					}
					
					// Move was good. Do the chase but without actualy moving. 
					if (good)
					{
						newflags = CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NOPOSTATTACKTURN;
						if (maxturn <= 0.0)
							angle = ang;
					}	
					else
						angle = ang;
				}
			}
		}
		A_Chase(melee, missile, flags|newflags);
	}
	
	//==========================================================================
	//
	// RuneChance(id)
	//
	// Determines the chance of a rune dropping.
	//==========================================================================
	
	int RuneChance(int id)
	{
		int rarity = int(GetCvar("D4D_DemonRunes"));
		
		if (!rarity)	return 0;
		
		int upgrade = CountInv("D4MonsterUpgrader");
		
		// Black and white monsters always drop demon runes.
		if (upgrade >= 6)
			return 1;
			
		id = Max(1, id - upgrade);
		// Spider masterminds are the rarest of enemies. Give them special 
		// treatment so players can enjoy playing the hell out of them.
		if (CheckClass("D4SpiderMastermind") || CheckClass("D4OldSpiderMastermind"))
		{
			// Only check for live ones.
			int howmany = Max(1,CountProximity("D4SpiderMastermind",32767) + CountProximity("D4OldSpiderMastermind",32767) + 1);
			howmany -= upgrade;
			howmany = Clamp(howmany,1,RuneChance_Master);
			if (rarity == 2)
			{
				return (random(1,howmany) == 1) ? 1 : 0;
			}
			else if (rarity == 1)
			{
				return (random(1,howmany * 2) == 1) ? 1 : 0;
			}
		}
		else if (CheckClass("D4Cyberdemon") || CheckClass("D4OldCyberdemon"))
		{
			int howmany = Max(1,CountProximity("D4Cyberdemon",32767) + CountProximity("D4OldCyberdemon",32767) + 1);
			howmany -= upgrade;
			howmany = Clamp(howmany,1,RuneChance_Cyber);
			if (rarity == 2)
			{
				return (random(1,(howmany / 2)) == 1) ? 1 : 0;
			}
			else if (rarity == 1)
			{
				return (random(1,howmany) == 1) ? 1 : 0;
			}
		}
		else if (rarity == 2)		// Common
		{
			return (random(1, (id / 2)) == 1) ? 1 : 0;
		}
		else if (rarity == 1) 	// Rare
		{
			return (random(1, id) == 1) ? 1 : 0;
		}
		return 0;
	}
	
	//==========================================================================
	//
	// XDeathGush(int bcolor)
	//
	// Splatters the enemy. Accept 0, Color_Green, Color_Blue or Color_Black
	// for blood colors on the gib dropper.
	//==========================================================================
	
	void XDeathGush(int bcolor = 0)
	{
		MOD = DamagetypeReceived;
		if ((MOD != 'Massacre'))
		{
			//int sflag = (CountInv("D4MonsterUpgrader")) ? SXF_TRANSFERTRANSLATION : SXF_USEBLOODCOLOR;
			let gibs = BloodGibDropper(Spawn("BloodGibDropper", pos));
			//[t, gibspawner] = A_SpawnItemEx("BloodGibDropper",0,0,0,vel.x,vel.y,vel.z,0,
			//	SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_SETTRACER|SXF_ORIGINATOR);//,0,bcolor);
			
			if (gibs)
			{
				gibs.tracer = self;
				gibs.vel = vel;
				int tier = CountInv("D4MonsterUpgrader");
				int toSend = (tier) ? Translation : BloodTranslation;
				gibs.BC = BC;
				gibs.Translation = ((tier) ? Translation : BloodTranslation);
			}
			
			A_XScream();
			A_PlaySound("Doom4/Other/GibExplode",CHAN_AUTO);
		}
	}
	
	//==========================================================================
	// Leaping
	//==========================================================================
	enum EJumpFlags
	{
		JF_FORWARD = (1<<0),
		JF_UP = (1<<1),
		
		JF_ALL = JF_FORWARD|JF_UP
	}
	
	// Thanks go out to Gutawer for this wonderful function.
	// Modified by Major Cooke.
	double, bool GutaLeap(Actor who, double _speed = 40.0, double _grav = 1.0, bool restorePitchAngle = false)
	{
		double firePitch = 0.0;
		bool good = false;
		if (who)
		{
			double _p = pitch;
			double _a = angle;
			A_Face(who,0,0,0,0,FAF_TOP);
			
			double v = _speed;
			double g = _grav;
			
			Vector3 vecto = vec3To(who);
			Vector2 lvec = (vecto.xy.length(), vecto.z + 16);

			double discriminant = (v ** 4) - g * (g * lvec.x * lvec.x + 2 * lvec.y * v * v);
			if (discriminant >= 0) 
			{
				// we can hit the target at this range, so finish the calculation
				double newPitch0 = atan2(v * v + sqrt(discriminant), g * lvec.x);
				double newPitch1 = atan2(v * v - sqrt(discriminant), g * lvec.x);
				firePitch = (min(newPitch0, newPitch1));
				// Can leap.
				good = true;
				
			}
			else 
			{
				// we can't hit, so aim at the maximum possible distance instead
				lvec.x = sqrt(((v ** 4) / g - 2 * lvec.y * v * v) / g);
				double discriminant = v ** 4 - g * (g * lvec.x * lvec.x + 2 * lvec.y * v * v);
				double newPitch0 = atan2(v * v + sqrt(discriminant), g * lvec.x);
				double newPitch1 = atan2(v * v - sqrt(discriminant), g * lvec.x);
				// Not a good leap but it at least tells us what it was we left off at.
				firePitch = (min(newPitch0, newPitch1));
			}
			if (restorePitchAngle)
			{
				pitch = _p;
				angle = _a;
			}
		}
		return firePitch, good;
	}

	int oldLeap;
	double leapDistance;

	
	
	double GetGroundHeight()
	{
		double _floorz = GetZAt();
		bool ok; Actor pOnmobj;
		[ok, pOnmobj] = TestMobjZ(true);
		if (!pOnmobj) return _floorz;
		double _actorz = pOnmobj.pos.z+pOnmobj.height;
		return max(_floorz, _actorz);
	}
	
	// [MC] Do not call subfunctions. Graf has made it specifically clear they're
	// quite speed hindering.
	bool CheckOnGround()
	{
		bool ok; Actor pOnmobj;
		
		if (vel.z != 0)	return false;	// Remember, moving up and down lifts is not velocity.
		double _floorz = GetZAt();
		
		[ok, pOnmobj] = TestMobjZ(true);
		if (pOnmobj) return true;
		double _actorz = pOnmobj.pos.z + pOnmobj.height;
		double GroundHeight = max(_floorz, _actorz);
		return (abs(GroundHeight - pos.z) < 1);
	}
	/*
	void A_Leap(StateLabel EndState = "See")
	{
		// if grounded, go to see.
		if (CheckOnGround())
		{
			if (!oldLeap)
			{
				A_FaceTarget();
				double vertical = 12;
				if (target.pos.z-pos.z > 64 && ceilingz-pos.z > 128) vertical = 18;
				double horizontalMult = leapDistance / 480;
				double horizontal = 1;
				for (int i = 0; i < 4; i++) horizontal *= horizontalMult; // pow is not defined
				vector3 newdir = (cos(angle)*horizontal, sin(angle)*horizontal, vertical);
				vel += newdir;
				oldLeap = frame;
			}
			else
			{
				State next = ResolveState(EndState);
				if (!next)
					next = ResolveState("See");
				if (next)
					SetState(next);
				return;
			}
		}
		else if (vel.z > 0)
		{
			vector3 newdir = (cos(angle)*2, sin(angle)*2, 0);
			vel += newdir;
			//frame = oldLeap+1;
		}
		//else if (vel.z < 0)	frame = oldLeap+2;
		
	}
	
	virtual double GetJumpDistance()
	{
		double dst = 480;
		if (ceilingz-pos.z > 128) dst *= 2;
		return dst;
	}

	bool CheckPitBeforeTarget(in out double dst)
	{
		if (!target || !CheckSight(target)) return false;
		
		int step = int(Max(1,radius/2));
		vector3 CheckDirection = (target.pos-pos).Unit()*step;
		
		// Get the jump distance.
		//dst = 480;
		if (ceilingz-pos.z > 128) dst *= 2;
		
		int steps = min(Distance2D(target), dst)/step;
		double curz = pos.z;
		SetOrigin((pos.x, pos.y, pos.z+64), false);
		for (int i = 0; i < steps; i++)
		{
			double zat = GetZAt(pos.x + CheckDirection.x * i, pos.y + CheckDirection.y * i, 0, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG);
			//A_LogFloat(zat);
			if (curz - zat > MaxStepHeight * 2 || zat - curz > MaxStepHeight)
			{
				SetOrigin((pos.x, pos.y, curz), false);
				return true;
			}
		}
		
		SetOrigin((pos.x, pos.y, curz), false);
		return false;
	}

	bool TryLeap(StateLabel leapstate = null, int flags = 0)
	{
		if (!target) return false;
		
		double BaseDistance = 480;
		double PassDistance = BaseDistance;
		
		if (CheckOnGround() && // if we are standing
			// !random(0, 16) && // and we don't do this all the time
			(((flags & JF_UP) && (abs(target.pos.z-pos.z) > Default.MaxStepHeight)) || // and target has more height difference than maxstepheight
			 ((flags & JF_FORWARD) && CheckPitBeforeTarget(PassDistance)))) // and there's a deep pit in front of us
		{
			if (Distance2D(target) < PassDistance) // and target is within max jump radius
			{
				oldLeap = 0;
				leapDistance = Distance2D(target);
				
				// A leapstate is not required -- one can use it for simple checking.
				if (leapstate)
				{
					State next = FindState(leapstate, true);
					if (next)	SetState(next);
				}
				return true;
			}
		}
		
		return false;
	}
	*/
}


Class D4AbstractBiggie : D4AbstractMonster {}
Class D4AbstractBoss : D4AbstractBiggie 
{
	Default
	{
		DamageFactor "BFGBlast", 0.0;
	}
}


Class PainSoundToken : Inventory
{}

// debug actor
Class DecoTest : Actor
{
	Default
	{
		+NOINTERACTION
		Scale 2.0;
		alpha 0.4;
	}
	
	States
	{
	Spawn:
		TROO A 2 Bright;
		Stop;
	}
}



//==================================================================================================
//	Wound health values, just for reference
// 
// MONSTER NAME       HEALTH    WOUND    |     HEALTH-D4D   WOUND-D4D    |  HEAL TO
// Zombieman            20       10      |        20          10         |     15          
// ShotgunGuy           30       10      |        30          10         |     15   
// ChaingunGuy          70       30      |        70          30         |     40   
// DoomImp              60       25      |        60          25         |     30    
// Demon/spectre       150       50      |       150          50         |     60   
// LostSoul            N/A      N/A      |       N/A         N/A         |    N/A   
// Cacodemon           300       80      |       400          80         |    100          
// PainElemental       400      100      |       400         100         |    101
// Revenant            300       80      |       400          80         |    100
// HellKnight          500      100      |       500         100         |    130
// BaronOfHell        1000      150      |      1000         150         |    180
// Fatso               600      110      |       800         120         |    130
// Arachnotron         500      100      |       500         100         |    130	
// Archvile            700      120      |      1000         150         |    130 - 180
// Cyberdemon         4000      150      |      4000         150         |    201
// SpiderMastermind   3000      150      |      3000         150         |    201
//
//==================================================================================================

//===================================================================================
//	Base actor from which they inherit
//===================================================================================
Class HighlightBase : Actor
{
	int MainCounter;
	int woundvalue;
	int RecoverToAmount;
	int StgrPainCounter;
	Default
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 1.1;
		Translation "0:255=%[0.2,0.2,0.2]:[1.5,0.75,0.0]";
		Alpha 0.4;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			RecoverToAmount=15;
		}
		Goto Looper;
	Looper:
		TNT1 A 1 Bright //by default, is invisible
		{
			if(MainCounter>=(GetCvar("D4D_StaggerLenght")*35) )
			{
				A_SetHealth(RecoverToAmount,MasterPtr);	//heals the Monster;
				A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER); // removes the finisher token
				return ResolveState("Null");	//and this actor dies
			}
			else
			{
				if(GetCvar("D4D_ExecutionHighlight")==1/* && GetCvar("vid_renderer")==0*/)	//if the highlight is ON and in software mode
				{	A_CopySpriteFrame(MasterPtr,0);	}	//copies the sprite
				
				if(StgrPainCounter==35 || MainCounter==0) //if the stagger just started or one second has passed
				{ 
					A_GiveInventory("PainSoundToken",1,MasterPtr);  //makes the parent actor play pain sound
					StgrPainCounter=0;
				}
					
				//Checks if it can warp (and warps) and ensures the master is alive	
				if (A_Warp(MasterPtr,  1  ,0,0,0,WARPF_NOCHECKPOSITION,"Null") && !A_JumpIfHealthLower(1,"Null",MasterPtr)) 
				{
					//nothing happens here, really
					//A_SpawnItemEx("DecoTest",0,0,0,0,0,0,0,32);	//debug
				}
				else	//it couldnt warp or the master is dead
				{
					//A_PrintBold("taking the item away"); //debug
					A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER);	//removes the finisher token
					return ResolveState("Null");	//this actor dies, because is no longer needed
				}
					
				MainCounter++;	//increases the main counter
				StgrPainCounter++; //increases the 1 second counter for pain sounds
				return ResolveState(null);
			}
		}
		Loop;
	}
}


//===================================================================================
//	Zombieman & ShotgunGuy
//===================================================================================
Class ZombieHighlight : HighlightBase
{
	Default
	{	
		Scale 1.05;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	
				RecoverToAmount=15; //to how much will it heal after stagger times out
			}
			Goto Looper;
	}
}


//===================================================================================
//	ChaingunGuy
//===================================================================================
Class ChaingunnerHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=40;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Imp
//===================================================================================
Class ImpHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=30;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Demon & spectre
//===================================================================================
Class DemonHighlight : HighlightBase
{
	Default
	{	
		Scale 0.765;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=60;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldDemonHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=60;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Cacodemon
//===================================================================================
Class CacoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=100;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
//===================================================================================
//	Pain Elemental
//===================================================================================
Class D4DPainElementalHighlight : HighlightBase
{
	Default
	{	
		Scale 1.22;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=101;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldPainElementalHighlight : D4DPainElementalHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Revenant
//===================================================================================
Class D4DRevenantHighlight : HighlightBase
{
	Default
	{	
		Scale 0.95;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=100;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldRevenantHighlight : D4DRevenantHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Hell knight
//===================================================================================
Class D4DHellKnightHighlight : HighlightBase
{
	Default
	{	
		Scale 0.69;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldHellKnightHighlight : D4DHellKnightHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Baron Of Hell
//===================================================================================
Class D4DBaronHighlight : HighlightBase
{
	Default
	{	
		Scale 0.77;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class BaronHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
//===================================================================================
//	Both Fatso variations
//===================================================================================
Class D4DFatsoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.2;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldFatsoHighlight : D4DFatsoHighlight
{
	Default
	{	
		Scale 1.1;
	}
}
//===================================================================================
//	Arachnotron
//===================================================================================
Class ArachnoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Archvile
//===================================================================================
Class D4DArchHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldArchHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Cyberdemon
//===================================================================================
Class CyberdemonHighlight : HighlightBase	//had to redefine, since these guys stay less time in their stagger state
{
	
	Default
	{	
		Scale 1.1;
	}
	States
	{	
	Spawn:
		TNT1 A 0 NODELAY 
		{	RecoverToAmount=201;	}	//to how much will it heal after stagger times out
		Goto Looper;
	Looper:
		TNT1 A 1 Bright //by default, is invisible
		{
			if(MainCounter>=((GetCvar("D4D_StaggerLenght")*0.5)*35) )	//lasts only half of the time
			{
				A_SetHealth(RecoverToAmount,MasterPtr);	//heals the Monster;
				A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER); // removes the finisher token
				return ResolveState("Null");	//and this actor dies
			}
			else
			{
				if(GetCvar("D4D_ExecutionHighlight")==1  && GetCvar("vid_renderer")==0)	//if the highlight is ON
				{	A_CopySpriteFrame(MasterPtr,0);	}	//copies the sprite
				
				if(StgrPainCounter==35 || MainCounter==0) //if the stagger just started or one second has passed
				{ 
					A_GiveInventory("PainSoundToken",1,MasterPtr);  //makes the parent actor play pain sound
					StgrPainCounter=0;
				}
					
				//Checks if it can warp (and warps) and ensures the master is alive	
				if (A_Warp(MasterPtr,  1  ,0,0,0,WARPF_NOCHECKPOSITION,"Null") && !A_JumpIfHealthLower(1,"Null",MasterPtr)) 
				{
					//nothing happens here, really
					//A_SpawnItemEx("DecoTest",0,0,0,0,0,0,0,32);	//debug
				}
				else	//it couldnt warp or the master is dead
				{
					//A_PrintBold("taking the item away"); //debug
					A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER);	//removes the finisher token
					return ResolveState("Null");	//this actor dies, because is no longer needed
				}
					
				MainCounter++;	//increases the main counter
				StgrPainCounter++; //increases the 1 second counter for pain sounds
				return ResolveState(null);
			}
		}
		Loop;
	}
}

//===================================================================================
//	Mastermind
//===================================================================================
Class MastermindHighlight : CyberdemonHighlight
{
	
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	RecoverToAmount=201;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//==============================================================================
// Rainbow Doom
// 
// Concept borrowed with permission from Cactus Hege's Colorful Hell.
// Developed by Major Cooke
//==============================================================================

Class D4MonsterUpgrader : Inventory
{
	Default
	{
		Inventory.MaxAmount 7;
	}
}