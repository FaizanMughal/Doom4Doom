//===================================================================================
//===================================================================================
//
//	Chance to spawn demon rune
//  This value is "x". Formula to spawn any rune is 
//   "if(random(1,X)==x)" 
//===================================================================================
//===================================================================================
enum RuneChances
{
	RuneChance_Knight = 18,
	RuneChance_Baron = 15,
	RuneChance_Rev = 18,
	RuneChance_Caco = 18,
	RuneChance_Fatso = 15,
	RuneChance_PainEl = 12,
	RuneChance_Cyber = 6,
	RuneChance_Master = 3,
	RuneChance_Arach = 15,
	RuneChance_Archie = 10,
}

Class D4AbstractMonster : Actor 
{
	int UpgradeDropChance, UpgradeDropAlways;
	uint CrateDropChance, CrateDropAmount, CrateDropAlways;
	uint CashAmount, CashChainsawPinata;
	int CashMultiplier;
	Name MOD;
	D4DropList Pinatas;
	Actor Spawner;
	Color BC;
	
	property BC: BC;
	property UpgradeDropChance: UpgradeDropChance;
	property UpgradeDropAlways: UpgradeDropAlways;
	property CrateDropChance: CrateDropChance;
	property CrateDropAmount: CrateDropAmount;
	property CrateDropAlways: CrateDropAlways;
	property CashAmount: CashAmount;
	property CashChainsawFinisher: CashChainsawPinata;
	Default
	{
		D4AbstractMonster.UpgradeDropChance -1;
		D4AbstractMonster.UpgradeDropAlways 0;
		D4AbstractMonster.CrateDropAmount 0;
		D4AbstractMonster.CrateDropChance 0;
		D4AbstractMonster.CrateDropAlways 0;
		D4AbstractMonster.CashAmount -1;
		D4AbstractMonster.CashChainsawFinisher -1;
		D4AbstractMonster.BC "Red";
		BloodColor "Red";
		DamageFactor "Crush", 15.0;
	}
	
	override void BeginPlay()
	{
		Pinatas.ResetList();
		Super.BeginPlay();
	}
	
	override void Deactivate(Actor activator)
	{
		A_ChangeCountFlags(false);
		Super.Deactivate(activator);
	}
	
	override void Activate(Actor activator)
	{
		A_ChangeCountFlags(true);
		Super.Activate(activator);
	}
	
	// Don't let removing scripts leave gaps.
	
	override void OnDestroy()
	{
		if (health > 1)
		{
			if (Spawner && Spawner.health > 0)
			{
				Spawner.bVULNERABLE = true;
				Spawner.A_Die();
			}
		}
		Super.OnDestroy();
	}
	
	override void Die(Actor source, Actor inflictor, int dmgflags = 0)
	{
		if (Spawner && Spawner.health > 0)
		{
			Spawner.bVULNERABLE = true;
			Spawner.A_Die();
		}
		else if (master && (master is "D4DMonsterSpawner" || master is master.GetReplacee("D4DMonsterSpawner")))
		{
			master.bVULNERABLE = true;
			master.A_Die();
		}
		Super.Die(source, inflictor, dmgflags = 0);
	}
	
	//--------------------------------------------------------------------------
	//
	// D4Chase(melee, missile, flags, max turn)
	//
	// A_Chase enhanced, + new parameter: Max turn.
	// Specifies how much in degrees the monster should turn towards its target.
	// -1 will not turn it.
	//--------------------------------------------------------------------------
	void D4Chase(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0, double maxturn = 30.0)
	{
		int newflags = 0;
		if (GetCvar("D4D_EnhancedChase"))
		{
			if (!target || target.bKilled)
				A_Chase(null,null,CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NORANDOMTURN|CHF_NOPOSTATTACKTURN);
			
			if (A_JumpIfTargetInLOS("Null",360,JLOSF_DEADNOJUMP))
			{
				double ang = angle;
				
				//Vector3 movepos = Vec2OffsetZ((cos(angle) * speed), (sin(angle) * speed), 0);
				if (maxturn >= 0.0)
					A_FaceTarget(maxturn,0);
				Vector2 nmpos = Vec2Angle(speed,angle);
				
				if (TryMove(nmpos, false))
				{
					newflags = CHF_DONTMOVE|CHF_DONTTURN|CHF_NODIRECTIONTURN|CHF_NOPOSTATTACKTURN;
				}
				else
				{
					angle = ang;
					newflags = 0;
				}
			}
		}
		A_Chase(melee, missile, flags|newflags);
	}
	
	//==========================================================================
	//
	// RuneChance(id)
	//
	// Determines the chance of a rune dropping.
	//==========================================================================
	
	int RuneChance(int id)
	{
		int rarity = int(GetCvar("D4D_DemonRunes"));
		
		if (!rarity)	return 0;
		
		// Spider masterminds are the rarest of enemies. Give them special 
		// treatment so players can enjoy playing the hell out of them.
		if (CheckClass("D4SpiderMastermind") || CheckClass("D4OldSpiderMastermind"))
		{
			// Only check for live ones.
			int howmany = Max(1,CountProximity("D4SpiderMastermind",32767) + CountProximity("D4OldSpiderMastermind",32767) + 1);
			howmany = Clamp(howmany,1,RuneChance_Master);
			if (rarity == 2)
			{
				return (random(1,howmany) == 1) ? true : false;
			}
			else if (rarity == 1)
			{
				return (random(1,howmany * 2) == 1) ? true : false;
			}
		}
		else if (rarity == 2)		// Common
		{
			return (random(1, (id / 2)) == 1) ? 1 : 0;
		}
		else if (rarity == 1) 	// Rare
		{
			return (random(1, id) == 1) ? 1 : 0;
		}
		return 0;
	}
	
	//==========================================================================
	//
	// XDeathGush(int bcolor)
	//
	// Splatters the enemy. Accept 0, Color_Green, Color_Blue or Color_Black
	// for blood colors on the gib dropper.
	//==========================================================================
	
	void XDeathGush(int bcolor = 0)
	{
		MOD = DamagetypeReceived;
		if ((MOD != 'Massacre'))
		{
			//int sflag = (CountInv("D4MonsterUpgrader")) ? SXF_TRANSFERTRANSLATION : SXF_USEBLOODCOLOR;
			let gibs = BloodGibDropper(Spawn("BloodGibDropper", pos));
			//[t, gibspawner] = A_SpawnItemEx("BloodGibDropper",0,0,0,vel.x,vel.y,vel.z,0,
			//	SXF_NOCHECKPOSITION|SXF_ABSOLUTEVELOCITY|SXF_SETTRACER|SXF_ORIGINATOR);//,0,bcolor);
			
			if (gibs)
			{
				gibs.tracer = self;
				gibs.vel = vel;
				int tier = CountInv("D4MonsterUpgrader");
				int toSend = (tier) ? Translation : BloodTranslation;
				gibs.BC = BC;
				gibs.Translation = ((tier) ? Translation : BloodTranslation);
			}
			
			A_XScream();
			A_PlaySound("Doom4/Other/GibExplode",CHAN_AUTO);
		}
	}
	
	//==========================================================================
	enum EJumpFlags
	{
		JF_FORWARD = (1<<0),
		JF_UP = (1<<1),
		
		JF_ALL = JF_FORWARD|JF_UP
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		oldLeap = false;
	}

	int oldLeap;
	double leapDistance;

	void A_Leap()
	{
		// if grounded, go to see.
		if (CheckOnGround())
		{
			if (!oldLeap)
			{
				A_FaceTarget();
				double vertical = 12;
				if (target.pos.z-pos.z > 64 && ceilingz-pos.z > 128) vertical = 18;
				double horizontalMult = leapDistance / 480;
				double horizontal = 1;
				for (int i = 0; i < 4; i++) horizontal *= horizontalMult; // pow is not defined
				vector3 newdir = (cos(angle)*horizontal, sin(angle)*horizontal, vertical);
				vel += newdir;
				oldLeap = frame;
			}
			else
			{
				SetState(ResolveState("See"));
				return;
			}
		}
		else if (vel.z > 0)
		{
			vector3 newdir = (cos(angle)*2, sin(angle)*2, 0);
			vel += newdir;
			frame = oldLeap+1;
		}
		else if (vel.z < 0)
		{
			frame = oldLeap+2;
		}
	}
	
	double GetGroundHeight()
	{
		double _floorz = GetZAt();
		bool ok; Actor pOnmobj;
		[ok, pOnmobj] = TestMobjZ(true);
		if (!pOnmobj) return _floorz;
		double _actorz = pOnmobj.pos.z+pOnmobj.height;
		return max(_floorz, _actorz);
	}

	bool CheckOnGround()
	{
		return (abs(GetGroundHeight()-pos.z) < 1);
	}

	virtual double GetJumpDistance()
	{
		double dst = 480;
		if (ceilingz-pos.z > 128) dst *= 2;
		return dst;
	}

	bool CheckPitBeforeTarget()
	{
		if (!CheckSight(target)) return false;
		
		int step = int(radius/2);
		vector3 checkdirection = (target.pos-pos).Unit()*step;
		int steps = min(Distance2D(target), GetJumpDistance())/step;
		double curz = pos.z;
		SetXYZ((pos.x, pos.y, pos.z+64));
		for (int i = 0; i < steps; i++)
		{
			double zat = GetZAt(pos.x+checkdirection.x*i, pos.y+checkdirection.y*i, 0, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG);
			//A_LogFloat(zat);
			if (curz-zat > MaxStepHeight*2 || zat-curz > MaxStepHeight)
			{
				SetXYZ((pos.x, pos.y, curz));
				return true;
			}
		}
		
		SetXYZ((pos.x, pos.y, curz));
		return false;
	}

	bool TryLeap(state leapstate, EJumpFlags flags)
	{
		if (!target) return false;
		//if (CheckShrunk()) return false; // alien didn't need this
		//
		if (CheckOnGround() && // if we are standing
			// !random(0, 16) && // and we don't do this all the time
			(((flags & JF_UP) && (abs(target.pos.z-pos.z) > Default.MaxStepHeight)) || // and target has more height difference than maxstepheight
			 ((flags & JF_FORWARD) && CheckPitBeforeTarget())) && // and there's a deep pit in front of us
			Distance2D(target) < GetJumpDistance()) // and target is within max jump radius
		{
			oldLeap = 0;
			leapDistance = Distance2D(target);
			SetState(ResolveState("Leap"));
			return true;
		}
		
		return false;
	}
}


Class D4AbstractBiggie : D4AbstractMonster {}
Class D4AbstractBoss : D4AbstractBiggie {}
Class D4AbstractMissile : Actor {}

Class PainSoundToken : Inventory
{}

//for previous iteration of the system
Class MonsterHealer : CustomInventory
{
	Default
	{
		+INVENTORY.AUTOACTIVATE
		Inventory.MaxAmount 10000;
	}
	
	States
	{
	Use:
		TNT1 A 0 A_SetHealth(health+1);
		Stop;
	}
}
// debug actor
Class DecoTest : Actor
{
	Default
	{
		+NOINTERACTION
		Scale 2.0;
		alpha 0.4;
	}
	
	States
	{
	Spawn:
		TROO A 2 Bright;
		Stop;
	}
}



//==================================================================================================
//	Wound health values, just for reference
// 
// MONSTER NAME       HEALTH    WOUND    |     HEALTH-D4D   WOUND-D4D    |  HEAL TO
// Zombieman            20       10      |        20          10         |     15          
// ShotgunGuy           30       10      |        30          10         |     15   
// ChaingunGuy          70       30      |        70          30         |     40   
// DoomImp              60       25      |        60          25         |     30    
// Demon/spectre       150       50      |       150          50         |     60   
// LostSoul            N/A      N/A      |       N/A         N/A         |    N/A   
// Cacodemon           300       80      |       400          80         |    100          
// PainElemental       400      100      |       400         100         |    101
// Revenant            300       80      |       400          80         |    100
// HellKnight          500      100      |       500         100         |    130
// BaronOfHell        1000      150      |      1000         150         |    180
// Fatso               600      110      |       800         120         |    130
// Arachnotron         500      100      |       500         100         |    130	
// Archvile            700      120      |      1000         150         |    130 - 180
// Cyberdemon         4000      150      |      4000         150         |    201
// SpiderMastermind   3000      150      |      3000         150         |    201
//
//==================================================================================================

//===================================================================================
//	Base actor from which they inherit
//===================================================================================
Class HighlightBase : Actor
{
	int user_MainCounter;
	int user_woundvalue;
	int user_RecoverToAmount;
	int user_StgrPainCounter;
	Default
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 1.1;
		Translation "0:255=%[0.2,0.2,0.2]:[1.5,0.75,0.0]";
		Alpha 0.4;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			user_RecoverToAmount=15;
		}
		Goto Looper;
	Looper:
		TNT1 A 1 Bright //by default, is invisible
		{
			if(user_MainCounter>=(GetCvar("D4D_StaggerLenght")*35) )
			{
				A_SetHealth(user_RecoverToAmount,MasterPtr);	//heals the Monster;
				A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER); // removes the finisher token
				return ResolveState("Null");	//and this actor dies
			}
			else
			{
				if(GetCvar("D4D_ExecutionHighlight")==1/* && GetCvar("vid_renderer")==0*/)	//if the highlight is ON and in software mode
				{	A_CopySpriteFrame(MasterPtr,0);	}	//copies the sprite
				
				if(user_StgrPainCounter==35 || user_MainCounter==0) //if the stagger just started or one second has passed
				{ 
					A_GiveInventory("PainSoundToken",1,MasterPtr);  //makes the parent actor play pain sound
					user_StgrPainCounter=0;
				}
					
				//Checks if it can warp (and warps) and ensures the master is alive	
				if (A_Warp(MasterPtr,  1  ,0,0,0,WARPF_NOCHECKPOSITION,"Null") && !A_JumpIfHealthLower(1,"Null",MasterPtr)) 
				{
					//nothing happens here, really
					//A_SpawnItemEx("DecoTest",0,0,0,0,0,0,0,32);	//debug
				}
				else	//it couldnt warp or the master is dead
				{
					//A_PrintBold("taking the item away"); //debug
					A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER);	//removes the finisher token
					return ResolveState("Null");	//this actor dies, because is no longer needed
				}
					
				user_MainCounter++;	//increases the main counter
				user_StgrPainCounter++; //increases the 1 second counter for pain sounds
				return ResolveState(null);
			}
		}
		Loop;
	}
}


//===================================================================================
//	Zombieman & ShotgunGuy
//===================================================================================
Class ZombieHighlight : HighlightBase
{
	Default
	{	
		Scale 1.05;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	
				user_RecoverToAmount=15; //to how much will it heal after stagger times out
			}
			Goto Looper;
	}
}


//===================================================================================
//	ChaingunGuy
//===================================================================================
Class ChaingunnerHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=40;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Imp
//===================================================================================
Class ImpHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=30;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Demon & spectre
//===================================================================================
Class DemonHighlight : HighlightBase
{
	Default
	{	
		Scale 0.765;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=60;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldDemonHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=60;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Cacodemon
//===================================================================================
Class CacoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=100;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
//===================================================================================
//	Pain Elemental
//===================================================================================
Class D4DPainElementalHighlight : HighlightBase
{
	Default
	{	
		Scale 1.22;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=101;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldPainElementalHighlight : D4DPainElementalHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Revenant
//===================================================================================
Class D4DRevenantHighlight : HighlightBase
{
	Default
	{	
		Scale 0.95;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=100;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldRevenantHighlight : D4DRevenantHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Hell knight
//===================================================================================
Class D4DHellKnightHighlight : HighlightBase
{
	Default
	{	
		Scale 0.69;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldHellKnightHighlight : D4DHellKnightHighlight
{
	Default
	{	
		Scale 1.1;
	}
}

//===================================================================================
//	Baron Of Hell
//===================================================================================
Class D4DBaronHighlight : HighlightBase
{
	Default
	{	
		Scale 0.77;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class BaronHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
//===================================================================================
//	Both Fatso variations
//===================================================================================
Class D4DFatsoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.2;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldFatsoHighlight : D4DFatsoHighlight
{
	Default
	{	
		Scale 1.1;
	}
}
//===================================================================================
//	Arachnotron
//===================================================================================
Class ArachnoHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Archvile
//===================================================================================
Class D4DArchHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=180;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}
Class OldArchHighlight : HighlightBase
{
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=130;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//===================================================================================
//	Cyberdemon
//===================================================================================
Class CyberdemonHighlight : HighlightBase	//had to redefine, since these guys stay less time in their stagger state
{
	
	Default
	{	
		Scale 1.1;
	}
	States
	{	
	Spawn:
		TNT1 A 0 NODELAY 
		{	user_RecoverToAmount=201;	}	//to how much will it heal after stagger times out
		Goto Looper;
	Looper:
		TNT1 A 1 Bright //by default, is invisible
		{
			if(user_MainCounter>=((GetCvar("D4D_StaggerLenght")*0.5)*35) )	//lasts only half of the time
			{
				A_SetHealth(user_RecoverToAmount,MasterPtr);	//heals the Monster;
				A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER); // removes the finisher token
				return ResolveState("Null");	//and this actor dies
			}
			else
			{
				if(GetCvar("D4D_ExecutionHighlight")==1  && GetCvar("vid_renderer")==0)	//if the highlight is ON
				{	A_CopySpriteFrame(MasterPtr,0);	}	//copies the sprite
				
				if(user_StgrPainCounter==35 || user_MainCounter==0) //if the stagger just started or one second has passed
				{ 
					A_GiveInventory("PainSoundToken",1,MasterPtr);  //makes the parent actor play pain sound
					user_StgrPainCounter=0;
				}
					
				//Checks if it can warp (and warps) and ensures the master is alive	
				if (A_Warp(MasterPtr,  1  ,0,0,0,WARPF_NOCHECKPOSITION,"Null") && !A_JumpIfHealthLower(1,"Null",MasterPtr)) 
				{
					//nothing happens here, really
					//A_SpawnItemEx("DecoTest",0,0,0,0,0,0,0,32);	//debug
				}
				else	//it couldnt warp or the master is dead
				{
					//A_PrintBold("taking the item away"); //debug
					A_TakeInventory("FinisherToken",32768,0,AAPTR_MASTER);	//removes the finisher token
					return ResolveState("Null");	//this actor dies, because is no longer needed
				}
					
				user_MainCounter++;	//increases the main counter
				user_StgrPainCounter++; //increases the 1 second counter for pain sounds
				return ResolveState(null);
			}
		}
		Loop;
	}
}

//===================================================================================
//	Mastermind
//===================================================================================
Class MastermindHighlight : CyberdemonHighlight
{
	
	Default
	{	
		Scale 1.1;
	}
	States
	{	Spawn:
			TNT1 A 0 NODELAY 
			{	user_RecoverToAmount=201;	}	//to how much will it heal after stagger times out
			Goto Looper;
	}
}

//==============================================================================
// Rainbow Doom
// 
// Concept borrowed with permission from Cactus Hege's Colorful Hell.
// Developed by Major Cooke
//==============================================================================

Class D4MonsterUpgrader : Inventory
{
	Default
	{
		Inventory.MaxAmount 7;
	}
}