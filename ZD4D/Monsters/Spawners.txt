// For an example on replacing spawners, see the Fatso one.

Class D4DMonsterSpawner : Actor
{
	bool goDormant;
	bool isBoss;
	Array<String> OldMonList;		// Classic
	Array<String> NewMonList;		// D4D
	Class<Actor> OldMonster;		// You get the drift...
	Class<Actor> NewMonster;
	Actor MyLittleMonster;
	property isBoss: isBoss;		// For monsters that trigger E*M8/MAP07 specials.
	property OldMonster: OldMonster;
	property NewMonster: NewMonster;
	Default 
	{
		D4DMonsterSpawner.isBoss false;
		Monster;
		Health 1000000;
		+DONTCORPSE
		+NORADIUSDMG
		+NONSHOOTABLE
		-SHOOTABLE
		-COUNTKILL
		+BOSSDEATH
		+NOTIMEFREEZE
		+CANTSEEK
		+BOSSDEATH
		+NEVERTARGET
		+DONTTHRUST
		+DONTSPLASH
		+NOGRAVITY
		+NOPAIN
		+NOTRIGGER
		+NOTONAUTOMAP
		+NOTELEPORT
		+ALWAYSTELEFRAG
		+LAXTELEFRAGDMG
		+THRUACTORS
		+NOINTERACTION
		Species "D4DSpawner";
		DamageFactor "Normal", 0.0;
		DamageFactor "Massacre", 666;
	}
	
	override void Deactivate(Actor activator)
	{
		goDormant = true;
	}
	
	override void Activate(Actor activator)
	{
		goDormant = false;
	}
	
	override void PostBeginPlay()
	{
		// Don't ever do anything with its base self for safety reasons.
		
		if (GetClass() == "D4DMonsterSpawner")
			return Destroy();
		
		Super.PostBeginPlay();
		//======================================================================
		// Check to see if modders have injected monster classes to spawn.
		// Currently does not have an offset randomizer yet.
		//======================================================================
		int montype = GetCvar("user_MonsterType");
		// D4D Themed Section
		
		if (montype != 0)
		{
			if (NewMonList.Size() > 0)
			{
				for (int i = NewMonList.Size() - 1; i >= 0; i--)
				{
					Class<Actor> tester = NewMonList[i];
					if (!tester)
					{
						A_Log(NewMonList[i].." doesn't exist! Check your spelling/definitions!" );
						NewMonList.Pop();
					}
				}
				
				if (NewMonList.Size() > 0)
				{
					uint mMax = NewMonList.Size() - 1;
					NewMonster = NewMonList[random(0,mMax)];
					NewMonList.Clear();
				}
			}
		}
		// Classic Section
		else
		{
			if (OldMonList.Size() > 0)
			{
				for (int i = OldMonList.Size() - 1; i >= 0; i--)
				{
					Class<Actor> tester = OldMonList[i];
					if (!tester)
					{
						A_Log(OldMonList[i].." doesn't exist! Check your spelling/definitions!" );
						OldMonList.Pop();
					}
				}
				
				if (OldMonList.Size() > 0)
				{
					uint mMax = OldMonList.Size() - 1;
					OldMonster = OldMonList[random(0,mMax)];
					OldMonList.Clear();
				}
			}
		}
		
		// And get back to our daily spawning.
		Class<Actor> toSpawn = null;
		if (montype == 0 && OldMonster)
			toSpawn = OldMonster;
		else if (montype != 0 && NewMonster)
			toSpawn = NewMonster;
		else return Destroy();
		
		bool test;
		[test, MyLittleMonster] = A_SpawnItemEx(toSpawn,0,0,0,0,0,0,0,MonsterSpawnFlags,0,tid);
		
		if (MyLittleMonster)
		{
			if (bBossSpawned)
			{
				MyLittleMonster.TeleportMove (MyLittleMonster.pos, true);
				MyLittleMonster.bBossSpawned = true;
			}
			//if (isBoss)
			//{
				let d4mon = D4AbstractMonster(MyLittleMonster);
				if (d4mon)
					d4mon.Spawner = self;
			//}
			
			if (master)	
				MyLittleMonster.master = master;
			
			if (goDormant) 
			{	
				MyLittleMonster.Deactivate(self);	
				MyLittleMonster.A_ChangeCountFlags(false,0,bCOUNTSECRET);
			}
			MyLittleMonster.A_ChangeCountFlags(-1,0,bCOUNTSECRET);
			
			if (health != GetSpawnHealth())	
				MyLittleMonster.A_SetHealth(health);
		}
		
	}
	
	States
	{
	Spawn:
		TNT1 A 70 NODELAY
		{
			
			if (!MyLittleMonster || !isBoss)
			{
				if (isBoss) A_BossDeath();
				bVULNERABLE = true;
				A_Die();
			}
			
		}
		Loop;
	Death:
		TNT1 A 3 A_BossDeath();
		Stop;
	}
}




//===============================================================================
//===============================================================================
//	Zombieman
//===============================================================================
//===============================================================================

Class ZombieReplacer : D4DMonsterSpawner replaces Zombieman
{
	Default 
	{
		// Use these for just single spawning types. Keeps code compact.
		// See fatso spawner below for example on how to spawn a random type.
		D4DMonsterSpawner.OldMonster "D4OldZombieman";
		D4DMonsterSpawner.NewMonster "D4Zombieman";
		Radius 20;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	ShotgunGuy
//===============================================================================
//===============================================================================

Class ShotgunGuyReplacer : D4DMonsterSpawner replaces ShotgunGuy
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldShotgunGuy";
		D4DMonsterSpawner.NewMonster "D4ShotgunGuy";
		Radius 20;
		Height 56;
	}
}
//===============================================================================
//===============================================================================
//	ChaingunGuy
//===============================================================================
//===============================================================================

Class ChaingunGuyReplacer : D4DMonsterSpawner replaces ChaingunGuy
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldChaingunGuy";
		D4DMonsterSpawner.NewMonster "D4ChaingunGuy";
		Radius 20;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	Demon
//===============================================================================
//===============================================================================
Class DemonReplacer : D4DMonsterSpawner replaces Demon
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldDemon";
		D4DMonsterSpawner.NewMonster "D4Demon";
		Radius 30;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	Spectre
//===============================================================================
//===============================================================================
Class SpectreReplacer : D4DMonsterSpawner replaces Spectre
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldSpectre";
		D4DMonsterSpawner.NewMonster "D4Spectre";
		Radius 30;
		Height 56;
	}
}
//===============================================================================
//===============================================================================
//	DoomImp
//===============================================================================
//===============================================================================
Class DoomImpReplacer : D4DMonsterSpawner replaces DoomImp
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldDoomImp";
		D4DMonsterSpawner.NewMonster "D4DoomImp";
		Radius 20;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	LostSoul
//===============================================================================
//===============================================================================
Class LostSoulReplacer : D4DMonsterSpawner replaces LostSoul
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldLostSoul";
		D4DMonsterSpawner.NewMonster "D4LostSoul";
		Radius 16;
		Height 56;
	}
}
//===============================================================================
//===============================================================================
//	Cacodemon
//===============================================================================
//===============================================================================
Class CacodemonReplacer : D4DMonsterSpawner replaces Cacodemon
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldCacodemon";
		D4DMonsterSpawner.NewMonster "D4Cacodemon";
		Radius 31;
		Height 56;
	}
}
//===============================================================================
//===============================================================================
//	PainElemental
//===============================================================================
//===============================================================================
Class PainElementalReplacer : D4DMonsterSpawner replaces PainElemental
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldPainElemental";
		D4DMonsterSpawner.NewMonster "D4PainElemental";
		Radius 31;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	Revenant
//===============================================================================
//===============================================================================
Class RevenantReplacer : D4DMonsterSpawner replaces Revenant
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldRevenant";
		D4DMonsterSpawner.NewMonster "D4Revenant";
		Radius 20;
		Height 56;
	}
}


//===============================================================================
//===============================================================================
//	HellKnight
//===============================================================================
//===============================================================================
Class HellKnightReplacer : D4DMonsterSpawner replaces HellKnight
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldHellKnight";
		D4DMonsterSpawner.NewMonster "D4HellKnight";
		Radius 24;
		Height 64;
	}
}

//===============================================================================
//===============================================================================
//	BaronOfHell
//===============================================================================
//===============================================================================
Class BaronOfHellReplacer : D4DMonsterSpawner replaces BaronOfHell
{
	Default 
	{
		// Boss monster. Needs the isBoss boolean so it knows to stick around
		// until the monster's death.
		D4DMonsterSpawner.isBoss true;
		D4DMonsterSpawner.OldMonster "D4OldBaronOfHell";
		D4DMonsterSpawner.NewMonster "D4BaronOfHell";
		Radius 24;
		Height 64;
	}
}


//===============================================================================
//===============================================================================
//	Fatso
//===============================================================================
//===============================================================================
Class FatsoReplacer : D4DMonsterSpawner replaces Fatso
{
	Default 
	{
		D4DMonsterSpawner.isBoss true;
		D4DMonsterSpawner.OldMonster "D4OldFatso";
		// Intentionally didn't have a NewMonster here.
		Radius 24;
		Height 64;
	}
	
	// All modders need to do is override the PostBeginPlay. Depending on the setting,
	// simply add to NewMonList if the mode is D4D style or not (can also throw 
	// in your own cvar checks, that's totally fine).
	
	// Use the NewMonList.Push for D4D regular, and OldMonList.Push for classic.
	// Make sure to call the Super.PostBeginPlay() at the end of it.
	// However, if you wish to eliminate previous listings, then call
	// D4DMonsterSpawner.PostBeginPlay(); instead.
	override void PostBeginPlay()
	{
		NewMonList.Push("D4FatsoHell");
		NewMonList.Push("D4FatsoTech");
		Super.PostBeginPlay();
	}
}

//===============================================================================
//===============================================================================
//	Arachnotron
//===============================================================================
//===============================================================================
Class ArachnotronReplacer : D4DMonsterSpawner replaces Arachnotron
{
	Default 
	{
		D4DMonsterSpawner.isBoss true;
		D4DMonsterSpawner.OldMonster "D4OldArachnotron";
		D4DMonsterSpawner.NewMonster "D4Arachnotron";
		Radius 64;
		Height 64;
	}
}


//===============================================================================
//===============================================================================
//	Archvile
//===============================================================================
//===============================================================================
Class ArchvileReplacer : D4DMonsterSpawner replaces Archvile
{
	Default 
	{
		D4DMonsterSpawner.OldMonster "D4OldArchvile";
		D4DMonsterSpawner.NewMonster "D4Archvile";
		Radius 20;
		Height 56;
	}
}

//===============================================================================
//===============================================================================
//	Cyberdemon
//===============================================================================
//===============================================================================
Class CyberdemonReplacer : D4DMonsterSpawner replaces Cyberdemon
{
	Default 
	{
		D4DMonsterSpawner.isBoss true;
		D4DMonsterSpawner.OldMonster "D4OldCyberdemon";
		D4DMonsterSpawner.NewMonster "D4Cyberdemon";
		Radius 40;
		Height 110;
	}
}

//===============================================================================
//===============================================================================
//	SpiderMastermind 
//===============================================================================
//===============================================================================
Class SpiderMastermindReplacer : D4DMonsterSpawner replaces SpiderMastermind
{
	Default 
	{
		D4DMonsterSpawner.isBoss true;
		D4DMonsterSpawner.OldMonster "D4OldSpiderMastermind";
		D4DMonsterSpawner.NewMonster "D4SpiderMastermind";
		Radius 128;
		Height 100;
	}
}