enum PickupConstants
{
	//Armor Per Difficulty
	ArmorCapGreen =				100,
	ArmorCapBlue =				200,
	ArmorCapGreenNormal =		100,		//Ultra Violence
	ArmorCapGreenNightmare =	100,		//Nightmare
	ArmorCapGreenUltra =		100,		//Ultra Nightmare
	ArmorCapBlueNormal =		200,
	ArmorCapBlueNightmare =		200,
	ArmorCapBlueUltra =			200,
	
	ArmorGreenNormal =		100,	//Ultra Violence
	ArmorGreenNightmare =	75,		//Nightmare
	ArmorGreenUltra =		50,		//Ultra Nightmare
	ArmorBlueNormal =		200,
	ArmorBlueNightmare =	150,
	ArmorBlueUltra =		100
};
//=======================================================================
//=======================================================================
// Health
//=======================================================================
//=======================================================================

Class D4Stimpack : Health replaces Stimpack
{
	Actor Glass;
	Vector3 OldPos;
	Class<Actor> GlassType;
	Property GlassType: GlassType;
	Default 
	{
		D4StimPack.GlassType "D4StimpackGlass";
		Inventory.PickupMessage "Stimpack";
		Inventory.Amount 10;
		Inventory.PickUpSound "Doom4/Pickups/Health";
		DistanceCheck "D4D_MaxDrawDistance";
	}
	
	void RemoveParts()
	{
		if (Glass) Glass.Destroy();
	}
	
	override void OnDestroy()
	{
		RemoveParts();
		Super.OnDestroy();
	}
	
	override void Hide()
	{
		if (Glass)	Glass.bINVISIBLE = true;
		Super.Hide();
	}
	
	void CheckParts()
	{
		if (Glass && Glass.Pos != Pos)
		{
			Glass.SetXYZ(pos);
			Glass.Angle = Angle;
		}
	}
	
	void SpawnParts()
	{
		if (!GlassType) return;
		if (Glass)
		{
			Glass.bINVISIBLE = false;
			Glass.Scale = Scale;
			Glass.Angle = Angle;
			return;
		}
		Glass = Spawn(GlassType,pos);
		if (Glass)
		{
			Glass.Scale = Scale;
			Glass.Angle = Angle;
		}
	}
	
	States
	{
	Spawn:
		D4HL A 0 NODELAY 
		{
			bNOTIMEFREEZE = false;
			A_SetAngle(random(0,359));
			SpawnParts();
		}
		---- A 1 CheckParts();
		Wait;
	HoldAndDestroy:
		TNT1 A 1 
		{
			bNOTIMEFREEZE = true;
			RemoveParts();
		}
		Stop;
	}
}
Class D4StimpackGlass : D4DFX
{
	Default
	{
		RenderStyle "Translucent";
		Alpha 0.8;
		+BRIGHT
		+NOTONAUTOMAP
		+RELATIVETOFLOOR
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		M666 A -1;
		Stop;
	}
}

Class D4Medikit : D4Stimpack replaces Medikit
{	
	Default 
	{
		D4StimPack.GlassType "D4MedikitGlass";
		Inventory.PickupMessage "Medikit";
		Inventory.PickUpSound "Doom4/Pickups/HealthLarge";
		Inventory.Amount 30;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		D4HL B 0 NODELAY
		{
			A_SetAngle(random(0,359));
			SpawnParts();
		}
		---- A 1 CheckParts();
		Wait;
	}
}

Class D4MedikitGlass : D4StimpackGlass	
{}

Class D4HealthBonus : D4Stimpack replaces HealthBonus
{	
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
		D4Stimpack.GlassType "D4HealthBonusGlass";
		Inventory.PickupMessage "Health bonus";
		Inventory.PickupSound "Doom4/Pickups/HealthBonus";
		Inventory.Amount 3;
		Inventory.MaxAmount 200;
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		D4HL C 0 NODELAY
		{
			A_SetAngle(random(0,359));
			SpawnParts();
		}
		---- A 1 CheckParts();
		Wait;
	}
}

Class D4HealthBonusGlass : D4StimpackGlass
{}

// This should never be spawned.
Class D4HealthBonusUpgraded : D4HealthBonus
{
	Default
	{
		+INVENTORY.IGNORESKILL
		Inventory.MaxAmount 300;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	}
}

//=======================================================================
//=======================================================================
// Armor
//=======================================================================
//=======================================================================

Class ArmorStripper : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_SetInventory("Armor",0);
			A_SetInventory("ArmorBonus",0);
			A_SetInventory("BasicArmor",0);
			A_SetInventory("BasicArmorBonus",0);
			A_SetInventory("BasicArmorPickup",0);
			A_SetInventory("D4ArmorBonus",0);
			A_SetInventory("D4GreenArmor",0);
			A_SetInventory("D4BlueArmor",0);
			A_SetInventory("D4BasicArmorBonus",0);
			A_SetInventory("D4ArmorBonus",0);
			A_SetInventory("D4ArmorPickup",0);
			A_SetInventory("D4BlueArmorMegasphere",0);
			return true;
		}
		Stop;
	}
}

Class D4ArmorBasePickup : CustomInventory
{
	int BaseLimit;		// The soft limit without upgrades.
	int MaxSaveAmount;	// The hard limit.
	int SavePercent;
	int SaveAmount;
	int MaxAbsorb;
	int MaxFullAbsorb;
	bool IgnoreSkill;
	
	property BaseLimit: BaseLimit;
	property SavePercent: SavePercent;
	property SaveAmount: SaveAmount;
	property MaxSaveAmount: MaxSaveAmount;
	property MaxAbsorb: MaxAbsorb;
	property MaxFullAbsorb: MaxFullAbsorb;
	property IgnoreSkill: IgnoreSkill;
	Default
	{
		D4ArmorBasePickup.SavePercent 100;
		D4ArmorBasePickup.SaveAmount 3;
		D4ArmorBasePickup.BaseLimit 200;
		D4ArmorBasePickup.MaxSaveAmount 200;
		D4ArmorBasePickup.MaxAbsorb 200;
		D4ArmorBasePickup.MaxFullAbsorb 200;
		D4ArmorBasePickup.IgnoreSkill false;
		Inventory.PickupMessage "";
		Inventory.PickUpSound "Doom4/Pickups/ArmorShard";
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		D4AR C -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	Pickup:
		TNT1 A 0
		{ // See top of file for armor cap definitions.
			
			let inv = BasicArmor(FindInventory("BasicArmor"));
			
			if (!inv)
			{
				if (A_GiveInventory("ArmorStripper",1))
				{
					A_GiveInventory("D4GreenArmorGiver",1);
				}
				return true;
			}
			int Cap = Min(invoker.BaseLimit + CountInv("D4ArmorCapRaiser"), invoker.MaxSaveAmount);
			inv.SavePercent = invoker.SavePercent;
			if (inv.Amount < Cap)
			{
				double SkillFactor = 1.0;
				if (!invoker.IgnoreSkill)
				{
						 if (skill == 3) SkillFactor = 0.75;
					else if (skill >= 4) SkillFactor = 0.5;
				}
				inv.Amount = Min(inv.Amount + int((invoker.SaveAmount * Max(1,invoker.Amount)) * SkillFactor), Cap);
				invoker.Amount = 1;
				if (inv.ArmorType == 'None')	inv.ArmorType = "D4ArmorPickup";
				inv.MaxFullAbsorb = Max(inv.MaxFullAbsorb, invoker.MaxFullAbsorb);
				inv.MaxAbsorb = Max(inv.MaxAbsorb, invoker.MaxAbsorb);
				return true;
			}
			return (invoker.bAlwaysPickup);
		}
		Stop;
	}
}

Class D4ArmorPickup : BasicArmorPickup replaces BasicArmorPickup
{	
	Default 
	{
		DistanceCheck "D4D_MaxDrawDistance";
		Armor.SavePercent 100;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
	}
}

Class D4BasicArmorBonus : BasicArmorBonus replaces BasicArmorBonus
{
	Default 
	{
		DistanceCheck "D4D_MaxDrawDistance";
		Armor.SavePercent 100;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
	}
}

Class D4ArmorBonus : ArmorBonus
{
	Default
	{
		Armor.SavePercent 100;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
		Armor.SaveAmount 3;
		DistanceCheck "D4D_MaxDrawDistance";
		Inventory.PickUpSound "Doom4/Pickups/ArmorShard";
		+ALLOWPAIN
	}
	States
	{
	Spawn:
		D4AR B -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4ArmorBonusPickup : D4ArmorBasePickup replaces ArmorBonus
{
	Vector2 OldPos;
	Default 
	{
		D4ArmorBasePickup.SavePercent 100;
		D4ArmorBasePickup.SaveAmount 3;
		D4ArmorBasePickup.BaseLimit 200;
		D4ArmorBasePickup.MaxSaveAmount 200;
		D4ArmorBasePickup.MaxAbsorb 200;
		D4ArmorBasePickup.MaxFullAbsorb 200;
		DistanceCheck "D4D_MaxDrawDistance";
		Inventory.PickUpSound "Doom4/Pickups/ArmorShard";
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Spawn:
		D4AR B 0 NODELAY A_SetAngle(random(0,359));
		---- A 1
		{
			// Thanks to ZZYZX for this. Tilts the object to slopes.
			if (Invoker.OldPos != Invoker.Pos.XY)
			{
				double dang = angle;
				vector3 fnormal = CurSector.floorplane.normal;
				vector2 fnormalp1 = (fnormal.x != 0 || fnormal.y != 0) ? (fnormal.x, fnormal.y).Unit() : (0, 0);
				vector2 fnormalp2 = ((fnormal.x, fnormal.y).Length(), fnormal.z);
				double fang = atan2(fnormalp1.y, fnormalp1.x); // floor angle (not pitch!)
				double fpitch = atan2(fnormalp2.x, fnormalp2.y); // floor pitch
				double ddiff1 = cos(fang-(dang-90));
				double ddiff2 = cos(fang-dang);
				pitch = fpitch*ddiff2;
				roll = -fpitch*ddiff1;
				angle = dang;
				Invoker.OldPos = Invoker.Pos.XY;
			}
		}
		Wait;
	}
}

Class D4GreenArmorGiver : ArmorBonus
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
		Armor.SavePercent 100;
		Armor.SaveAmount 100;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
		
	}
}

Class D4GreenArmor100 : D4GreenArmorGiver { Default { +INVENTORY.IGNORESKILL }}

Class D4BlueArmorGiver : ArmorBonus
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
		Armor.SavePercent 100;
		Armor.SaveAmount 200;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
	}
}
Class D4BlueArmor200 : D4BlueArmorGiver
{
	Default { +INVENTORY.IGNORESKILL }
}

// Allow me to explain wtf is going on here...
// When it comes to syphon armor and the regular armor pickup, the two just
// did not get along well. So I came up with a system utilizing CustomInventory
// to do the measuring instead, and voila! Problem solved. It can now be picked
// up at any time while wearing any kind of armor, provided the armor is lower
// than the specified amount.

Class ArmorCount : Inventory { Default { Inventory.MaxAmount 200;	Inventory.InterhubAmount 0; }}

Class ArmorSinglePoint : D4ArmorBonus
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.IGNORESKILL
		Armor.SaveAmount 1;
	}
}

Class D4GreenArmor : D4ArmorBasePickup replaces GreenArmor
{
	Default 
	{
		D4ArmorBasePickup.SavePercent 100;
		D4ArmorBasePickup.SaveAmount ArmorCapGreen;
		D4ArmorBasePickup.BaseLimit 100;
		D4ArmorBasePickup.MaxSaveAmount 200;
		D4ArmorBasePickup.MaxAbsorb 200;
		D4ArmorBasePickup.MaxFullAbsorb 200;
		Inventory.PickUpSound "Doom4/Pickups/ArmorMed";
		Inventory.PickUpMessage "Medium Armor Chunk";
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		D4AR C -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4BlueArmor : D4ArmorBasePickup replaces BlueArmor
{
	Default
	{
		D4ArmorBasePickup.SavePercent 100;
		D4ArmorBasePickup.SaveAmount ArmorCapBlue;
		D4ArmorBasePickup.BaseLimit 200;
		D4ArmorBasePickup.MaxSaveAmount 200;
		D4ArmorBasePickup.MaxAbsorb 200;
		D4ArmorBasePickup.MaxFullAbsorb 200;
		Inventory.PickUpSound "Doom4/Pickups/Armor";
		Inventory.PickUpMessage "Full Armor Casing";
		DistanceCheck "D4D_MaxDrawDistance";
	}
	States
	{
	Spawn:
		D4AR A -1 NODELAY A_SetAngle(random(0,359));
		Stop;
	}
}


//=======================================================================
//=======================================================================
// Backpack
//=======================================================================
//=======================================================================
Class D4Backpack : BackpackItem replaces Backpack 
{
	Default 
	{
		Scale 1.5;
		Inventory.PickupMessage "Picked up a backpack";
		Height 26;
	}
	States
	{
	Spawn:
		BPAK A -1 NoDelay
		{
			A_SetAngle(random[rng](0,359));
			
			if (!CountInv("FragGrenadePickup",Player1))
				A_SpawnItemEx("FragGrenadeWorld",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			else if (!CountInv("HoloGrenadePickup",Player1))
				A_SpawnItemEx("HoloGrenadeWorld",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			else if (!CountInv("SyphonGrenadePickup",Player1))
				A_SpawnItemEx("SyphonGrenadeWorld",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			
		}
		Stop;
	}
}

//==============================================================================
//==============================================================================
// Upgrades Made Manifest
//==============================================================================
//==============================================================================

Class D4UpgradeCase : CustomInventory
{
	UpgradePinataFlier flier;
	int count;
	int ticker;
	bool Flying;
	bool NoFly;
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		Inventory.PickupMessage "Random Upgrade gives you...";
	}
	
	States
	{
	Spawn:
		MICR A 1 NoDelay
		{
			if (invoker.NoFly)
			{
				A_SetTics(-1);
				return;
			}
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.NoItem = true;
			}
		}
		---- A 1
		{
			if (invoker.count >= DelayVacuum)
			{
				if (invoker.tracer)
				{
					invoker.count = DelayVacuum;
					PlrCheck.SetFlying(invoker, true);
					double PrevAngle = Angle;
					A_FaceTracer(0,0,0,0,FAF_BOTTOM);
					A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
					Angle = PrevAngle;
					if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false);	}
				}
				else	PlrCheck.SetFlying(invoker, false);
			}
			else invoker.count++;
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			let Event = D4DHandler(StaticEventHandler.Find("D4DHandler"));
			if (Event && Event.GetUpgradeMode() == 1) // Crates mode
			{
				Array<Class<Inventory> > Items; Items.Clear();
				for (int i = 0; i < AllActorClasses.Size(); i++)
				{
					// Make sure it's valid and inheriting from UpgradeItem,
					// while not being UpgradeItem and special 'abstract' classes
					// in-between.
					Class<UpgradeItem> Check1 = (Class<UpgradeItem>)(AllActorClasses[i]);
					if (D4DHandler.IsUpgradeBlacklisted(Check1, true))
						continue;
					
					// Checks for missing requirements. I.e. mods cannot drop
					// without their appropriate weapon in the inventory.
					if (UpgradeRequirementChecker.CheckItem(Check1, self) != 0)
						continue;
						
					Items.Push(Check1);
				}
				
				// No items to give, so do nothing.
				if (Items.Size() < 1)
					return true;
				
				// Choose a random one.
				int RNG = random[rngg](0, Items.Size() - 1);
				let inv = UpgradeItem(FindInventory(Items[RNG]));
				if (inv)
				{
					// The player has it, so adjust the amount.
					int quan = inv.Amount;
						 if (quan < inv.Quantity)	quan = inv.Quantity;
					else if (quan < inv.Q2)	quan = inv.Q2;
					else if (quan < inv.Q3)	quan = inv.Q3;
					else if (quan < inv.Q4)	quan = inv.Q4;
					if (!SetInventory(inv.GetClass(), quan))
						return true; // Nothing changed.
				}
				else 
				{
					int quan = 1;
					if (Items[RNG] is "UpgradeItem")
					{
						let defs = GetDefaultByType("UpgradeItem");
						quan = defs.Quantity;
					}
					A_GiveInventory(Items[RNG], quan);
				}
				
				// Finally, update the item itself and print the description.
				let in2 = UpgradeItem(FindInventory(Items[RNG]));
				if (in2)
				{
					in2.UpdateItem();
					in2.PrintDesc();
				}
				
			}
			else // Credits mode
			{
				A_GiveInventory("FreeUpgradeToken",1);
			}
			return true;
		}
		Stop;
	}
}

Class D4UpgradePickupSpawner : Actor
{
	Array<String> items;
	
	override void PostBeginPlay()
	{
		
		items.Clear();
		
		bool SpawnedSoviet = false;
		bool SpawnCase = false;
		bool CanSpawnSoviet = false;
		for (int i = 0; i < MAXPLAYERS; i++) 
		{
			if (!playeringame[i])	continue;
			let plr = PlayerPawn(players[i].mo);
			if (!plr) continue;
			int filled = 0;
			
			// filled is used only for the soviet upgrade.
			if (plr.CountInv("D4Pistol"))
			{
				if (!plr.CountInv("PistolUpgradeAutomatic") ||
					!plr.CountInv("PistolUpgradeAltDamage") ||
					!plr.CountInv("PistolUpgradeAltCharge") ||
					!plr.CountInv("PistolUpgradeDamage") ||
					!plr.CountInv("PistolUpgradeLance"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4Shotgun"))
			{
				if (!plr.CountInv("ShotgunMod1") ||	!plr.CountInv("ShotgunMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4SuperShotgun"))
			{
				if (!plr.CountInv("SSGUpgrade1") ||	!plr.CountInv("SSGUpgrade2") ||
					!plr.CountInv("SSGUpgrade3") ||	!plr.CountInv("SSGUpgrade4"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4AssaultRifle"))
			{
				if (!plr.CountInv("AssaultRifleMod1") || !plr.CountInv("AssaultRifleMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4Chaingun"))
			{
				if (!plr.CountInv("ChaingunMod1") || !plr.CountInv("ChaingunMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4RocketLauncher"))
			{
				if (!plr.CountInv("RocketLauncherMod1") ||!plr.CountInv("RocketLauncherMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4PlasmaRifle"))
			{
				if (!plr.CountInv("PlasmaRifleMod1") ||	!plr.CountInv("PlasmaRifleMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4GaussCannon"))
			{
				if (!plr.CountInv("GaussCannonMod1") ||	!plr.CountInv("GaussCannonMod2"))
					SpawnCase = true;		else	filled++;
			}
			if (plr.CountInv("D4BFG"))
			{
				if (!plr.CountInv("BFGUpgrade1") ||	!plr.CountInv("BFGUpgrade2") ||
					!plr.CountInv("BFGUpgrade3") ||	!plr.CountInv("BFGUpgrade4"))
					SpawnCase = true;		else	filled++;
			}
			if (filled >= 9)	CanSpawnSoviet = true;
			if (SpawnCase)		break;
			if (plr.CountInv("D4Repeater"))
			{
				if (!plr.CountInv("RepeaterUpgradePiercing") ||
					!plr.CountInv("RepeaterUpgradeDamage") ||
					!plr.CountInv("RepeaterUpgradeAltDamage") ||
					!plr.CountInv("RepeaterUpgradeAltAmmo"))
					{	SpawnCase = true; break;	}
			}
			if (plr.CountInv("D4LightningGun"))
			{
				if (!plr.CountInv("LGUpgradeAmmo") || !plr.CountInv("LGUpgradeRange") ||
					!plr.CountInv("LGUpgradeDamage") ||	!plr.CountInv("LGUpgradeAltFire"))
					{	SpawnCase = true; break;	}
			}
			
			if (plr.CountInv("D4StaticRifle"))
			{
				if (!plr.CountInv("StaticUpgrade1") ||
					!plr.CountInv("StaticUpgrade2") ||
					!plr.CountInv("StaticUpgrade3") ||
					!plr.CountInv("StaticUpgrade4"))
					{	SpawnCase = true; break;	}
			}
			
			if (plr.CountInv("D4VortexRifle"))
			{
				if (!plr.CountInv("VortexUpgradeDamage") ||
					!plr.CountInv("VortexUpgradeAmmo") ||
					!plr.CountInv("VortexUpgradeAltSpeed") ||
					!plr.CountInv("VortexUpgradeAltPierce"))
					{	SpawnCase = true; break;	}
			}
			
			if (plr.CountInv("D4CarrionCannon"))
			{
				if (!plr.CountInv("CarrionUpgradeAmmo") ||
					!plr.CountInv("CarrionUpgradeStun") ||
					!plr.CountInv("CarrionUpgradeTime") ||
					!plr.CountInv("CarrionUpgradePickup"))
					{	SpawnCase = true; break;	}
			}
			
			if (!plr.CountInv("D4MegachargeUpgrade1") || 
				!plr.CountInv("D4MegachargeUpgrade2") ||
				!plr.CountInv("D4DoomDollUpgrade1") || 
				!plr.CountInv("D4DoomDollUpgrade2") ||
				!plr.CountInv("D4RegenUpgrade1") ||	
				!plr.CountInv("D4RegenUpgrade2") ||
				!plr.CountInv("D4RegenUpgrade3") ||	
				!plr.CountInv("D4RegenUpgrade4") ||
				!plr.CountInv("D4PentagramUpgrade1") ||	
				!plr.CountInv("D4PentagramUpgrade2") ||
				!plr.CountInv("D4PentagramUpgrade3") ||	
				!plr.CountInv("D4PentagramUpgrade4") ||
			//	!plr.CountInv("D4RuneUpgrade1") || 
				!plr.CountInv("D4RuneUpgrade2") ||
				!plr.CountInv("D4RuneUpgrade3") ||
				!plr.CountInv("D4RuneUpgrade4") ||
				!plr.CountInv("D4QuadUpgrade1") ||
				!plr.CountInv("D4QuadUpgrade2") ||
				!plr.CountInv("D4HasteUpgrade1") ||
				!plr.CountInv("D4HasteUpgrade2"))
				{	SpawnCase = true; break;	}
			
			if (plr.CountInv("D4AirUpgrade") < 	GetDefaultByType("D4AirUpgrade").MaxAmount ||
				plr.CountInv("D4Stamina") < GetDefaultByType("D4Stamina").MaxAmount ||
				plr.CountInv("D4ArmorCapRaiser") < GetDefaultByType("D4ArmorCapRaiser").MaxAmount ||
				plr.CountInv("D4CrateUpgrade") < GetDefaultByType("D4CrateUpgrade").MaxAmount ||
				plr.CountInv("ProtectionBonus") < GetDefaultByType("ProtectionBonus").MaxAmount)
				{	SpawnCase = true; break;	}
		}
				
		// The weapons needed for the soviet chaingun have all been filled.
		// Spawn it in addition to whatever else will spawn as a bonus reward.
		if (CanSpawnSoviet && !SpawnedSoviet)
		{
			let soviet = Actor(Spawn("SovietChaingunUpgradePickup",pos));
			if (soviet)	
			{
				SpawnedSoviet = true;
				soviet.vel = vel;
				soviet.target = target;
				soviet.master = master;
				soviet.tracer = tracer;
			}
		}		
		int size = items.Size();
		
		if (SpawnCase)
		{
			Actor ItemToSpawn = Actor(Spawn("D4UpgradeCase",pos));
			if (ItemToSpawn)
			{
				ItemToSpawn.vel = vel;
				ItemToSpawn.target = target;
				ItemToSpawn.master = master;
				ItemToSpawn.tracer = tracer;
			}
		}
		Destroy(); return;		
	}
	
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		Radius 1;
		Height 1;
	}
}

Class D4UpgradePickup : CustomInventory
{
	UpgradePinataFlier flier;
	Class<Inventory> items[10];	
	String desc[5];
	uint index;
	int ticker;
	int count;
	bool Flying;
	int frm;
	name s1, s2;
	property Frame: frm;
	override void PostBeginPlay()
	{
		
		if (GetClass() == "D4UpgradePickup")
		{
			Destroy();
			return;
		}
		angle = random(0,359);
		bTHRUACTORS = false;
		Super.PostBeginPlay();
	}
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+BRIGHT
	}
	
	States
	{
	Spawn:
		"----" A 0 NoDelay
		{
			invoker.flier = new("UpgradePinataFlier");
			if (invoker.flier)
			{
				invoker.flier.Spawner = invoker;
				invoker.flier.NoItem = true;
			}
		}
		"----" A 1
		{
			invoker.ticker = (invoker.ticker + 1) % 34;
			
			name spr = (invoker.ticker < 17) ? "M668" : "M669";
			sprite = GetSpriteIndex(spr);
				
			frame = invoker.frm;
				
			if (invoker.count >= DelayVacuum)
			{
				if (tracer)
				{
					invoker.count = DelayVacuum;
					PlrCheck.SetFlying(invoker, true);
					A_FaceTracer(0,0,0,0,FAF_MIDDLE);
					A_ChangeVelocity(cos(pitch)*PSpeed,0,-sin(pitch)*PSpeed,CVF_RELATIVE|CVF_REPLACE);
					if (Distance3DSquared(invoker.tracer) <= Max(invoker.tracer.radius, invoker.tracer.height) ** 2)
					{	SetOrigin(tracer.pos, true); A_Stop(); PlrCheck.SetFlying(invoker, false);	}
				}
				else	PlrCheck.SetFlying(invoker, false);
			}
			else invoker.count++;
		}
		Wait;
	}
}

Class SovietChaingunUpgradePickup : D4UpgradePickup
{
	Default
	{
		D4UpgradePickup.Frame 25;
		+INVENTORY.ALWAYSPICKUP
		+BRIGHT
		Inventory.PickupSound "Doom4/Other/WeaponPickup";
		Inventory.PickupMessage "For Mother Russia!";
		Translation "0:255=%[0.0,0.0,0.0]:[1.0,0.75,0.0]";
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (!CountInv("SovietToken"))
			{	
				A_SetInventory("SovietToken",1);
				A_SetInventory("SovietActive",1);
			}
			// BUGS THIS BIG BECOME FEATURES!
			A_SetInventory("D4Bullets",CountInv("D4Bullets") + 666,DefPtr,true);
		}
		Stop;
	}
}