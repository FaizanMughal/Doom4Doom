
Class D4DKeeperItem : Inventory 
{
	Default
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
	}
	
	// NEVER let this item be picked up raw.
	override bool TryPickup(in out Actor toucher)
	{
		let Cls = GetClass();
		if (!toucher || Cls == "UpgradeItem" || Cls == "D4DKeeperItem")
			return false;
			
		return Super.TryPickup(toucher);
	}
}

Class UpgradeItem : D4DKeeperItem
{
	int Cost, Cost2, Cost3, Cost4;
	int Quantity, Q2, Q3, Q4;
	bool Tiered;
	String Req1, Req2, Req3, Req4;
	int ReqQ1, ReqQ2, ReqQ3, ReqQ4;
	String Attach1, Attach2, Attach3, Attach4;
	int Attamt1, Attamt2, Attamt3, Attamt4;
	String Desc, Desc1, Desc2, Desc3, Desc4;
	property Desc: Desc;
	property Desc1: Desc1;
	property Desc2: Desc2;
	property Desc3: Desc3;
	property Desc4: Desc4;
	property Cost: Cost;
	property Cost2: Cost2;
	property Cost3: Cost3;
	property Cost4: Cost4;
	property Quantity: Quantity;
	property Quantity2: Q2;
	property Quantity3: Q3;
	property Quantity4: Q4;
	property Tiered: Tiered;
	
	property Attached1: Attach1, Attamt1;
	property Attached2: Attach2, Attamt2;
	property Attached3: Attach3, Attamt3;
	property Attached4: Attach4, Attamt4;
	
	property Req1: Req1, ReqQ1;
	property Req2: Req2, ReqQ2;
	property Req3: Req3, ReqQ3;
	property Req4: Req4, ReqQ4;
	
	// ONLY USE ONE OF THESE.
	// This is simply for the sake of saving copy/paste extensions, but if
	// something needs to be more thorough, use the Req# properties instead.
	property Requirements1: Req1, ReqQ1;
	property Requirements2: Req1, ReqQ1, Req2, ReqQ2;
	property Requirements3: Req1, ReqQ1, Req2, ReqQ2, Req3, ReqQ3;
	property Requirements4: Req1, ReqQ1, Req2, ReqQ2, Req3, ReqQ3, Req4, ReqQ4;
	Default
	{
		UpgradeItem.Cost -1;
		UpgradeItem.Cost2 -1;
		UpgradeItem.Cost3 -1;
		UpgradeItem.Cost4 -1;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 -1;
		UpgradeItem.Quantity3 -1;
		UpgradeItem.Quantity4 -1;
		UpgradeItem.Tiered false;
		UpgradeItem.Req1 "", 1;
		UpgradeItem.Req2 "", 1;
		UpgradeItem.Req3 "", 1;
		UpgradeItem.Req4 "", 1;
		UpgradeItem.Attached1 "", 0;
		UpgradeItem.Attached2 "", 0;
		UpgradeItem.Attached3 "", 0;
		UpgradeItem.Attached4 "", 0;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.KEEPDEPLETED;
	}
	
	virtual void UpdateItem() {}
	virtual void PrintDesc()
	{
		if (Desc.Length() < 1)
			Desc = "Insert description for "..GetClassName().." here";
			
		if (Owner)
			Owner.A_Print(Desc);
	}
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		
		String badItems = "";
		Class<Inventory> check = Req1;
		if (Req1.Length() > 0 && !check) { badItems = badItems..Req1.." ";	Req1 = ""; }
		check = Req2;
		if (Req2.Length() > 0 && !check) { badItems = badItems..Req2.." ";	Req2 = ""; }
		check = Req3;
		if (Req3.Length() > 0 && !check) { badItems = badItems..Req3.." ";	Req3 = ""; }
		check = Req4;
		if (Req4.Length() > 0 && !check) { badItems = badItems..Req4.." ";	Req4 = ""; }
		InterhubAmount = MaxAmount;
		
		if (badItems.Length() > 0)
			Console.Printf("Bad item requirements in %s: %s", badItems, GetClass());
	}
}

Class UpgradeItemSpecial : UpgradeItem
{
	Class<Inventory> RealItem;
	Class<Inventory> SelfName;
	property RealItem: RealItem;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		SelfName = GetClass();
	}
	
	override void UpdateItem()
	{
		if (!Owner || GetClass() == "UpgradeItemSpecial")
			return;
			
		if (RealItem && SelfName)
		{
			Owner.A_SetInventory(RealItem,Owner.CountInv(SelfName));
		}
	}
	
	override void DepleteOrDestroy()
	{
		if (GetClass() == "UpgradeItemSpecial")
			return Super.DepleteOrDestroy();
		if (Owner)
		{
			Owner.A_SetInventory(RealItem,0);
		}
		return Super.DepleteOrDestroy();
	}
}

//Strangely, this doesn't work the way it's supposed to. Oh well.
Class D4HealthUpgrade : UpgradeStamina
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 1;
		Inventory.MaxAmount 100;
	}
	
	override bool TryPickup (in out Actor toucher)
	{
		if (toucher.player == NULL)
			return false;
			
		int amt = 0;
		
		int inv = toucher.player.mo.stamina;
		int in2 = toucher.CountInv("D4Stamina");
		
		toucher.player.mo.stamina = Max(inv, in2);
		if (toucher.player.mo.stamina >= MaxAmount)
			toucher.player.mo.stamina = MaxAmount;
			
		toucher.GiveBody (-100);
		GoAwayAndDie();
		return true;
	}
}

Class CashPercentBonus : UpgradeItem
{
	Default 
	{
		UpgradeItem.Cost 3000;
		UpgradeItem.Cost2 7500;
		UpgradeItem.Cost3 12000;
		UpgradeItem.Cost4 20000;
		UpgradeItem.Quantity 10;
		UpgradeItem.Quantity2 20;
		UpgradeItem.Quantity3 30;
		UpgradeItem.Quantity4 40;
		Inventory.MaxAmount 1000000;
		Inventory.InterhubAmount 1000000;
		+INVENTORY.IGNORESKILL
	}
}
 
// Environment protection

Class ProtectionBonus1Real : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 1.0;
		DamageFactor "Drowning",0.5;
		DamageFactor "Slime", 	0.5;
		DamageFactor "Fire", 	0.5;	// for lava
		DamageFactor "Crush", 	0.5;
		DamageFactor "Falling", 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Powerup.Duration 1000000;
		Inventory.InterhubAmount 1;
		Inventory.MaxAmount 1;
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		EffectTics = 1000000;
	}
}

// AoE damage protection
Class ProtectionBonus3Real : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 1.0;
		RadiusDamageFactor 0.5;
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Powerup.Duration 0x7FFFFFFD;
		Inventory.InterhubAmount 1;
		Inventory.MaxAmount 1;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		EffectTics = 1000000;
	}
}

//==============================================================================
//==============================================================================
//	Weapon Upgrades
//==============================================================================
//==============================================================================

Class AssaultRifleMod1 : UpgradeItem 			{ Default {	UpgradeItem.Cost 3000;	}}	// Scope mod
Class AssaultRifleMod2 : UpgradeItem 			{ Default {	UpgradeItem.Cost 4000;	}}	// mini missiles mod
Class BFGUpgrade1 : UpgradeItem	// Ammo Capacity
{
	Default 
	{
		UpgradeItem.Cost 10000;
	}
	
	// Up the max amount.
	override void UpdateItem()
	{
		if (Owner)
		{
			let inv = Owner.FindInventory("D4BFGAmmo");
			if (inv)
			{
				inv.MaxAmount = 4;
				inv.InterHubAmount = 4;
			}
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			let inv = Owner.FindInventory("D4BFGAmmo");
			if (inv)
			{
				inv.MaxAmount = 3;
				inv.InterHubAmount = 3;
			}
		}
		Super.DepleteOrDestroy();
	}
}
Class BFGUpgrade2 : UpgradeItem 				{ Default { UpgradeItem.Cost 20000; }} 	// Alt Fire
Class BFGUpgrade3 : UpgradeItem 				{ Default { UpgradeItem.Cost 10000; }}	// Projectile; Speed
Class BFGUpgrade4 : UpgradeItem 				{ Default { UpgradeItem.Cost 10000; }}	// Redirector
Class CarrionUpgradePickup : UpgradeItem 		{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeAmmo : UpgradeItem 			{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeStun : UpgradeItem 			{ Default { UpgradeItem.Cost 6666; }}
Class CarrionUpgradeTime : UpgradeItem 			{ Default { UpgradeItem.Cost 6666; }}
Class ChaingunMod1 : UpgradeItem				{ Default { UpgradeItem.Cost 6000; }}	// rotator
Class ChaingunMod2 : UpgradeItem				{ Default { UpgradeItem.Cost 8000; }}	// turret
Class GaussCannonMod1 : UpgradeItem 			{ Default { UpgradeItem.Cost 8000; }}	// precision shot
Class GaussCannonMod2 : UpgradeItem				{ Default { UpgradeItem.Cost 10000; }}	// siege mode
Class LGUpgradeRange : UpgradeItem				{ Default { UpgradeItem.Cost 4000; }}
Class LGUpgradeAmmo : UpgradeItem				{ Default { UpgradeItem.Cost 2000; }}
Class LGUpgradeDamage : UpgradeItem				{ Default { UpgradeItem.Cost 9000; }}
Class LGUpgradeAltFire : UpgradeItem			{ Default { UpgradeItem.Cost 9000; }}
Class PistolUpgradeAutomatic : UpgradeItem		{ Default { UpgradeItem.Cost 2000; }}
Class PistolUpgradeAltDamage : UpgradeItem		{ Default { UpgradeItem.Cost 4000; }}
Class PistolUpgradeAltCharge : UpgradeItem		{ Default { UpgradeItem.Cost 4000; }}
Class PistolUpgradeDamage : UpgradeItem			{ Default { UpgradeItem.Cost 2500; }}
Class PistolUpgradeLance : UpgradeItem			{ Default { UpgradeItem.Cost 12000; UpgradeItem.Requirements2 "PistolUpgradeAltCharge", 1, "PistolUpgradeAltDamage", 1; }}
Class PlasmaRifleMod1 : UpgradeItem				{ Default { UpgradeItem.Cost 5000; }}	// heat shot upgrade
Class PlasmaRifleMod2 : UpgradeItem 			{ Default { UpgradeItem.Cost 3000; }}	// electric grenade upgrade
Class RepeaterUpgradePiercing : UpgradeItem 	{ Default { UpgradeItem.Cost 4000; }}	// Upgrade 1: Bullets pierce 1 Monster;
Class RepeaterUpgradeDamage : UpgradeItem 		{ Default { UpgradeItem.Cost 4000; }}	// Upgrade 2: increased primary fire damage
Class RepeaterUpgradeAltDamage : UpgradeItem 	{ Default { UpgradeItem.Cost 3000; }}	// Upgrade 3: increased alt fire burn damage
Class RepeaterUpgradeAltAmmo : UpgradeItem		{ Default { UpgradeItem.Cost 3000; }}	// Upgrade 4: Decrease ammo requirement for alt fire
Class RocketLauncherMod1 : UpgradeItem			{ Default { UpgradeItem.Cost 5000; }}	// detonate
Class RocketLauncherMod2 : UpgradeItem 			{ Default { UpgradeItem.Cost 5000; }}	// lock on
Class ShotgunMod1 : UpgradeItem 				{ Default { UpgradeItem.Cost 3000; }}	// Triple shot
Class ShotgunMod2 : UpgradeItem 				{ Default { UpgradeItem.Cost 3000; }}	// grenade mod
Class StaticUpgrade1 : UpgradeItem 				{ Default { UpgradeItem.Cost 2500; }}
Class StaticUpgrade2 : UpgradeItem 				{ Default { UpgradeItem.Cost 5000;	UpgradeItem.Requirements1 "StaticUpgrade1", 1; }}
Class StaticUpgrade3 : UpgradeItem 				{ Default { UpgradeItem.Cost 7500;	UpgradeItem.Requirements1 "StaticUpgrade2", 1; }}
Class StaticUpgrade4 : UpgradeItem 				{ Default { UpgradeItem.Cost 10000;	UpgradeItem.Requirements1 "StaticUpgrade3", 1; }}
Class SSGUpgrade1 : UpgradeItem					{ Default { UpgradeItem.Cost 2000; }}
Class SSGUpgrade2 : UpgradeItem					{ Default { UpgradeItem.Cost 2500; }}
Class SSGUpgrade3 : UpgradeItem					{ Default { UpgradeItem.Cost 4000; }}
Class SSGUpgrade4 : UpgradeItem					{ Default { UpgradeItem.Cost 10000;	UpgradeItem.Requirements2 "SSGUpgrade1", 1, "SSGUpgrade2", 1; }}
Class VortexUpgradeDamage : UpgradeItem 		{ Default { UpgradeItem.Cost 4000; }}
Class VortexUpgradeAmmo : UpgradeItem 			{ Default { UpgradeItem.Cost 6000; }}
Class VortexUpgradeAltSpeed : UpgradeItem 		{ Default { UpgradeItem.Cost 2500; }}
Class VortexUpgradeAltPierce : UpgradeItem 		{ Default { UpgradeItem.Cost 3500; }}

//==============================================================================
//==============================================================================
//	Suit Upgrades
//==============================================================================
//==============================================================================
// Environmental Protection
Class ProtectionBonus1 : UpgradeItemSpecial		{ Default {	UpgradeItem.Cost 5000; UpgradeItemSpecial.RealItem "ProtectionBonus1Real";	}}
// Self Protection
Class ProtectionBonus2 : UpgradeItem 			{ Default {	UpgradeItem.Cost 7500;	}}
// AoE Protection
Class ProtectionBonus3 : UpgradeItemSpecial		{ Default {	UpgradeItem.Cost 10000; UpgradeItemSpecial.RealItem "ProtectionBonus3Real";	}	}

Class ProtectionBonus : UpgradeItem
{
	Default
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 7500;
		UpgradeItem.Cost3 10000;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		UpgradeItem.Desc1 "+50% Environment Damage Reduction";
		UpgradeItem.Desc2 "+50% Self Damage Reduction";
		UpgradeItem.Desc3 "+50% Radius Damage Reduction";
		Inventory.MaxAmount 3;
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("ProtectionBonus");
		Switch (amt)
		{
			Case 1: Desc = Desc1; break;
			Case 2: Desc = Desc2; break;
			Case 3: Desc = Desc3; break;
		}
		Super.PrintDesc();
	}
	override void UpdateItem()
	{
		if (Owner)
		{
			int amt = Owner.CountInv("ProtectionBonus");
			if (amt > 0)	{ Owner.A_SetInventory("ProtectionBonus1Real",1);	}
			if (amt > 1)	{ Owner.A_SetInventory("ProtectionBonus2",1);		}
			if (amt > 2)	{ Owner.A_SetInventory("ProtectionBonus3Real",1);	}
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			Owner.A_SetInventory("ProtectionBonus1Real",0);
			Owner.A_SetInventory("ProtectionBonus2",0);
			Owner.A_SetInventory("ProtectionBonus3Real",0);
		}
		Super.DepleteOrDestroy();
	}
}

Class D4HigherJump : UpgradeItem 				{ Default { UpgradeItem.Cost 6000;	}}
Class D4MultiJump : UpgradeItem 				{ Default { UpgradeItem.Cost 8000;	Inventory.MaxAmount 3; }}
Class D4AirControl : UpgradeItem 				{ Default { UpgradeItem.Cost 10000;	}}

Class D4AirUpgrade : UpgradeItem
{
	Default
	{
		UpgradeItem.Cost 6000;
		UpgradeItem.Cost2 8000;
		UpgradeItem.Cost3 10000;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		UpgradeItem.Desc1 "Higher Jump";
		UpgradeItem.Desc2 "Triple Jump";
		UpgradeItem.Desc3 "Air Control";
		Inventory.MaxAmount 3;
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4AirUpgrade");
		Switch (amt)
		{
			Default:
			Case 1: Desc = Desc1; break;
			Case 2: Desc = Desc2; break;
			Case 3: Desc = Desc3; break;
		}
		Super.PrintDesc();
	}
	
	override void UpdateItem()
	{
		if (Owner)
		{
			int amt = Owner.CountInv("D4AirUpgrade");
			if (amt > 0)	{ Owner.A_SetInventory("D4HigherJump",1);	}
			if (amt > 1)	{ Owner.A_SetInventory("D4MultiJump",3);	}
			if (amt > 2)	{ Owner.A_SetInventory("D4AirControl",1);	}
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner)
		{
			Owner.A_SetInventory("D4HigherJump",0);
			Owner.A_SetInventory("D4MultiJump",2);
			Owner.A_SetInventory("D4AirControl",0);
		}
		Super.DepleteOrDestroy();
	}
}

Class D4Stamina : UpgradeItem
{ 
	Default 
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 10000;
		UpgradeItem.Cost3 20000;
		UpgradeItem.Quantity 25;
		UpgradeItem.Quantity2 50;
		UpgradeItem.Quantity3 100;
		UpgradeItem.Desc1 "+25 Max Health";
		UpgradeItem.Desc2 "+50 Max Health";
		UpgradeItem.Desc3 "+100 Max Health";
		UpgradeItem.Desc4 "WHAAAAAAAT!?";
		Inventory.MaxAmount 100;
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4Stamina");
			 if (amt <= 25) 	Desc = Desc1;
		else if (amt <= 50)		Desc = Desc2;
		else					Desc = Desc3;
		
		Super.PrintDesc();
	}
	override void UpdateItem()
	{
		if (Owner)
		{
			Owner.A_SetInventory("D4HealthUpgrade",0);
			Owner.A_SetInventory("D4HealthUpgrade",Owner.CountInv("D4Stamina"));
		}
	}
	override void DepleteOrDestroy()
	{
		if (Owner && Owner.player)
		{
			Owner.player.mo.stamina -= Owner.CountInv("D4HealthUpgrade"); 
			Owner.A_SetInventory("D4HealthUpgrade",0);
		}
		Super.DepleteOrDestroy();
	}
}
Class D4ArmorCapRaiser : UpgradeItem
{ 
	Default 
	{
		UpgradeItem.Cost 5000;
		UpgradeItem.Cost2 10000;
		UpgradeItem.Cost3 15000;
		UpgradeItem.Quantity 25;
		UpgradeItem.Quantity2 50;
		UpgradeItem.Quantity3 100;
		UpgradeItem.Desc1 "Armor Capacity +25\nChainsaw Alt: + 0 to 2 Armor Shards";
		UpgradeItem.Desc2 "Armor Capacity +50\nChainsaw Alt: + 0 to 4 Armor Shards";
		UpgradeItem.Desc3 "Armor Capacity +100\nChainsaw Alt guarantees minimum 2 armor shards";
		Inventory.MaxAmount 100;
	}
	
	override void PrintDesc()
	{
		if (Owner)
		{
			int amt = Owner.CountInv("D4ArmorCapRaiser");
				 if (amt >= 100)	Desc = Desc3;
			else if (amt >= 50)		Desc = Desc2;
			else					Desc = Desc1;
		}
		Super.PrintDesc();
	}
}

Class D4CrateUpgrade : UpgradeItem			
{ 
	Default 
	{
		UpgradeItem.Cost 999;
		UpgradeItem.Cost2 9999;
		UpgradeItem.Cost3 19999;
		UpgradeItem.Quantity 1;
		UpgradeItem.Quantity2 2;
		UpgradeItem.Quantity3 3;
		UpgradeItem.Desc1 "Heavy Crates\nGuarantees larger quality items";
		UpgradeItem.Desc2 "Sensor Crates\nCrates are more situationally aware";
		UpgradeItem.Desc3 "Weapon Crates\nCrates may contain weapons";
		Inventory.MaxAmount 3; 
	}
	
	override void PrintDesc()
	{
		int amt = Owner.CountInv("D4CrateUpgrade");
			 if (amt == 1) 		Desc = Desc1;
		else if (amt == 2)		Desc = Desc2;
		else if (amt == 3)		Desc = Desc3;
		else					Desc = "This shouldn't have happened...";
		
		Super.PrintDesc();
	}
}

//==============================================================================
//==============================================================================
//	Powerup Upgrades
//==============================================================================
//==============================================================================

Class D4RegenUpgrade1 : UpgradeItem 			{ Default { UpgradeItem.Cost 12000; }}	// Armor Regen
Class D4RegenUpgrade2 : UpgradeItem 			{ Default { UpgradeItem.Cost 15000;	
									UpgradeItem.Requirements1 "D4RegenUpgrade1", 1; }}	// Dual Regen
Class D4RegenUpgrade3 : UpgradeItem 			{ Default { UpgradeItem.Cost 25000; }}	// Double Regen Rate
Class D4RegenUpgrade4 : UpgradeItem 			{ Default { UpgradeItem.Cost 15000; }}	// Max health +100 (Soulsphere Only)
Class D4MegachargeUpgrade1 : UpgradeItem		{ Default { UpgradeItem.Cost 10000; }}	// +1% resist, max 25%
Class D4MegachargeUpgrade2 : UpgradeItem		{ Default { UpgradeItem.Cost 20000; }}	// time stop
Class D4DoomDollUpgrade1 : UpgradeItem			{ Default { UpgradeItem.Cost 15000; }}	// + run & jump speed on use
Class D4DoomDollUpgrade2 : UpgradeItem			{ Default { UpgradeItem.Cost 20000; }}	// powerful explosion on fist bump
Class D4RuneUpgrade1 : UpgradeItem				{ Default { UpgradeItem.Cost 5000; }}	// Identifiable runes
Class D4RuneUpgrade2 : UpgradeItem				{ Default { UpgradeItem.Cost 15000; }}	// same type demon runes refresh current rune
Class D4RuneUpgrade3 : UpgradeItem				{ Default { UpgradeItem.Cost 20000; }}	// delimited spawning
Class D4RuneUpgrade4 : UpgradeItem				{ Default { UpgradeItem.Cost 10000; }}	// Damage restores health
Class D4PentagramUpgrade1 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Reflect projectiles
Class D4PentagramUpgrade2 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Move through monsters
Class D4PentagramUpgrade3 : UpgradeItem			{ Default { UpgradeItem.Cost 6666; }}	// Thorns
Class D4PentagramUpgrade4 : UpgradeItem			{ Default { UpgradeItem.Cost 9999; }}	// Unkillable
