Struct ItemsToSave
{
	Array<String> ItemList;
	bool Init(bool chain = false, Actor plr = null)
	{
		static const String SavedItemsStr[] =
		{	
			"D4DCash",
			"AssaultRifleMod1", //1
			"AssaultRifleMod2",
			"ChaingunMod1",
			"ChaingunMod2",
			"GaussCannonMod1",
			"GaussCannonMod2",
			"PlasmaRifleMod1",
			"PlasmaRifleMod2",
			"RocketLauncherMod1",
			"RocketLauncherMod2",
			"ShotgunMod1",
			"ShotgunMod2",
			"SSGUpgrade1",
			"SSGUpgrade2",
			"SSGUpgrade3",
			"SSGUpgrade4",
			"PistolUpgradeAutomatic",
			"PistolUpgradeAltDamage",
			"PistolUpgradeAltCharge",
			"PistolUpgradeDamage",
			"PistolUpgradeLance",
			"BFGUpgrade1",
			"BFGUpgrade2",
			"BFGUpgrade3",
			"BFGUpgrade4", // 25
			"StaticUpgrade1",
			"StaticUpgrade2",
			"StaticUpgrade3",
			"StaticUpgrade4",
			"SovietActive",
			"SovietToken",
			"LGUpgradeAmmo",
			"LGUpgradeRange",
			"LGUpgradeDamage",
			"LGUpgradeAltFire",
			"VortexUpgradeDamage",
			"VortexUpgradeAmmo",
			"VortexUpgradeAltSpeed",
			"VortexUpgradeAltPierce",
			"RepeaterUpgradePiercing",
			"RepeaterUpgradeDamage",
			"RepeaterUpgradeAltDamage",
			"RepeaterUpgradeAltAmmo",
			"D4CarrionCannon",
			"D4CarrionToken",
			"CarrionLevel",
			"CarrionUpgradePickup",
			"CarrionUpgradeAmmo",
			"CarrionUpgradeStun",
			"CarrionUpgradeTime",
			"DollUses",
			"FragGrenadePickup",
			"HoloGrenadePickup",
			"SyphonGrenadePickup",
			"FragGrenadeSelected",
			"MarineHoloSelected",
			"SyphonGrenadeSelected",
			"D4Stamina",
			"ProtectionBonus",
			"ProtectionBonus1Real",
			"ProtectionBonus2",
			"ProtectionBonus3Real",
			"D4ArmorCapRaiser",
			"D4AirUpgrade",
			"D4AirControl",
			"D4HigherJump",
			"D4MultiJump",
			"D4CrateUpgrade",
			"CashPercentBonus",
			"D4MegasphereDamageReducer",
			"D4MegachargeUpgrade1",
			"D4MegachargeUpgrade2",
			"D4DoomDollUpgrade1",
			"D4DoomDollUpgrade2",
			"D4RegenUpgrade1",
			"D4RegenUpgrade2",
			"D4RegenUpgrade3",
			"D4RegenUpgrade4", // 77
			"D4PentagramUpgrade1",
			"D4PentagramUpgrade2",
			"D4PentagramUpgrade3",
			"D4PentagramUpgrade4",
			"D4RuneUpgrade1",
			"D4RuneUpgrade2",
			"D4RuneUpgrade3",
			"D4RuneUpgrade4" // 85
		};
		ItemList.Clear();
		
		if (chain)
		{
			if (!plr) return false;
			int amt;
			for (int i = 1; i < 26; i++)
			{
				Class<Inventory> check = SavedItemsStr[i];
				if (check && plr.CountInv(check))
					amt++;
			}
			return (amt >= 25);
		}
		
		for (int i = 0; i < SavedItemsStr.Size(); i++)
		{
			ItemList.Push (SavedItemsStr[i]);
		}
		return false;
	}
};
/*
extend class Doom4Player
{
	Weapon BestWeapon(Class<Ammo> ammotype)
	{
		Weapon bestMatch = NULL;
		int bestOrder = int.max;
		Inventory item;
		bool tomed = !!FindInventory ('PowerWeaponLevel2', true);

		// Find the best weapon the player has.
		for (item = Inv; item != NULL; item = item.Inv)
		{
			let weap = Weapon(item);
			if (weap == null)
				continue;

			// Don't select it if it's worse than what was already found.
			if (weap.SelectionOrder > bestOrder)
				continue;

			// Don't select it if its primary fire doesn't use the desired ammo.
			if (ammotype != NULL &&
				(weap.Ammo1 == NULL ||
				 weap.Ammo1.GetClass() != ammotype))
				continue;

			// Don't select it if the Tome is active and self isn't the powered-up version.
			if (tomed && weap.SisterWeapon != NULL && weap.SisterWeapon.bPowered_Up)
				continue;

			// Don't select it if it's powered-up and the Tome is not active.
			if (!tomed && weap.bPowered_Up)
				continue;

			// Don't select it if there isn't enough ammo to use its primary fire.
			if (!(weap.bAMMO_OPTIONAL) &&
				!weap.CheckAmmo (Weapon.PrimaryFire, false))
				continue;

			// Don't select if if there isn't enough ammo as determined by the weapon's author.
			if (weap.MinSelAmmo1 > 0 && (weap.Ammo1 == NULL || weap.Ammo1.Amount < weap.MinSelAmmo1))
				continue;
			if (weap.MinSelAmmo2 > 0 && (weap.Ammo2 == NULL || weap.Ammo2.Amount < weap.MinSelAmmo2))
				continue;

			// This weapon is usable!
			bestOrder = weap.SelectionOrder;
			bestMatch = weap;
		}
		return bestMatch;
	}
}
*/