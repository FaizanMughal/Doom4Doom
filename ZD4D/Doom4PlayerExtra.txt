extend class Doom4Player
{
	PlayerInfo GetRealPlayer()
	{
		let plr = player;
		return (plr && plr.mo && plr.mo == self && 
				!plr.mo.alternative && !plr.mo.FindInventory('PowerMorph',true) &&
				level.mapname != 'TITLEMAP') ? plr : null;
	}
		
	
	//==========================================================================
	//
	// Equipment stuff
	//
	//==========================================================================
	
	D4DGrenadeItem GetSelectedGrenade()
	{
		for (int i = 0; i < Doom4Player.GrenadeSelected.Size(); i++)
		{
			let inv = D4DGrenadeItem(FindInventory(Doom4Player.GrenadeSelected[i]));
			if (inv && inv.Amount > 0 && inv.Selected)
				return inv;
		}
		return null;
	}
	
	int CheckEquipmentCharge(bool checkready = false)
	{
		let gren = GetSelectedGrenade();
		if (!gren)	return -1;
		
		if (checkready)	
			return (gren.Cooldown < 1) ? 1 : 0;
		return gren.Cooldown;
	}
	
	// Sets all equipment as unselected, while the desired item becomes selected.
	bool SelectEquipment(Class<D4DGrenadeItem> item)
	{
		if (!item || !CountInv(item))	return false;
		
		bool ret;
		for (let probe = Inv; probe != null; probe = probe.Inv)
		{
			let cls = D4DGrenadeItem(probe);
			if (!cls)	continue;
			cls.Selected = (cls.GetClass() == item && cls.Amount > 0);
			ret = (!ret && cls.Selected);
		}
		return ret;
	}
	
	bool CheckGrenadeButton(bool cooldown = false)
	{
		let plr = GetRealPlayer();
		//if (plr && (plr.cmd.buttons & BT_USER1) && !(plr.oldbuttons & BT_USER1))
		if (plr && (CurInputCmds & BT_USER1) && !(OldInputCmds & BT_USER1))
		{
			return (cooldown) ? CheckEquipmentCharge(true) : true;
		}
		return false;
	}
}



Struct ItemsToSave
{
	Array<String> ItemList;
	bool Init(bool chain = false, Actor plr = null)
	{
		static const String SavedItemsStr[] =
		{	
			"D4DCash",
			"AssaultRifleMod1", //1
			"AssaultRifleMod2",
			"ChaingunMod1",
			"ChaingunMod2",
			"GaussCannonMod1",
			"GaussCannonMod2",
			"PlasmaRifleMod1",
			"PlasmaRifleMod2",
			"RocketLauncherMod1",
			"RocketLauncherMod2",
			"ShotgunMod1",
			"ShotgunMod2",
			"SSGUpgrade1",
			"SSGUpgrade2",
			"SSGUpgrade3",
			"SSGUpgrade4",
			"PistolUpgradeAutomatic",
			"PistolUpgradeAltDamage",
			"PistolUpgradeAltCharge",
			"PistolUpgradeDamage",
			"PistolUpgradeLance",
			"BFGUpgrade1",
			"BFGUpgrade2",
			"BFGUpgrade3",
			"BFGUpgrade4", // 25
			"StaticUpgrade1",
			"StaticUpgrade2",
			"StaticUpgrade3",
			"StaticUpgrade4",
			"SovietActive",
			"SovietToken",
			"LGUpgradeAmmo",
			"LGUpgradeRange",
			"LGUpgradeDamage",
			"LGUpgradeAltFire",
			"VortexUpgradeDamage",
			"VortexUpgradeAmmo",
			"VortexUpgradeAltSpeed",
			"VortexUpgradeAltPierce",
			"RepeaterUpgradePiercing",
			"RepeaterUpgradeDamage",
			"RepeaterUpgradeAltDamage",
			"RepeaterUpgradeAltAmmo",
			"D4CarrionCannon",
			"D4CarrionToken",
			"CarrionLevel",
			"CarrionUpgradePickup",
			"CarrionUpgradeAmmo",
			"CarrionUpgradeStun",
			"CarrionUpgradeTime",
			"DollUses",
			"FragGrenadePickup",
			"HoloGrenadePickup",
			"SyphonGrenadePickup",
			"FragGrenadeSelected",
			"MarineHoloSelected",
			"SyphonGrenadeSelected",
			"D4Stamina",
			"ProtectionBonus",
			"ProtectionBonus1Real",
			"ProtectionBonus2",
			"ProtectionBonus3Real",
			"D4ArmorCapRaiser",
			"D4AirUpgrade",
			"D4AirControl",
			"D4HigherJump",
			"D4MultiJump",
			"D4CrateUpgrade",
			"CashPercentBonus",
			"D4MegasphereDamageReducer",
			"D4MegachargeUpgrade1",
			"D4MegachargeUpgrade2",
			"D4DoomDollUpgrade1",
			"D4DoomDollUpgrade2",
			"D4RegenUpgrade1",
			"D4RegenUpgrade2",
			"D4RegenUpgrade3",
			"D4RegenUpgrade4", // 77
			"D4PentagramUpgrade1",
			"D4PentagramUpgrade2",
			"D4PentagramUpgrade3",
			"D4PentagramUpgrade4",
			"D4RuneUpgrade1",
			"D4RuneUpgrade2",
			"D4RuneUpgrade3",
			"D4RuneUpgrade4" // 85
		};
		ItemList.Clear();
		
		if (chain)
		{
			if (!plr) return false;
			int amt;
			for (int i = 1; i < 26; i++)
			{
				Class<Inventory> check = SavedItemsStr[i];
				if (check && plr.CountInv(check))
					amt++;
			}
			return (amt >= 25);
		}
		
		for (int i = 0; i < SavedItemsStr.Size(); i++)
		{
			ItemList.Push (SavedItemsStr[i]);
		}
		return false;
	}
};

Class OverlayBase : CustomInventory
{
	int OID;
	Property OverlayID: OID;
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}
	
	States
	{
	Use:
		TNT1 A 0
		{
			A_Overlay(invoker.OID, "Initialize");
		}
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	Initialize:
		TNT1 A 1;
		Loop;
	}
}

Class OverlayDash : OverlayBase 
{
}

Class OverlayGrenade : OverlayBase
{
}

Class OverlayLedge : OverlayBase
{
}

Class OverlayLife : OverlayBase
{
}