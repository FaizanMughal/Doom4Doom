#include "ZD4D/Doom4PlayerExtra.txt"



Class Doom4Player : PlayerPawn
{
	const DashSpeed = 30.0;
	const DamageDegree = 8;
	const ZFlagCheck =	CLOFF_ALLOWNULL|CLOFF_SKIPTARGET|CLOFF_FROMBASE|
							CLOFF_JUMPENEMY|CLOFF_JUMPFRIEND|CLOFF_JUMPOBJECT|
							CLOFF_JUMPNONHOSTILE|CLOFF_JUMP_ON_MISS;
	const MaxRoll = 0.5;
	const CannonArmX = 83.0;
	const CannonArmY = 23.0;
	const CannonDestX = 83.0;
	const CannonDestY = 23.0;
	
	static const Class<D4DGrenadeItem> GrenadeSelected[] =
	{
		"FlameThrowerPickup",
		"FragGrenadePickup",
		"SyphonGrenadePickup",
		"HoloGrenadePickup",
		"PersonalPortalPickup",
		"KineticMinePickup",
		"TeslaRocketPickup",
		"ShieldWallPickup",
		"ThreatSensorPickup",
		"ThreatScannerPickup"
	};
	
	D4DHandler Event;
	MCHandler MC;
	double UVel;
	double UZvel;
	double UHold;
	double Utime;
	double UVelx;
	double UVely;
	double Uaccx;
	double Uaccy;
	int Ulasthp;
	int Ucurrenthp;
	int UVel2; //Must be an int.
	int Uonce;
	int Uweapon;
	int UjumpsDone;
	int Ulowhp;
	int UordersJump;
	int UwasClimbing;
	int UclimbBouncePrevention;
	int GrenChargeCurrent;
	int DashTimer;
	int CountTimer;
	int CurInputCmds, OldInputCmds;
	double DashForward, DashSide, DashAngle, CurDashSpeed;
	double UOffsets;
	bool spawned;
	Class<Actor> GrenadeToFire;
	D4PlayerLineFinder LineFinder;
	Vector3 MantlePos[2];
	double MantleCos;
	bool Mantling;
	Vector3 LifePos[3], LifeVel[3];
	Vector2 LifeAP[3];
	
	// Properties
	meta bool UseLives;
	Property UseLives: UseLives;
	Default 
	{
		Doom4Player.UseLives true;
		+ALLOWPAIN
		+PLAYERPAWN.CROUCHABLEMORPH
		+NOICEDEATH
		+AIMREFLECT
		-NODROPOFF
		Speed 1;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Gravity 0.8;
		MaxDropOffHeight 32767;
		Player.DisplayName "Doom Slayer";
		Player.CrouchSprite "PLYC";
		Player.StartItem "D4Pistol";
		Player.StartItem "D4DFist";
	//	Player.StartItem "AkimboWeapon";
		Player.StartItem "TrishotClip", 3;
		Player.StartItem "D4MultiJump", 2;
		Player.StartItem "GrenadeCharge", 350;
		Player.StartItem "FlameThrowerPickup";
		Player.JumpZ 7.0;
		
		Player.ColorRange 112, 127;
		Player.ColorSet 0, "Green",         0x70, 0x7F,  0x72;
		Player.ColorSet 1, "Gray",          0x60, 0x6F,  0x62; // Called "Indigo" originally so as to have a unique initial
		Player.ColorSet 2, "Brown",         0x40, 0x4F,  0x42;
		Player.ColorSet 3, "Red",           0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.ColorSet 4, "Light Gray",    0x58, 0x67,  0x5A;
		Player.ColorSet 5, "Light Brown",   0x38, 0x47,  0x3A;
		Player.ColorSet 6, "Light Red",     0xB0, 0xBF,  0xB2;
		Player.ColorSet 7, "Light Blue",    0xC0, 0xCF,  0xC2;
		
		Player.AttackZOffset 11; //13 is perfect, but makes projectiles hit below. so A middle point to fix the hitscan attacks not hitting where they should
		Player.ViewHeight 41;

		Player.DamageScreenColor "White", 1.0, "WhiteFlashDamage";
		DamageFactor "WhiteFlashDamage", 1.0;
		DamageFactor "HoloAttract", 0;
		PainChance "HoloAttract", 0;
		
		DamageFactor "FriendBullet", 0.0;
		DamageFactor "Taunt", 0.0;
		DamageFactor "KillMe", 0.0;
		DamageFactor "Shotgun", 0.7;
		DamageFactor "Shrapnel", 0.0;
		DamageFactor "Blood", 0.5;
		DamageFactor "BlueBlood", 0.5;
		DamageFactor "GreenBlood", 0.5;
		DamageFactor "MinorHead", 0.0;
		DamageFactor "Decaptate", 0.0;
		DamageFactor "MonsterKnocked", 0.0;
		DamageFactor "MonsterBullet", 0.33;
		DamageFactor "MonsterShotgunBullet", 0.33;
		DamageFactor "MonsterCutless", 0.33;
		DamageFactor "CancelTeleportFog", 0.0;
		DamageFactor "BHFTOnBarrel", 0.0;
		DamageFactor "GibRemoving", 0.0;
		DamageFactor "HelperMarineFatallity", 0.0;
		DamageFactor "Leg", 0.0;
		DamageFactor "SpawnMarine", 0.0;
		DamageFactor "TeleportRemover", 0.0;
		DamageFactor "CauseObjectsToSplash", 0.0;
		DamageFactor "Shotgun", 0.0;
		DamageFactor "Cutless", 0.0;
		DamageFactor "SSG", 0.0;
		DamageFactor "Trample", 0.0;
		DamageFactor "bullet", 0.0;
		DamageFactor "cutless", 0.0;
		DamageFactor "shotgun", 0.0;
		DamageFactor "ssg", 0.0;
		DamageFactor "Player", 0.0;
		DamageFactor "Players", 0.0;
		DamageFactor "PlayerDevBall", 0.0;
		DamageFactor "PlayerDevBall2", 0.0;
		DamageFactor "PlayerDevTracer", 0.0;
		DamageFactor "PlayerExplosive", 0.0;
		DamageFactor "PlayerDTRG", 0.0;
		DamageFactor "PDTBFG", 0.0;
		DamageFactor "PDTBFGTracer", 0.0;
		DamageFactor "LegendaryPlayer", 0.0;
		DamageFactor "LegendaryGuruPlayer", 0.0;
		DamageFactor "Stunner", 0.5;
		DamageFactor "Nope", 0.0;
		PainChance "SpawnMarine", 0;
		PainChance "Leg", 0;
		PainChance "Taunt", 0;
		PainChance "FriendBullet", 0;
		PainChance "KillMe", 0;
		PainChance "Shrapnel", 0;
		PainChance "MinorHead", 0;
		PainChance "Decaptate", 0;
		PainChance "MonsterKnocked", 0;
		PainChance "CancelTeleportFog", 0;
		PainChance "BHFTOnBarrel", 0;
		PainChance "GibRemoving", 0;
		PainChance "HelperMarineFatallity", 0;
		PainChance "TeleportRemover", 0;
		PainChance "CauseObjectsToSplash", 0;
		PainChance "HoloAttract", 0;
		Species "Marines";
		+THRUSPECIES
		+MTHRUSPECIES
	}	
	States
	{
	Teleport:
		PLAY A 0
		{
			if (GetRealPlayer())
			{
				A_Overlay(Overlay_DashManager, "Overlay.DashManager", false);
				A_OverlayFlags(Overlay_DashManager, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
			}
		}
	Spawn:
		PLAY A -1 NoDelay
		{
			if (GetRealPlayer())
			{
				A_Overlay(Overlay_DashManager, "Overlay.DashManager", true);
				A_Overlay(Overlay_UtilityManager, "Overlay.UtilityManager", true);
				A_Overlay(Overlay_LedgeGrab,"Overlay.LedgeGrab",true);
				A_Overlay(Overlay_LifeRecorder, "Overlay.LifeRecorder", true);
			//	A_Overlay(99,"Overlay.Debug",true);
				A_OverlayFlags(Overlay_DashManager, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
				A_OverlayFlags(Overlay_UtilityManager, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
				A_OverlayFlags(Overlay_LedgeGrab, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
				A_OverlayFlags(Overlay_LifeRecorder, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
			}
		}
		Loop;
	//==========================================================================
	// Overlay:			Life Recorder
	// Records position, velocity, angle, and pitch every second for respawns.
	//==========================================================================
	Overlay.LifeRecorder:
		// When starting a new map, clear out the old data.
		M666 A 0 
		{
			for (int i = 0; i < LifePos.Size(); i++)
			{
				LifePos[i] = Pos;
				LifeVel[i] = Vel;
				LifeAP[i] = (Angle,Pitch);
			}
		}
		// Now pass each second along the arrays, except for the first
		// index (0). 
		M666 A 35
		{
			for (int i = LifePos.Size() - 1; i > 0; i--)
			{
				int j = i - 1;
				LifePos[i] = LifePos[j];
				LifeVel[i] = LifeVel[j];
				LifeAP[i] = LifeAP[j];
			}
			LifePos[0] = Pos;
			LifeVel[0] = Vel;
			LifeAP[0] = (Angle,Pitch);
		}
		Wait;
	//==========================================================================
	// Overlay:			Dash Manager
	// Deals with fast movement in a direction, horizontally.
	//==========================================================================
	Overlay.ResetDash:
		M666 A 0
		{
			DashTimer = 0;
			DashAngle = 0;
		}
	Overlay.DashManager:
		M666 A 1
		{
			if (!player)	return ResolveState("Null");
			
			DashAngle = 0;
			
			// If we don't 
			if (!CountInv("D4Dash"))
			{
				DashTimer = 1;
				A_OverlayFlags(OverlayID(), PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
				A_SetTics(17);
				return ResolveState(null);
			}
			if (DashTimer > 1) 
				DashTimer--; // Still waiting.
			else if (DashTimer == 1)
			{
				if (bONMOBJ || pos.z <= GetZAt() || A_CheckFloor("Null") ||
					(player.cheats & (CF_FLY|CF_NOCLIP2)))
					DashTimer = 0; // Can dash.
			}
			else if (DashTimer == -1)
			{
				int btns = GetPlayerInput(MODINPUT_BUTTONS);
				bool forward = (btns & BT_FORWARD);
				bool backward = (btns & BT_BACK);
				bool left = (btns & BT_MOVELEFT);
				bool right = (btns & BT_MOVERIGHT);
				if (forward || backward || left || right)
				{
					if (forward != backward && left != right)
					{
						if (forward)
						{
							DashAngle = 0;
							if (right != left)
								DashAngle += (left) ? 45 : -45;
							 
						}
						else
						{
							DashAngle = 180;
							if (right != left)
								DashAngle += (left) ? -45 : 45;
						}
					}
					else if (forward != backward || right != left)
					{
						if (forward != backward)
						{
							DashAngle = (backward) ? 180 : 0;
						}
						else if (right != left)
						{
							DashAngle = (left) ? 90 : -90;
						}
					}
					else
					{
						return ResolveState(null);
					}
					
					// Finally, check to make sure our desired angle isn't already
					// going the speed of stupid - NASCAR style. =B
					// Particularly, within 22.5 degrees.
					CurDashSpeed = FindInventory("PowerSpeed", true) ? DashSpeed * 1.5 : DashSpeed;
					if (Vel.XY.Length() > CurDashSpeed)
					{
						double VelAng = VectorAngle(vel.x, vel.y);
						DashAngle = Normalize180(DashAngle);
						if (AbsAngle(VelAng,DashAngle + Angle) < 22.5)
							return ResolveState(null);
					}
					DashTimer = 6;
					DashAngle += Angle;
					return ResolveState("Overlay.Dashing");
				}
				else DashTimer = 0;
			}
			return ResolveState(null);
		}
		Wait;
	Overlay.Dashing:
		M666 AAAAAA 1
		{
			double vz = Max(0.0, vel.z);
			CurDashSpeed = FindInventory("PowerSpeed", true) ? DashSpeed * 1.5 : DashSpeed;
			Vel3DFromAngle(CurDashSpeed, DashAngle, 0);
			vel.z = vz;
		}
		M666 A 1
		{
			StateLabel next = "Overlay.DashManager";
			
			// If not teleported (xy will 0 out... I think), not on something 
			// and not blocked, keep boosting the player in the direction.
			if (Vel.XY != (0,0) &&
				!bONMOBJ && !A_CheckFloor("Null") && 
				!A_CheckBlock("Null",CBF_ABSOLUTEANGLE,AAPTR_DEFAULT,CurDashSpeed,0,0,DashAngle) &&
				!(player.cheats & (CF_FLY|CF_NOCLIP2)))
			{
				next = null;
				double vz = vel.z;
				Vel3DFromAngle(CurDashSpeed, DashAngle, 0);
				vel.z = vz;
			}
			return ResolveState(next);
		}
		Wait;
	//==========================================================================
	// Overlay:			Utility Items
	// Deals with grenades, flame thrower, etc.
	//==========================================================================
	Overlay.UtilityManager:
		M666 A 1
		{
			let plr = player;
			if (!plr)	return ResolveState("Null");
			
			
			bool ThrowGrenade = (plr.cmd.buttons & BT_USER1) && !(plr.oldbuttons & BT_USER1);
			let inv = GetDefaultByType("GrenadeCharge");
			int MaxAmt = inv.MaxAmount;
			
			int OID = OverlayID();
			A_OverlayFlags(OID, PSPF_ADDWEAPON|PSPF_ADDBOB|PSPF_POWDOUBLE|PSPF_CVARFAST, false);
			A_OverlayOffset(OID, -CannonArmX, -CannonArmY, WOF_INTERPOLATE);
			
			if (GrenChargeCurrent >= MaxAmt)
			{
				if (ThrowGrenade)
				{
					int size = GrenadeSelected.Size();
					for (int i = 0; i < size; i++)
					{
						let gren = D4DGrenadeItem(FindInventory(GrenadeSelected[i]));
						if (gren && gren.Amount > 0 && gren.Selected)
						{
							
							GrenadeToFire = gren.Grenade;
							return ResolveState("DeployCannon");
						}
					}
				
					A_GiveInventory("FlameThrowerPickup",1);
					let gren = D4DGrenadeItem(FindInventory("FlameThrowerPickup"));
					if (gren)	
					{
						gren.Selected = true;
						GrenadeToFire = gren.Grenade;
						return ResolveState("DeployCannon");
					}
					// Shouldn't happen, but just in case.
					ACS_NamedExecute("GrenadeUnavailPrint",0,4); //print "No grenade available"
					A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				}
			}
			else if (ThrowGrenade)
			{
				ACS_NamedExecute("GrenadeUnavailPrint",0,5); //print "grenade not ready"
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);	
			}
			return ResolveState(null);
		}
		Loop;
	JustDrop:	// Simply drop in front of the player. 
		M666 A 1
		{
			Vector3 origin = Vec3Angle(radius * 2, angle, 0);
			if (!level.IsPointInLevel(origin))
				origin = pos;
				
			let gren = Spawn(GrenadeToFire, origin, ALLOW_REPLACE);
			if (gren)
			{
				gren.A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				gren.master = self;
				gren.target = self;
				gren.angle = angle;
				
				let inv = GetDefaultByType("GrenadeCharge");
				A_TakeInventory("GrenadeCharge", inv.MaxAmount, 0);
			}
		}
		Goto Overlay.UtilityManager;
	DeployCannon: // Extend the cannon into view.
		M201 A 1 
		{
			int OID = OverlayID();
			double divisor = 2.0;
			double offx = (CannonArmX / divisor);
			
			if (OverlayX(OID) + offx >= 0)
				return ResolveState("LaunchGrenade");
			
			
			double offy = (CannonArmY / divisor);
			A_OverlayOffset(OID, offx, offy, WOF_ADD|WOF_INTERPOLATE);
			return ResolveState(null);
		}
		Wait;
	LaunchGrenade: // Lob the grenade.
		M201 A 12
		{
			A_OverlayOffset(OverlayID(), 0, 0, WOF_INTERPOLATE);
			if (GrenadeToFire)
			{
				Vector3 px, py, pz, origin;
				double OffsetForward = -1.0;
				double OffsetRight = -15.0;
				double OffsetUp = 5.0;
				[px, py, pz] = MC_CoordUtil.GetAxes(Pitch,Angle,Roll);
				
				origin = Vec2OffsetZ(0,0,player.viewz) + 
					OffsetForward * px + OffsetRight * py + OffsetUp * pz;
				
				let gren = Spawn(GrenadeToFire, origin, ALLOW_REPLACE);
				if (gren)
				{
					gren.A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
					gren.master = self;
					gren.target = self;
					gren.angle = angle;
					gren.Vel3DFromAngle(gren.speed, angle, pitch);
					
					let inv = GetDefaultByType("GrenadeCharge");
					A_TakeInventory("GrenadeCharge", inv.MaxAmount, 0);
				}
			}
		}
	RetractCannon:
		M201 A 1 
		{
			int OID = OverlayID();
			double divisor = 2.0;
			double offx = (CannonArmX / divisor);
			double offy = (CannonArmY / divisor);
			if (OverlayX(OID) - offx <= CannonArmX)
			{
				return ResolveState(1);
			}
			A_OverlayOffset(OID, -offx, -offy, WOF_ADD|WOF_INTERPOLATE);
			return ResolveState(null);
		}
		Wait;
		M201 A 1 A_OverlayOffset(OverlayID(), -CannonArmX, -CannonArmY, WOF_INTERPOLATE);
		Goto Overlay.UtilityManager;
	
	//==========================================================================
	// Overlay: 		Gun Shifting (WIP)
	// Offsets the weapon whenever turning the camera angle/pitch.
	//==========================================================================
	// (Currently buggy with firing weapons. Needs more fine tuning.)
	Overlay.AnglePitch:
		M666 A 1
		{
			if (GetCvar("D4D_TurningBehavior"))
			{
				if (abs(UOffsets) < 10.0)
				{
					UOffsets += (GetPlayerInput(INPUT_YAW,DefPtr) / 32767.0) * 10.0;
					//A_LogFloat(UOffsets);
				}
				if (UOffsets != 0.0)
				{
					if (UOffsets < 1.0 && UOffsets > -1.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets = 0;
					}
					else if (UOffsets < 0.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets += 1.0;
					}
					else if (UOffsets > 0.0)
					{
						A_WeaponOffset(UOffsets,0,WOF_ADD);
						UOffsets -= 1.0;
					}
				}
			}
			else
			{	A_SetTics(35);	}
		}
		Loop;
	//==========================================================================
	// Overlay: 		Show surroundings
	// When given "ShowSurroundings" token, counts objects in two areas.
	//==========================================================================
	Overlay.Debug:
		M666 A 1
		{
			if(countInv("ShowSurroundings"))
			{
				A_SetInventory("DebugMonstersToken", countProximity("D4AbstractMonster", 2048, CPXF_ANCESTOR));
				A_SetInventory("DebugBiggiesToken",  countProximity("D4AbstractBiggie",  2048, CPXF_ANCESTOR));
				A_SetInventory("DebugBossesToken",   countProximity("D4AbstractBoss",    2048, CPXF_ANCESTOR));
				A_SetInventory("DebugMissilesToken", countProximity("D4AbstractMissile", 2048, CPXF_ANCESTOR));
			}
		}
		Loop;
	//==========================================================================
	// Overlay: 		Old Ledge Climbing
	// Monitors edge closeness and grabbing so the player can attempt mantling
	// up over them.
	//==========================================================================
	/*
		M666 A 0
		{
			if (GetCvar("D4D_AllowClimbing") == true)
			{
				UwasClimbing = CountInv("RlyClimb"); // to catch transitive states like 0->1 or 1->0
				A_SetInventory("RlyClimb",0);
				A_GiveInventory("Climbing",1);
				
				if (vel.x * vel.x + vel.y * vel.y > 4)
				{	A_SetInventory("Climbing",0);	}
				
				// Calculate a naive-derivative
				Uaccx = vel.x - UVelx;
				Uaccy = vel.y - UVely;
				
				if (Uaccx*Uaccx + Uaccy*Uaccy > 0.02)
				{	A_SetInventory("Climbing",0);	}
				
				// Update historical values
				UVelx = vel.x;
				UVely = vel.y;
				
				// Abort if way forward is free
				if (!A_CheckBlock("Null", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,0))
				{
					// "Overlay.LedgeGrab.ForwardFail"
					//A_Log("fail: forward free");
					A_SetInventory("Climbing",0);
				}
				
				// Also suppress initial instability
				if (UclimbBouncePrevention > 0) 
				{
					//A_LogInt(UclimbBouncePrevention);
					A_GiveInventory("Climbing", UclimbBouncePrevention--);
				}
				
				if (!((GetPlayerInput(MODINPUT_BUTTONS)  == BT_FORWARD) &&	// Abort if doing anything except walking forward
					(GetPlayerInput(MODINPUT_OLDBUTTONS) == BT_FORWARD)))
				{	A_SetInventory("Climbing",0);	}
				
				if ((pitch >= 0) && (pos.z == floorz)) // Abort if not looking upward when grounded
				{	A_SetInventory("Climbing",0);	}
				
				return ResolveState(1);
			}
			bSlidesOnWalls = true;
			return ResolveState("Overlay.LedgeGrab");
		}
		M666 A 0 A_JumpIfInventory("Climbing", 1, "Overlay.LedgeGrab.TryClimb");
		M666 A 0 {bSlidesOnWalls = true;}
		Loop;
		*/
	Overlay.LedgeGrab:
		M666 A 1 ;
		M666 A 0
		{
			int waitTics = 14;
			if (!player || !GetCvar("D4D_AllowClimbing"))
			{
				A_SetTics(waitTics);
			}
			else
			{
				if (pitch >= 0)	return;
				if (vel.XY dot vel.XY > (4 ** 2)) return;
				if (!((GetPlayerInput(MODINPUT_BUTTONS) == BT_FORWARD) ||
					(GetPlayerInput(MODINPUT_OLDBUTTONS) == BT_FORWARD)))
					return;
					
				int DistCheck = 24;
				double newfloor = GetZAt(DistCheck,0,0);
				double newceiling = GetZAt(DistCheck,0,0,GZF_CEILING);
				double ledgedist = abs(newfloor - (pos.z + 36));
				// if player is below new floor by no more than ledgedist units
				// and can actually fit inside of it, mantle over.
				
				if ((ledgedist > 0) && (ledgedist <= DistCheck) &&
					(newfloor + height <= ceilingz) &&
					(newceiling - newfloor >= height))
				{
					bSlidesOnWalls = false;
					
					Vector3 np = Vec3Angle(DistCheck,angle,0);
					np.z = newfloor;
					
					if (D4D_Utility.AdjustToLedge(self, np, DistCheck * 2))
					{
						vel.z = 0;
					}
					A_SetTics(waitTics);
					bSlidesOnWalls = true;
				}
			}
		}
		Loop;
	Overlay.Mantling:
		TNT1 A 1
		{
			StateLabel next = null;
			if (MantleCos > 0)
				MantleCos -= 10;
			else 
			{
				A_PlaySound("Doom4/Player/Land");
				next = "MantleDone";
			}
			
			Vector3 Travel = MC_VectorUtil.LerpVec3(MantlePos[0], MantlePos[1], cos(MantleCos));
			SetOrigin(Travel, true);
			return ResolveState(next);
		}
		Wait;
	MantleDone:
		TNT1 A 14;
		Goto Overlay.LedgeGrab;
	/*	
		
	Overlay.LedgeGrab.TryClimb:
		//M666 A 0; //A_Log("tryclimb")
		// Fail if way forward is free
		//M666 A 0; 
		// Succeed if way forward is free anywhere up to a player height and a bit more above
		Goto Overlay.LedgeGrab.TryClimb2;
		
	Overlay.LedgeGrab.TryClimb2:
		//M666 A 0; //A_Log("tryclimb2")
		M666 A 0 A_Warp(AAPTR_DEFAULT, 24,0,25 , 0, WARPF_TESTONLY, "Overlay.LedgeGrab.DoClimb2");
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,25);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb3", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,25);
		Goto Overlay.LedgeGrab.DoClimb2;
	Overlay.LedgeGrab.TryClimb3:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*3/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb4", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*3/6);
		Goto Overlay.LedgeGrab.DoClimb3;
	Overlay.LedgeGrab.TryClimb4:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*4/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb5", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*4/6);
		Goto Overlay.LedgeGrab.DoClimb4;
	Overlay.LedgeGrab.TryClimb5:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*5/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb6", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*5/6);
		Goto Overlay.LedgeGrab.DoClimb5;
	Overlay.LedgeGrab.TryClimb6:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*6/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb7", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*6/6);
		Goto Overlay.LedgeGrab.DoClimb6;
	Overlay.LedgeGrab.TryClimb7:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*7/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.TryClimb8", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*7/6);
		Goto Overlay.LedgeGrab.DoClimb7;
	Overlay.LedgeGrab.TryClimb8:
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab.UpwardFail", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,height*8/6);
		M666 A 0 A_CheckBlock("Overlay.LedgeGrab", CBF_DROPOFF, AAPTR_DEFAULT, 20,0,height*8/6);
		Goto Overlay.LedgeGrab.DoClimb8;
		
	Overlay.LedgeGrab.UpwardFail:
		M666 A 0; //A_Log("fail: upward blocked")
		Goto Overlay.LedgeGrab;
		
	Overlay.LedgeGrab.DoClimb2:
		M666 A 0; //A_Log("doclimb2")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb3:
		M666 A 0; //A_Log("doclimb3")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb4:
		M666 A 0; //A_Log("doclimb4")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb5:
		M666 A 0; //A_Log("doclimb5")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb6:
		M666 A 0; //A_Log("doclimb6")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb7:
		M666 A 0; //A_Log("doclimb7")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb8:
		M666 A 0; //A_Log("doclimb8")
		Goto Overlay.LedgeGrab.DoClimb;
	Overlay.LedgeGrab.DoClimb:
		// transitive state detection
		M666 A 0
		{
			A_GiveInventory("RlyClimb",1);
			if(UwasClimbing == 0)
			{
				//A_Log("starting climbing");
				A_PlaySound("Doom4/Player/Climb",7);
				UclimbBouncePrevention = 5;
			}
		}
		M666 A 0
		{
			//A_Log("climbing");
			ACS_NamedExecuteAlways("SaveWeapon");
			A_GiveInventory("ClimbingHands",1);
			A_SelectWeapon("ClimbingHands");
			bSlidesOnWalls = false;
			
			if(vel.z < 0) 
			{	A_ChangeVelocity(vel.x/2,vel.y/2,vel.z/4,CVF_REPLACE); }
			if(vel.z < 5) 
			{	A_ChangeVelocity(0,0,1); }
			if(!A_CheckBlock("Overlay.LedgeGrab", CBF_DROPOFF, AAPTR_DEFAULT, 0,0,1))
			{	A_Warp(AAPTR_DEFAULT, 0,0,1, 0, WARPF_INTERPOLATE); }
			
		}
		Goto Overlay.LedgeGrab;
	*/

	See:
		PLAY ABCD 4 ;
		Loop;
		
	// These are separated for the sake of quad damage state findings.
	Missile:
		PLAY E 1;
	MissileCont:
		PLAY E 11;
		Goto Spawn;
	Melee:
		PLAY F 1 BRIGHT light("PlayerLight1");
	MeleeCont:
		PLAY F 1 bright light("PlayerLight2");
		PLAY F 1 bright light("PlayerLight3");
		PLAY F 1 bright light("PlayerLight4");
		PLAY F 1 bright light("PlayerLight5");
		PLAY F 1 bright light("PlayerLight6");
		Goto MissileCont;
	
	Pain:
		PLAY G 8 
		{
			if (CountInv("PowerInvulBase") || CountInv("PowerInvulnerable") || bInvulnerable || bNoDamage)
			{
				Ulowhp = 0;
				A_SetBlend("FFFFFF",0.15,5);
				//Just like Quake. Only happens once per two seconds.
			}
			else
			{				
				if (health <= 40)
				{
					if (Ulowhp == 0)
					{
						A_SpawnItemEx("LowHealthAlarm",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
						Ulowhp = 1;
					}
				}
				else
					Ulowhp = 0;	
			}
		}
		Goto Spawn;
	Death:
		PLAY H 0 
		{
			if (A_PlayerSkinCheck("AltSkinDeath"))
			{	return ResolveState("AltSkinDeath");	}
			return ResolveState("Death1");
		}
	Death1:
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking();
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		PLAY O 0 
		{
			if (A_PlayerSkinCheck("AltSkinXDeath"))
			{	return ResolveState("AltSkinXDeath");	}
			return ResolveState("XDeath1");
		}
	XDeath1:
		TNT1 A 1 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_XScream();
		TNT1 A 1 A_NoBlocking();
		TNT1 A -1;
		Stop;
	AltSkinDeath:
		TNT1 A 1 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_PlayerScream;
		TNT1 A 1 A_NoBlocking();
		TNT1 A -1;
		Stop;
	AltSkinXDeath:
		TNT1 A 0 A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_USEBLOODCOLOR);
		TNT1 A 1 A_PlayerScream;
		TNT1 A 0 A_NoBlocking();
		TNT1 A 1 A_SkullPop;
		TNT1 A -1;
		Stop;
	}
}

Class NewMapToken : Inventory
{	Default { Inventory.InterhubAmount 0; } }

Class LowHealthAlarm : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 20 NoDelay A_PlaySound("Doom4/Player/LowHealth",CHAN_AUTO,1,0,ATTN_NONE);
		Stop;
	}
}

Class Climbing : Inventory {}
Class RlyClimb : Inventory {}

extend class Doom4Player
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (!GetRealPlayer())
			return;
		
		
		if (self.GetClass() == "Doom4Player")
		{
			/*
			ItemsToSave ITS;
			ITS.Init();
			
			What is the point behind this? Simple. It gives
			and takes an inventory item so that it's technically 'present'
			yet at the same time acts as if it's not there, preventing it from
			being used.
			
			Why is it necessary? Because the upgrade menu cannot work without
			them. Each upgrade has a price attached to it (see Upgrades.txt)
			along with pre-requisites. This absolutely must be done or else
			the menu won't work.
			
			But this is only necessary for items that are not already present
			in the player's inventory. If they already are, it's obviously not
			in need of depleting. We just need to make sure they have the
			item available for the menu to read it, as it calls FindInventory
			which won't return null thanks to KEEPDEPLETED -- even if the 
			quantity is 0. Which is perfect.
			
			tl;dr the item's there for the menu while not being active until
			the player has 1+, nuff sed
			*/
			
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				bool doContinue = false;
				Class<UpgradeItem> Type = (Class<UpgradeItem>)(AllActorClasses[i]);
				
				if (D4DHandler.IsUpgradeBlacklisted(Type))
					continue;
					
				if (!CountInv(Type))
				{
					A_SetInventory(Type,1);
					A_SetInventory(Type,0);
				}
				
			}
			stamina = 0;
			A_SetHealth(100);
		}
	}
	
	PlayerInfo GetRealPlayer()
	{
		let plr = player;
		return (plr && plr.mo && plr.mo == self && 
				!plr.mo.alternative && !plr.mo.FindInventory('PowerMorph',true) &&
				level.mapname != 'TITLEMAP') ? plr : null;
	}
		
	
	//==========================================================================
	//
	// Equipment stuff
	//
	//==========================================================================
	
	int CheckEquipmentCharge(bool checkready = false)
	{
		let charge = FindInventory("GrenadeCharge");
		if (checkready)	
			return (charge) ? (charge.Amount >= charge.Default.MaxAmount) : 0;
		return (charge) ? charge.Amount : 0;
	}
	
	// Sets all equipment as unselected, while the desired item becomes selected.
	bool SelectEquipment(Class<D4DGrenadeItem> item)
	{
		if (!item || !CountInv(item))	return false;
		
		bool ret;
		for (let probe = Inv; probe != null; probe = probe.Inv)
		{
			let cls = D4DGrenadeItem(probe);
			if (!cls)	continue;
			cls.Selected = (cls.GetClass() == item && cls.Amount > 0);
			ret = (!ret && cls.Selected);
		}
		return ret;
	}
	
	bool CheckGrenadeButton(bool cooldown)
	{
		let plr = GetRealPlayer();
		if (plr && (plr.cmd.buttons & BT_USER1) && !(plr.oldbuttons & BT_USER1))
			return (cooldown) ? CheckEquipmentCharge(true) : true;
		return false;
	}
	
	
	
	//==========================================================================
	//
	//
	//
	//==========================================================================
	
	// [Gutawer]
	// I can never get the ** operator to actually work, so i'm using a function to do it
	double pow(double base, double power) { return exp(power * log(base)); }
	double effectSize;
	int PentaNoiseWait;
	
	// Double down on the DamageCount fade.
	override void PlayerThink()
	{
		let plr = self.player;
		
		if (plr)
		{
			if (plr.DamageCount > 0)
			{
				let invul = FindInventory("PowerInvulnerable");
				if (invul)
					plr.DamageCount = Max(0, plr.DamageCount - 6);
			}
		}
		
		Super.PlayerThink();
	}
	
	//--------------------------------------------------------------------------
	// Damage Control
	//--------------------------------------------------------------------------
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (!player || !player.mo || player.mo != self)
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		if (player.cheats & CF_GODMODE2)	return 0;
		
		bool TelefragDamage = (!bLAXTELEFRAGDMG && damage >= TELEFRAG_DAMAGE);
		bool IsInvul = (FindInventory("PowerInvulnerable", true) || bINVULNERABLE);
		if (TelefragDamage)
		{
			if (bNODAMAGE)	TelefragDamage = false;
			else if (IsInvul &&	CountInv("D4PentagramUpgrade4"))
				TelefragDamage = false;
		}
		if (!TelefragDamage && (player.cheats & CF_GODMODE) && !(flags & DMG_FORCED))
			return 0;
		if (inflictor)
		{
			inflictor.bPIERCEARMOR = false;
			if (inflictor == self || inflictor.target == self)
				flags |= DMG_NO_ENHANCE;
		}
		if (source)
		{
			source.bPIERCEARMOR = false;
			if (source == self)
			{
				int testdmg = GetModifiedDamage(damagetype, damage, true, inflictor, source, flags);
				if (testdmg > damage)
					flags |= DMG_NO_ENHANCE;
			}
		}	
		flags &= ~DMG_NO_ARMOR;
		
		let inv = BasicArmor(FindInventory("BasicArmor"));
		if (inv)
		{
			inv.MaxAbsorb = Max(inv.MaxAbsorb, inv.MaxAmount, inv.Amount, 200);
			inv.MaxFullAbsorb = Max(inv.MaxFullAbsorb, inv.MaxAmount, inv.Amount, 200);
			inv.SavePercent = 100.0;
		}
		
		// Can't touch dis.
		if (CountInv("CantTouchThis"))
		{
			bNODAMAGE = true;
			flags &= ~DMG_FORCED;
			damage = Clamp(damage, 0, TELEFRAG_DAMAGE - 1);
			TelefragDamage = false;
		}
		
		// Handle Pentagram of Protection effects here. Pretty much a copy/pasta
		// of the internal damage, including thrusting since it's needless to call
		// P_DamageMobj.
		
		if (bNODAMAGE || CountInv("CantTouchThis") || (!TelefragDamage && IsInvul))
		{
			// Mainly just doing this to play the sound effect of the pentagram.
			GetModifiedDamage(mod, damage, true);
			if (!(flags & DMG_NO_FACTOR))
				damage = ApplyDamageFactor(mod, damage);
			
			flags |= (DMG_NO_PROTECT|DMG_NO_FACTOR);
		
			if (damage < 1 && (!inflictor || (!inflictor.bCAUSEPAIN && !bALLOWPAIN)))
				return 0;
				
			if (CountInv("Invulnerability") && CountInv("D4PentagramUpgrade3") && 
				mod != 'Reflection' && damage > 0)
			{
				// Make sure never to do this to self! Otherwise, infiniloops happen.
				// Doze are bad. Weally weally bad. :(
				if (source && source != self && (source.bSHOOTABLE || source.bVULNERABLE))
				{
					source.DamageMobj(self, self, Max(1,damage * 0.2), "Reflection");
				}
				else if (inflictor && inflictor != self && (inflictor.bSHOOTABLE || inflictor.bVULNERABLE))
				{
					inflictor.DamageMobj(self, self, Max(1,damage * 0.2), "Reflection");
				}
			}
			
			DamageTypeReceived = "WhiteFlashDamage";
			player.DamageCount = Min(100, player.DamageCount + int(damage * 0.5));
			/*
			if (PentaNoiseWait < 1)
			{
				let invul = FindInventory("PowerInvulnerable", true);
				if (invul)	invul.A_PlaySound("PentagramOfProtection/Protect",CHAN_VOICE);
				else 		A_PlaySound("PentagramOfProtection/Protect",CHAN_VOICE);
				PentaNoiseWait = 70;
			}
			*/
			if (!bNODAMAGE)
			{
				Actor origin = (source && (flags & DMG_INFLICTOR_IS_PUFF)) ? source : inflictor;
				
				if (origin && !origin.bNODAMAGETHRUST && !bDONTTHRUST)
				{
					double ang = (flags & DMG_USEANGLE) ? angle : origin.AngleTo(self);
					double thrust = 32.0;
									
					if (mass > 0)
					{
						int kb = 1;
						
						if (inflictor)
						{
							kb = inflictor.projectileKickback;
						}
						else if (source)
						{
							kb = source.projectileKickback;
						}
						
						thrust = max((damage * 0.125 * kb) / mass, 0.0);
					}
					if (thrust >= 0.01)					
						Thrust(thrust, ang);	
				}
			}
			return 0;
		}
		
		
		// Don't negate stuff if it's telefrag damage, unless LAXTELEFRAGDMG is used.
		if (!TelefragDamage)
		{
			// Reduce by 1% for every megasphere we've picked up.
			// DoomDoll does not give this bonus. This is calculated separately
			// from damage protection effects and cannot be pierced unless by
			// telefrag damage.
			damage = AdjustMegasphereDamage(damage);
		}
		
		int ArmorBefore = 0;
		int ArmorAfter = 0;
		let arm = BasicArmor(FindInventory("BasicArmor"));
		if (arm)	ArmorBefore = arm.Amount;
		
		int finaldamage = damage;
		
		// Don't consume extra lives inside of a sector meant to end the level,
		// or the player has buddha (doom doll), provided they can survive it.
		// Otherwise, respawn the player if they were to die and consume a life.
		
		if (!FindInventory("PowerMorph",true) && 
			UseLives && CountInv("D4ExtraLife") > 0 && !(CurSector.Flags & Sector.SECF_ENDLEVEL))
		{
			int prev = health;
			finaldamage = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
			
			// If the player still has health due to regular buddha or flag buddha,
			// don't use the life since they're still alive. Cheat buddha is
			// exempt from this and will still consume lives, since it's a cheat.
			if (finaldamage >= prev && health > 0 && !FindInventory("PowerBuddha", true) && !bBUDDHA)
			{
				UseLife();
			}
		}
		else finaldamage = Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		
		if (arm)	ArmorAfter = arm.Amount;
		
		DamageScreenEffects(finaldamage, ArmorBefore, ArmorAfter);
		
		return finaldamage;
	}
	
	int AdjustMegasphereDamage(int damage)
	{
		let inv = FindInventory("D4MegasphereDamageReducer");
		if (inv)
		{
			int pc1 = Clamp(inv.Amount, 0, inv.MaxAmount);
			if (pc1 > 0)
			{
				double dmg = Max(0,damage * (1.0 - (0.01 * pc1)));
				damage = int(floor(dmg));
			}
		}
		return damage;
	}
	
	void DamageScreenEffects(int damage, int ArmorBefore, int ArmorAfter)
	{
		if (damage > 0)
		{
			effectSize += log(damage) / 25.0;
			
			Cvar CV = Cvar.GetCvar('D4D_BloodScreen', player);
			if (CV && CV.GetBool())
				ACS_NamedExecuteAlways("Blood",0, int(damage / DamageDegree),0,0);
			
		}
		else if (ArmorBefore > ArmorAfter)
		{
			effectSize += log(ArmorBefore - ArmorAfter) / 25.0;
		}
	}
	
	//==========================================================================
	override void Die(Actor source, Actor inflictor, int dmgflags)
	{
		if (!player || !player.mo || player.mo != self || FindInventory("PowerMorph", true))
		{	Super.Die(source, inflictor, dmgflags);		return;		}
		
		// If the player has an extra life, abort dying.
		if (UseLife())
			return;
		
		if (!Event)	Event = D4DHandler.Fetch();
		if (Event) Event.StorePlayerItems(self);
		effectSize = 0;
		Super.Die(source, inflictor, dmgflags);
		
		A_RadiusGive("SyphonDestroyer",16386,RGF_MISSILES,1,"D4SyphonGrenade");
		for (int i = 1; i < 9; i++)
			A_StopSound(i);
		A_Overlay(1,"Null");
		A_ClearOverlays();
	}
	
	//==========================================================================
	// Consumes a life if the player is about to die and 'respawns' them with
	// full health. Returns true if the life was successfully used or if they're
	// still protected via respawn.
	// This effect works through any means that attempts to kill the player:
	// Telefragging, forced damage, you name it, it will still trigger it.
	//==========================================================================
	protected bool UseLife()
	{
		if (!player || !UseLives)
			return false;
		int LifeCount = CountInv("D4ExtraLife");
		if (LifeCount > 0 || CountInv("D4ExtraLifeProtection"))
		{
			if (health < GetMaxHealth(true))
			{
				health = GetMaxHealth(true);
				player.health = health;
			}
			
			if (CountInv("D4ExtraLifeProtection"))
				return true;
			
			A_GiveInventory("Invul5s",1);
			A_GiveInventory("D4ExtraLifeProtection");
			A_SetInventory("LifeRedFlash", LifeCount, beyondMax: true);
			A_TakeInventory("D4ExtraLife",1);
			int LastIndex = LifePos.Size() - 1;
			bool good = false;
			bool thru = bTHRUACTORS;
			Vector3 lpos = pos;
			
			// Iterate through each position. See if it's blocked or not.
			for (int i = LastIndex; i > -1; i--)
			{
				if (TeleportMove(LifePos[LastIndex], bTELESTOMP))
				{
					bTHRUACTORS = true;
					good = !(A_CheckBlock("Null"));
				}
				bTHRUACTORS = thru;
				if (good)		break;
			}
			
			// If none of the previous spots work, see if anything is blocking
			// the player where they stand, ignoring all actors. If so,
			// force them back to the spawn point.
			if (!good)
			{
				bTHRUACTORS = true;
				good = !(A_CheckBlock("Null"));
				bTHRUACTORS = thru;
				if (!good)
				{
					good = true;
					TeleportMove(SpawnPoint, true);
					SetXYZ(SpawnPoint);
				}
			}
			
			bTHRUACTORS = thru;
			
			if (good)
			{
				Vel = LifeVel[LastIndex];
				Angle = LifeAP[LastIndex].X;
				Pitch = LifeAP[LastIndex].Y;
				Actor fr = Spawn(TeleFogSourceType, lpos, ALLOW_REPLACE);
				Actor to = Spawn(TeleFogDestType, pos, ALLOW_REPLACE);
				if (fr)	fr.target = self;
				if (to)	to.target = self;
			}
			A_Overlay(Overlay_LifeRecorder, "Overlay.LifeRecorder"); // Reset all the data.
			return true;
		}
		return false;
	}
	
	//==========================================================================
	override bool CanCollideWith (Actor other, bool passive)
	{
		if (!passive)
		{
			// Death Bringer's Shadow allows passing through enemies when invulnerable.
			if (FindInventory("PowerInvulnerable",true) && 
				CountInv("D4PentagramUpgrade2") && 
				other.bISMONSTER)
				return false;
			
		}
		else
		{
			if (other.FindInventory("PowerInvulnerable", true) &&
				other.CountInv("D4PentagramUpgrade2"))
				return false;
		}
		return true;
	}
	
	//--------------------------------------------------------------------------
	//
	// Start-up
	//
	//--------------------------------------------------------------------------
	
	bool started;
	
	void InitPlayer()
	{
		if (!started) 
		{
			if (GetCvar("skill") >= 3)
			{
				if (GetCvar("D4D_NMGrenades") >= 1) // Give and select frag if the setting isn't "Off" 
				{
					if (!CountInv("FragGrenadePickup"))
					{	
						A_SetInventory("FragGrenadePickup",1);
						SelectEquipment("FragGrenadePickup");
					}
				}
				if (GetCvar("D4D_NMGrenades") >= 2) // Give the rest and select syphon if the setting is "All"
				{
					if (!CountInv("HoloGrenadePickup"))
					{
						A_GiveInventory("HoloGrenadePickup",1);
					}
					if (!CountInv("SyphonGrenadePickup"))
					{   
					//	A_GiveInventory("GrenadeSelectedStripper",1); //Just in case
						A_SetInventory("SyphonGrenadePickup",1);
					}
					SelectEquipment("SyphonGrenadePickup");
				}
			}
		}
		started = true;
		
		//A_SetInventory("D4MultiJump",int(GetCvar("D4MultiJump")));
		UOffsets =
		UVel = UZvel = UHold = Utime = UVel2 = 
		Uonce =	UjumpsDone = Ulowhp = 0;
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	//--------------------------------------------------------------------------
	//
	// Active Functions
	//
	//--------------------------------------------------------------------------
	
	override void Tick()
	{
		Super.Tick();
		if ((!player || !player.mo || player.mo != self) || health <= 0 || level.mapname == 'TITLEMAP')	
			return;
		
		//======================================================================
			
		let inv = FindInventory("GrenadeCharge");
		if (!inv || inv.Amount < inv.MaxAmount)
		{
			A_GiveInventory("GrenadeCharge",1);
			if (!inv)	inv = FindInventory("GrenadeCharge");
			if (inv && inv.Amount >= inv.MaxAmount)
				A_PlaySound("Doom4/Weapon/Grenade/GrenadeRegen");
		}
		GrenChargeCurrent = (inv) ? inv.Amount : 0;
		//======================================================================
		// Case sensitivity is important here for the shader strings, i.e. "damageFactor"
		if (effectSize > 0) 
		{
			Shader.SetEnabled(player, "damageshader", true);
			Shader.SetUniform1f(player, "damageshader", "damageFactor", effectSize);
		}
		else Shader.SetEnabled(player, "damageshader", false);
		
		double returnSpeed = 0;
		if (effectSize != 0) returnSpeed = pow(0.01, 1/(effectSize * 5));
		if (returnSpeed < 0.01) returnSpeed = 0.01;
		
		effectSize -= returnSpeed;
		effectSize = clamp(effectSize, 0, 0.5);
		//======================================================================
		
		let plyr = self.player;
		
		if (plyr && plyr.onground)
		{
			UjumpsDone = 0;
		}
		if (PentaNoiseWait > 0)	PentaNoiseWait--;
		if (level.maptime <= 1)	
		{
			if (!Event) Event = D4DHandler.Fetch();
			if (Event)	Event.ReturnPlayerItems(self);
			
			InitPlayer();
		}
		SetInventory("LifeRedFlash",0);
		//----------------------------------------------------------------------
		/*
		if (GetClass() == "Doom4Player")
		{
			if (CountInv("D4IdfaTrap")) { A_GiveInventory("IdfaStamp"); A_SetInventory("D4IdfaTrap",0); }
		}
		*/
		
	}
	
	//----------------------------------------------------------------------------
	//
	// PROC P_CheckJump
	//
	//----------------------------------------------------------------------------
	override void CheckJump()
	{
		let player = self.player;
		// [RH] check for jump
		if (player.cmd.buttons & BT_JUMP)
		{
			if (player.crouchoffset != 0)
			{
				// Jumping while crouching will force an un-crouch but not jump
				player.crouching = 1;
			}
			else if (waterlevel >= 2)
			{
				Vel.Z = 4 * Speed;
				UjumpsDone = 1;
			}
			else if (bNoGravity)
			{
				Vel.Z = 3.;
				UjumpsDone = 1;
			}
			else if (level.IsJumpingAllowed())
			{
				if (player.onground || pos.z <= floorz)
				{				
					// Regular jump
					if (player.jumpTics == 0)
					{
						UjumpsDone = 1;
						double jumpvelz = JumpZ * 35 / TICRATE;
						double jumpfac = 0;

						// [BC] If the player has the high jump power, double his jump velocity.
						// (actually, pick the best factors from all active items.)
						for (let p = Inv; p != null; p = p.Inv)
						{
							let pp = PowerHighJump(p);
							if (pp)
							{
								double f = pp.Strength;
								if (f > jumpfac) jumpfac = f;
							}
						}
						if (jumpfac > 0) jumpvelz *= jumpfac;

						Vel.Z += jumpvelz + (CountInv("D4HigherJump") * 2);
						bOnMobj = false;
						player.jumpTics = -1;
						if (!(player.cheats & CF_PREDICTING)) 
						{
							A_PlaySound("*jump", CHAN_BODY);
						}
					}
				}
				else if (GetClass() == 'Doom4Player' && 
					GetCvar("D4D_MultiJump") && 
					(UjumpsDone < CountInv("D4MultiJump") - 1) && 
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP))
				{
					if (Vel.Z < 0.0)	Vel.Z = 0.0;
						
					Vel.Z += 8.2 + (CountInv("D4HigherJump") * 2);
					UjumpsDone++;
					A_PlaySound("Doom4/Player/DoubleJump");
				}
			}
		}
	}
	
	override void MovePlayer()
	{
		Super.MovePlayer();
		if (GetClass() == 'Doom4Player')
		{
			let plyr = self.player;
			if (plyr)
			{
				if (CountInv("D4AirControl") && !plyr.onground)
				{
					int gpi = GetPlayerInput(MODINPUT_BUTTONS);
					
					if (gpi & (BT_FORWARD|BT_BACK|BT_MOVELEFT|BT_MOVERIGHT))
					{
						A_ChangeVelocity(
						((gpi & BT_FORWARD  ) ? .8 : 0) - 
						((gpi & BT_BACK     ) ? .8 : 0),
						((gpi & BT_MOVELEFT ) ? .8 : 0) -
						((gpi & BT_MOVERIGHT) ? .8 : 0),
						0,CVF_RELATIVE);
						
						vel.XY *= 0.95;
					}
				}
			}
		}
	}
	
	override void CheatTake (String name, int amount)
	{
		bool takeall;
		Class<Inventory> type;
		let player = self.player;


		if (!player.mo || player.health < 1)
			return;
		
		
		if (takeall || name ~== "armor")
		{
			A_GiveInventory("ArmorStripper",1);
			//CheatTakeType("Armor");
			if (!takeall)
				return;
		}
		Super.CheatTake(name, amount);
	}
	
	override void CheatGive (String name, int amount)
	{
		Class<Inventory> type;
		let player = self.player;
		
		if (player.mo == NULL || player.health <= 0)
		{
			return;
		}
		
		Super.CheatGive(name, amount);
		
		int giveall = ALL_NO;
		if (name == 'all')
		{
			giveall = ALL_YES;
		}
		else if (name == 'everything')
		{
			giveall = ALL_YESYES;
		}
		
		if (giveall || name == 'weapons')
		{
			let savedpending = player.PendingWeapon;
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<Weapon>)(AllActorClasses[i]);
				if (!type || type == "Weapon")	continue;
				
				// Don't give replaced weapons unless the replacement was done by Dehacked.
				let rep = GetReplacement(type);
				if (rep != type && !(rep is "DehackedPickup"))	continue;
				
				// Give the weapon only if it is set in a weapon slot.
				// Since the KEYCONF slots are taken care of in the super call,
				// do actual slot numbers and priorities here instead.
				readonly<Weapon> def = GetDefaultByType(type);
				if (def.SlotNumber > -1 && def.SlotPriority <= 1.0)
				{
					if (giveall == ALL_YESYES || !def.bCheatNotWeapon)
					{
						GiveInventory(type, 1, true);
					}
				}
			}
			player.PendingWeapon = savedpending;
		}
	}
	
	//--------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------
	
	void TryDash()
	{
		if (!DashTimer && health > 0)	DashTimer = -1;
	}
}

/*==============================================================================



==============================================================================*/