Class D4NoiseMaker : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	void Silence()
	{
		A_StopSound(CHAN_BODY);
		A_StopSound(CHAN_ITEM);
		A_StopSound(CHAN_WEAPON);
		A_StopSound(CHAN_VOICE);
		A_StopSound(5);
		A_StopSound(6);
		A_StopSound(7);
	}
	
	// Never spawn this thing directly.
	override void PostBeginPlay()
	{		
		if (GetClass() == "D4NoiseMaker")
		{	Destroy(); return;	}
		
		Super.PostBeginPlay();
	}
}

//=======================================================================
//=======================================================================
// MegaHealth
//=======================================================================
//=======================================================================
Class D4MegaSphereReplacer : RandomSpawner //replaces Megasphere
{
	Default 
	{
		DropItem "D4Megasphere", 	255, 6;
		DropItem "D4DoomDoll", 		255, 1;
		DropItem "D4ExtraLife",		255, 1;
	}
}

Class D4BlueArmorMegasphere : ArmorBonus //replaces BlueArmorForMegasphere 
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		Armor.SavePercent 100;
		Armor.SaveAmount 200;
		Armor.MaxAbsorb 200;
		Armor.MaxFullAbsorb 200;
		DistanceCheck "D4D_MaxDrawDistance";
	}
}

Class D4Megasphere : Megasphere 
{
	int bonus;
	property AllowBonus: bonus;
	Default 
	{
		D4Megasphere.AllowBonus 1;
		Inventory.PickUpSound "Doom4/Pickups/MegaHealth";
		Inventory.PickupMessage "Megacharge";
		Translation "0:255=%[0.3,0.15,0.05]:[2,1,0.3]";
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.TRANSFER
		-Inventory.ALWAYSPICKUP
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		Scale 0.17;
	}
	
	States
	{
	Spawn:
		M680 D 1 Light("MegaSphereLightWorld") 
		{
			if (!A_CheckSight("Null"))
			{
				A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERTRANSLATION);
			}
			A_SetRoll(roll + 1,SPF_INTERPOLATE);
		}
		Wait;
	Pickup:
		TNT1 A 0 
		{
			let plr = PlayerPawn(self);
			if (!plr)	return false;
			
			int maxhp = Max(plr.GetMaxHealth() + stamina,200);
			if (health < maxhp)
				A_SetHealth(Clamp(health, health + 200, maxhp));
			
			if (!inv)
			{
				if (A_GiveInventory("ArmorStripper",1))
					A_GiveInventory("D4BlueArmorMegasphere",1);
			}
			else
			{
				A_GiveInventory("D4BlueArmor200",1);
			}
				
			if (!invoker.bonus)	return true;
			
			if (CountInv("D4MegachargeUpgrade1") && CountInv("D4MegasphereDamageReducer") < 25)
			{
				A_GiveInventory("D4MegasphereDamageReducer",1);
			}
			if (CountInv("D4MegachargeUpgrade2"))
			{
				let inv = PowerTimeFreezer(FindInventory("PowerTimeFreezer", true));
				if (inv)
				{
					if (inv.GetClass() != "D4TimeFreeze")
					{
						inv.EndEffect();
						A_GiveInventory("D4TimeFreeze",1);
					}
					else
						inv.EffectTics = 35 * 5;
				}
				else
					A_GiveInventory("D4TimeFreeze",1);
			}
				
			return true;
		}
		Stop;
	}
}

Class D4MegaSphereNoBonus : D4MegaSphere 
{
	Default
	{
		D4MegaSphere.AllowBonus 0;
	}
}
Class D4MegasphereDamageReducer : Inventory 
{
	Default 
	{
		+INVENTORY.UNTOSSABLE;
		+INVENTORY.UNDROPPABLE;
		Inventory.MaxAmount 25;
		Inventory.InterhubAmount 25;
	}
}

Class D4TimeFreezeGiver : PowerupGiver
{
	Default
	{
		+INVENTORY.NOSCREENBLINK
		Powerup.Type "D4TimeFreeze";
		Powerup.Duration -5;
	}
}

Class NoTimeFreezeToken : Inventory { }

Class D4TimeFreeze : PowerTimeFreezer
{
	Default
	{
		Powerup.Duration -5;
	}
	
	static void FreezeEverything()
	{
		let it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (!mo || mo is 'D4DNewBeamBase' || mo is 'D4DBeamBase' || mo is 'PentaShadow')
				continue;
				
			if (mo.player)
				continue;
				
			if (mo.bNOTIMEFREEZE)
			{
				mo.SetInventory("NoTimeFreezeToken",1);
				mo.bNOTIMEFREEZE = false;
			}
		}
	}
	
	static void UnfreezeEverything()
	{
		let it = ThinkerIterator.Create("Actor", Thinker.STAT_DEFAULT);
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (mo && mo.CountInv("NoTimeFreezeToken"))
			{
				mo.SetInventory("NoTimeFreezeToken",0);
				mo.bNOTIMEFREEZE = true;
			}
		}
	}
	
	override void InitEffect()
	{
		D4TimeFreeze.FreezeEverything();
		Super.InitEffect();
	}
	
	override void EndEffect()
	{
		D4TimeFreeze.UnfreezeEverything();
		Super.EndEffect();
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		level.frozen = true;
	}
}

//==============================================================================
// Extra Life
//==============================================================================

Class D4ExtraLife : Inventory
{
	Default 
	{
		Inventory.PickUpSound "Doom4/Pickups/MegaHealth";
		Inventory.PickupMessage "Extra life!";
		Inventory.MaxAmount 1000000;
		Inventory.InterhubAmount 1000000;
		Translation "0:255=%[0.05,0.3,0.05]:[0.3,2.0,0.3]";
		+INVENTORY.FANCYPICKUPSOUND
		+INVENTORY.TRANSFER
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.BIGPOWERUP
		+INVENTORY.NEVERRESPAWN //CHEATER CHEATER PUMPKIN TWEETER
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		Scale 0.17;
	}
	States
	{
	Spawn:
		M680 D 1 Light("ExtraLifeLightWorld") 
		{
			A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERTRANSLATION);
			A_SetRoll(roll + 1,SPF_INTERPOLATE);
		}
		Wait;
	}
}

Class LifeRedFlash : Inventory
{
	Default
	{
		Inventory.MaxAmount 1000000;
		Inventory.InterhubAmount 0;
	}
}

//==============================================================================
//==============================================================================
// Radsuit
//==============================================================================
//==============================================================================

Class PowerRadSuit : PowerProtection
{
	Default 
	{
		DamageFactor "PlasmaPool",			0.1;
		DamageFactor "PlasmaExploder",		0.5;
		DamageFactor "Plasma", 				0.75;
		DamageFactor "CyberdemonFireWave",	0.9;
		DamageFactor "Slime",				0.0;
		RadiusDamageFactor					0.9;
		Powerup.Duration -60;
	}
}

Class D4RadSuit : RadSuit //replaces RadSuit
{
	Default 
	{
		Scale 0.85;
		Powerup.Type "PowerRadSuit";
	}
	States
	{
	Spawn:
		SUIT A 0 NODELAY A_SpawnItemEx("D4RadBoots");
		SUIT A -1 A_SetAngle(random(0,359));
		Stop;
	}
}

Class D4RadBoots : RadSuit { States { Spawn: TNT1 A -1; Stop; } }

//=======================================================================
//=======================================================================
// Allmap
//=======================================================================
//=======================================================================
Class D4AllMap : AllMap //replaces AllMap
{
	Default 
	{
		+INVENTORY.TRANSFER //Fucking LOVE this flag!
		Scale 0.6;
	}
	
	override void PostBeginPlay()
	{
		A_GiveInventory("MapScanner",1);
		A_GiveInventory("Allmap",1);
		angle = random(0,359);
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		PMAP ABCDCB 6 Bright;
		Loop;
	}
}

Class MapScanner : PowerupGiver //replaces Scanner
{
	Default 
	{
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+DONTGIB
		Powerup.Type "PowerScanner";
		Powerup.Duration 0x7FFFFFFD;
	}
}

//=======================================================================
//=======================================================================
// light amp
//=======================================================================
//=======================================================================
Class D4Infrared : Infrared //replaces Infrared
{
	Default 
	{
		Scale 0.6;
	}
	States
	{
	Spawn:
		PVIS A 0 Bright NODELAY A_SetAngle(random(0,359));
		PVIS A 6 Bright;
		PVIS B 6;
		Goto Spawn+1;
	}
}


//=======================================================================
//=======================================================================
// Quad Damage
//=======================================================================
//=======================================================================

Class D4BerserkSpawner : RandomSpawner //replaces Berserk
{
	Default 
	{
		DropItem "D4DBerserk", 255, 10;
		DropItem "D4QuadDamage", 255, 5;
	}
	
	override void PostSpawn(Actor spawned)
	{
		if (spawned is "D4DBerserk")
		{
			for (int i = 0; i < MAXPLAYERS; i++)
			{
				if (!playeringame[i])	continue;
				let plr = players[i].mo;
				if (!plr)	continue;
				
				if (plr.CountInv("D4QuadUpgrade1") > 0)
				{
					D4DHandler.ConvertBerserkToQuad(D4DBerserk(spawned));
					return;
				}
			}
		}
	}
	
}

Class PowerD4QuadDamage : PowerDamage
{
	Inventory Penta;
	Actor NoiseMaker;
	int DelayTimer;
	bool hasMelee, hasMissile, PentaDamage;
	Default 
	{
		DamageFactor "Normal", 4;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		if (!passive && damage > 0)
		{
			newdamage = max(1, ApplyDamageFactors(CheckPentaDamage(), damageType, damage, damage * 4));
			if (Owner != null && newdamage > damage) Owner.A_PlaySound(ActiveSound, CHAN_AUTO, 1.0, false, ATTN_NONE);
		}
	}
	
	override void InitEffect()
	{
		if (Owner)
		{
			Super.InitEffect();
			hasMelee = (Owner.MeleeState != null);
			hasMissile = (Owner.MissileState != null);
			Penta = Owner.FindInventory("D4QuadUpgrade2");
		}
	}
	
	Class<Inventory> CheckPentaDamage()
	{
		if (Owner)
		{
			if (!Penta)
				Penta = Owner.FindInventory("D4QuadUpgrade2");
			
			if (Penta && Penta.Amount > 0)
				return Penta.GetClass();
		}
		return GetClass();
	}
	
	override void DoEffect()
	{
		if (!Owner || Owner.Health < 1)
		{	EndEffect();	return;	}
		
		if (globalfreeze || level.Frozen)
		{
			EffectTics++; //'Freeze' the timer.
		}
		else
		{
			SetOrigin(Owner.pos,false);
			
			if (DelayTimer < 1)
			{
				if ((hasMelee && InStateSequence(Owner.CurState, Owner.MeleeState)) ||
					(hasMissile && InStateSequence(Owner.CurState, Owner.MissileState)))
				{
					DelayTimer = 35;
					A_PlaySound("QuadDamage/Firing",6);
				}
			}
			else DelayTimer--;
			
			if (EffectTics > 105)	
			{
				A_StopSound(7);
			}
			else Switch (EffectTics)
			{
				Case 105:
					A_PlaySound("QuadDamage/Warning",7,1,0);
				Case 70:
				Case 35:
					Owner.A_SetBlend("Purple",0.4,12);
				Default:
					break;
			}
		}
		Super.DoEffect();
	}
}

Class QuadDamageGiver : PowerupGiver
{
	Default 
	{
		Inventory.maxamount 0;
		Powerup.Type "PowerD4QuadDamage";
		Powerup.duration -30;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
}

Class D4QuadDamage : CustomInventory
{
	Default 
	{
		Inventory.PickupSound "QuadDamage/Pickup";
		Inventory.PickupMessage "Quad Damage!";
		//translation "0:255=%[.00,.00,.10]:[.99,.10,.99]"
		+INVENTORY.FANCYPICKUPSOUND
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		Scale 0.17;
	}
	states
	{
	Spawn:
		M680 B 1 Light("QuadDamageLightWorld") NoDelay
		{
			if (!A_CheckSight("Null"))
				A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME);
		}
		Loop;
	Pickup:
		TNT1 A 0
		{	
			if (CountInv("D4QuadUpgrade1"))
				A_GiveInventory("D4DBerserk",1);
			let inv = PowerD4QuadDamage(FindInventory("PowerD4QuadDamage"));
			if (inv)
			{
				inv.A_PlaySound(invoker.PickupSound, 7);
				inv.EffectTics += 1050;
				return;
			}
			A_SpawnItemEx("QuadDamageLight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
			A_GiveInventory("QuadDamageGiver", 1);
		}
		Stop;
	}
}

Class QuadPickupNoise : D4NoiseMaker 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay A_PlaySound("QuadDamage/Pickup",5,1,0,ATTN_NONE);
		Stop;
	}
}

Class QuadDamageLight : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 Light("QuadLight") 
		{
			if (master && master.CountInv("PowerD4QuadDamage"))
				SetOrigin(master.pos, true);
			else 
				return Destroy();
		}
		Wait;
	}
}


//=======================================================================
//=======================================================================
// Regeneration
//=======================================================================
//=======================================================================

Class SoulSphereHP : SoulSphere 
{ 
	Default 
	{ 
		+INVENTORY.IGNORESKILL 
		Inventory.Amount 100;
	}
}

Class SoulSphereHPUpgraded : SoulSphere 
{ 
	Default 
	{ 
		+INVENTORY.IGNORESKILL 
		Inventory.Amount 150;
		Inventory.MaxAmount 300;
	}
}

Class PowerD4Regen : PowerRegeneration 
{
	int GiverTic;
	Actor NoiseMaker;
	bool switcharoo;
	Default 
	{
		+INVENTORY.NOSCREENBLINK;
		Inventory.InterhubAmount 0; 
	}
	
	void GiveHealth()
	{
		if (Owner)
		{
			if (Owner.FindInventory("PowerMorph",true) || !Owner.CountInv("D4RegenUpgrade4"))	
				Owner.GiveBody(int(Strength));
			else
				Owner.A_GiveInventory("D4HealthBonusUpgraded");
		}
	}
	
	
	override void DoEffect()
	{
		if (!Owner || Owner.Health < 1)
		{	EndEffect();	return;	}
		
		if (Owner.CountInv("D4RegenUpgrade3"))
			GiverTic = 15;
		else
			GiverTic = 31;
		
		if (globalfreeze || level.Frozen)
		{
			EffectTics++; //'Freeze' the timer.
		}
		else if (EffectTics <= 105)
		{
			SetXYZ(Owner.pos);
			Switch (EffectTics)
			{
				Case 105:
					A_PlaySound("Regen/Warning",5,1,0,ATTN_NONE);
				Case 70:
				Case 35:
					Owner.A_SetBlend("Cyan",0.4,12);
				Default:
					break;
			}
		}
		if (!(level.time & GiverTic))
		{
			if (Owner.CountInv("D4RegenUpgrade2"))
			{
				Owner.A_GiveInventory("D4ArmorBonus");
				GiveHealth();
			}
			else if (Owner.CountInv("D4RegenUpgrade1") && Owner.health >= (100 + Owner.stamina))
				Owner.A_GiveInventory("D4ArmorBonus");
			else
				GiveHealth();
		}
	}
}

Class RegenerationGiver : PowerupGiver
{
	Default 
	{
		Inventory.MaxAmount 0;
		Powerup.Type "PowerD4Regen";
		Powerup.Duration 1050;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
}

Class D4SoulSphereReplacer : RandomSpawner //replaces SoulSphere
{
	Default
	{
		DropItem "D4Regeneration",	255, 20;
		DropItem "D4ExtraLife",		255, 1;
	}
}

Class D4Regeneration : CustomInventory
{
	Default 
	{
		Inventory.PickupMessage "Supercharge!";
		Inventory.PickupSound "Regen/Pickup";
		translation "0:255=%[.30,.30,.50]:[.10,1.99,1.99]";
		+INVENTORY.FANCYPICKUPSOUND
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		Scale 0.17;
	}
	states
	{
	Spawn:
		M680 D 1 Light("RegenLightWorld") 
		{
			A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME);
			A_SetRoll(roll + 1,SPF_INTERPOLATE);
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			if (CountInv("D4RegenUpgrade4"))	A_GiveInventory("SoulSphereHPUpgraded",1);
			else 								A_GiveInventory("SoulSphereHP",1);
			
			let inv = PowerD4Regen(FindInventory("PowerD4Regen"));
			if (inv)
			{
				inv.A_PlaySound(invoker.PickupSound,5);
				inv.EffectTics += 1050;
				return;
			}
			A_SpawnItemEx("RegenerationLight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
			A_GiveInventory("RegenerationGiver", 1);
		}
		Stop;
	}
}

Class RegenPickupNoise : D4NoiseMaker
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

Class RegenerationLight : Actor 
{
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 Light("RegenLight") 
		{
			if (master && master.CountInv("PowerRegeneration"))
				SetXYZ(master.pos);
			else 
				return Destroy();
		}
		Wait;
	}
}

//=======================================================================
//=======================================================================
// Quad Money
//=======================================================================
//=======================================================================

Class PowerD4Money : Powerup 
{
	int GiverTic;
	Actor NoiseMaker;
	bool switcharoo;
	Default 
	{
		+INVENTORY.NOSCREENBLINK;
	}
	
	
	override void InitEffect()
	{
		Super.InitEffect();
		if (!Owner)	return;
		
		Owner.A_GiveInventory("CashPercentBonusTemp",300);
		
		NoiseMaker = Spawn("RegenPickupNoise",Owner.pos);
	}
	
	override void DoEffect()
	{
		if (!Owner || Owner.Health < 1)
		{	EndEffect();	return;	}

		if (globalfreeze || level.Frozen)
		{
			EffectTics++; //'Freeze' the timer.
		}
		else if (EffectTics <= 105)
		{
			SetXYZ(Owner.pos);
			Switch (EffectTics)
			{
				Case 105:
					A_PlaySound("Regen/Warning",5,1,0,ATTN_NONE);
				Case 70:
				Case 35:
					Owner.A_SetBlend("Green",0.4,12);
				Default:
					break;
			}
		}
	}
	
	override void EndEffect()
	{
		if (Owner) Owner.A_TakeInventory("CashPercentBonusTemp",300);
			
		Super.EndEffect();
	}
}

Class QuadMoneyGiver : PowerupGiver
{
	Default 
	{
		Powerup.Type "PowerD4Money";
		Powerup.duration -30;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
}

Class D4QuadMoney : CustomInventory
{
	Default 
	{
		Inventory.PickupSound "Regen/Pickup";
		Inventory.PickupMessage "Quad Credits!";
		translation "0:255=%[.00,.00,.10]:[.10,.99,.10]";
		+INVENTORY.FANCYPICKUPSOUND
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		Scale 0.17;
	}
	states
	{
	Spawn:
		M680 C 1 Light("QuadMoneyLightWorld") 
		{
			if (!A_CheckSight("Null"))
			{
				A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME);
			}
			A_SetRoll(roll + 1,SPF_INTERPOLATE);
		}
		Wait;
	Pickup:
		TNT1 A 0
		{			
			let inv = PowerD4Money(FindInventory("PowerD4Money"));
			if (inv)
			{
				if (inv.NoiseMaker)
				{
					let nm = D4NoiseMaker(inv.NoiseMaker);
					if (nm)	nm.Silence();
				}
				inv.EffectTics += 1050;
				return;
			}
			A_SpawnItemEx("QuadMoneyLight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
			A_GiveInventory("QuadMoneyGiver", 1);
		}
		Stop;
	}
}

Class QuadMoneyLight : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 Light("MoneyLight") 
		{
			if (master && master.CountInv("PowerD4Money"))
				SetOrigin(master.pos, true);
			else 
				return Destroy();
		}
		Wait;
	}
}


//=======================================================================
//=======================================================================
// Haste
//=======================================================================
//=======================================================================

Class D4BlurSphere : BlurSphere {}
/*
Class BlurSphereSpawner : CustomInventory //replaces BlurSphere
{
	const SpawnFlags = SXF_NOCHECKPOSITION|SXF_TRANSFERSPECIAL|SXF_CLEARCALLERSPECIAL|SXF_CLEARCALLERTID;
	Default 
	{
		+INVENTORY.BIGPOWERUP
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.QUIET
		-COUNTITEM
		+THRUACTORS
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay
		{
			Class<Inventory> which;
			Switch(GetCVar("D4D_HasteSpawn"))
			{
				Case 0:	which = "D4BlurSphere";	break;
				Case 1: which = (random(0,1) == 1) ? "D4Haste" : "D4BlurSphere"; break;
				Default: which = "D4Haste";
			}
			A_SpawnItemEx(which,0,0,0,0,0,0,0,SpawnFlags,0,tid);
			bTHRUACTORS = false;
		}
		Stop;
	}
}
*/
Class PowerD4Invis : PowerInvisibility {}
Class PowerD4DFS : PowerDoubleFiringSpeed {}
Class PowerD4Haste : PowerSpeed
{
	int Timer;
	D4NoiseMaker NoiseMaker;
	PowerDoubleFiringSpeed DFS;
	PowerD4Invis Invis;
	override void InitEffect()
	{
		if (!Owner || Owner.Health < 1)
			return;
		
		let pwr = FindInventory("PowerDoubleFiringSpeed", true);
		if (!pwr)
		{
			Owner.A_GiveInventory("PowerD4DFS");
			DFS = PowerDoubleFiringSpeed(Owner.FindInventory("PowerD4DFS"));
		}
		else DFS = PowerDoubleFiringSpeed(pwr);
		
		if (DFS)
		{
			if (DFS is "PowerD4DFS")
				DFS.EffectTics = EffectTics;
		}
		
		if (Owner.CountInv("D4HasteUpgrade1"))
		{
			Owner.A_GiveInventory("PowerD4Invis");
			Invis = PowerD4Invis(Owner.FindInventory("PowerD4Invis"));
		}
		Super.InitEffect();
	}
	
	override void DoEffect()
	{
		if (!Owner || Owner.Health < 1)
		{	EndEffect();	return;	}
		
		if (globalfreeze || level.Frozen)
		{
			EffectTics++; //'Freeze' the timer.
		}
		else
		{
			SetOrigin(Owner.pos, false);
			if (EffectTics > 105)
			{
				// Whispering from Quake's Ring of Shadows
				if (NoiseMaker)
				{
					if (Timer-- < 1)
					{
						if (random(1,30) == 1)
						{
							A_PlaySound("Haste/Whisper",6,1);
							Timer = random(35 * 2, 35 * 10);
						}
					}
				}
			}
			else
			{
				Switch (EffectTics)
				{
					Case 105:
						A_StopSound(6);
						A_PlaySound("Haste/Warning",5,1,0);
					Case 70:
					Case 35:
						Owner.A_SetBlend("Yellow",0.4,12);
					Default:
						break;
				}
			}
		}
		
		// Ensure the owner has the double firing speed at all times when haste
		// is active, and invisibility if the upgrade is found.
		if (!DFS)	
		{
			DFS = PowerDoubleFiringSpeed(Owner.FindInventory("PowerDoubleFiringSpeed", true));
			if (!DFS)		
			{
				let pwr = Owner.FindInventory("PowerDoubleFiringSpeed",true);
				if (!pwr)
					Owner.A_GiveInventory("PowerD4DFS");
			}
		}
		else if (DFS is "PowerD4DFS")
		{
			DFS.EffectTics = EffectTics;
		}
		
		if (Owner.CountInv("D4HasteUpgrade1") > 0)
		{
			if (!Invis)	
			{
				Invis = PowerD4Invis(Owner.FindInventory("PowerD4Invis"));
				if (!Invis)			Owner.A_GiveInventory("PowerD4Invis");
			}
			else		Invis.EffectTics = EffectTics;
		}
		
		if (Owner.CountInv("D4HasteUpgrade2"))
			Speed = 2.0; //Internal default is 1.5.
		Super.DoEffect();
	}
	
	override void EndEffect()
	{
		if (Owner)
		{
			let inv = PowerD4DFS(Owner.FindInventory("PowerD4DFS"));
			if (inv) inv.EndEffect();
			
			let in2 = PowerD4Invis(Owner.FindInventory("PowerD4Invis"));
			if (in2)	in2.EndEffect();
		}
		Super.EndEffect();
	}
}


Class D4HasteGiver : PowerupGiver
{
	Default 
	{
		Powerup.Type "PowerD4Haste";
		Powerup.Duration -30;
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
	}
}

Class D4DoubleFiringSpeedGiver : D4HasteGiver
{	Default {	Powerup.Type "PowerD4DFS";	}}

Class D4Haste : CustomInventory //replaces BlurSphere
{
	Default 
	{
		Inventory.PickupSound "Haste/Pickup";
		Inventory.PickupMessage "Haste!";
		translation "0:255=%[.00,.00,.10]:[.99,.99,.10]";
		+INVENTORY.FANCYPICKUPSOUND
		+COUNTITEM
		+BRIGHT
		+FLOATBOB
		+FORCEXYBILLBOARD
		Scale 0.17;
	}
	states
	{
	Spawn:
		M680 E 1 Light("HasteLightWorld") 
		{
			if (!A_CheckSight("Null"))
				A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME);
			
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			if (!CountInv("PowerD4Haste"))
			{
				A_SpawnItemEx("HasteLight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_SETTARGET);
			}
			let inv = PowerD4Haste(FindInventory("PowerD4Haste"));
			if (inv)
			{
				inv.EffectTics += 1050;
				inv.A_PlaySound(invoker.PickupSound,5);
				/*
				if (inv.NoiseMaker)
					inv.NoiseMaker.A_PlaySound("Haste/Pickup",CHAN_AUTO,1,0,ATTN_NONE);
				*/
				return;
			}
			
			A_GiveInventory("D4HasteGiver", 1);
			A_GiveInventory("D4DoubleFiringSpeedGiver", 1);
		}
		Stop;
	}
}

Class HastePickupNoise : D4NoiseMaker
{
	int user_time;
	int user_wait;
	int user_delay;
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay A_PlaySound("Haste/Pickup",CHAN_AUTO);
		Stop;
	}
}

Class HasteLight : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1 Light("HasteLight") 
		{
			if (master && master.CountInv("PowerD4Haste"))
				SetOrigin(master.pos, true);
			else 
				return Destroy();
		}
		Wait;
	}
}

//==============================================================================
//==============================================================================
// Pentagram of Protection (Invulnerability)
//==============================================================================
//==============================================================================

/*
PentagramOfProtection/Pickup		"Sounds/Pickups/penta1.wav"
PentagramOfProtection/Warning		"Sounds/Pickups/penta2.wav"
PentagramOfProtection/Protect		"Sounds/Pickups/penta3.wav"
QuadDamage/Pickup					"Sounds/Pickups/quad1.wav"
QuadDamage/Warning					"Sounds/Pickups/quad2.wav"
QuadDamage/Firing					"Sounds/Pickups/quad3.wav"
*/

Class InvulPickupNoise : D4NoiseMaker 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A -1 NoDelay A_PlaySound("PentagramOfProtection/Pickup",5,1,0,ATTN_NONE);
		Stop;
	}
}

Class PentaShadow : Actor 
{
	Default 
	{
		+NOINTERACTION
		+ROLLSPRITE
		+ROLLCENTER
		+NOTIMEFREEZE
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		"####" "#" 1 A_FadeOut(0.2);
		Wait;
	}
}

Class D4PentagramOfProtection : CustomInventory //replaces InvulnerabilitySphere
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.BIGPOWERUP
		+INVENTORY.FANCYPICKUPSOUND
		+DONTGIB
		+FLOATBOB
		+BRIGHT
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		Inventory.PickupMessage "Pentagram Of Protection";
		Inventory.PickupSound "PentagramOfProtection/Pickup";
		Scale 0.17;
		Inventory.MaxAmount 0;
		Inventory.InterhubAmount 0;
	}
	States
	{
	Spawn:
		M680 A 1 Light("InvulLightWorld") 
		{
			if (!A_CheckSight("Null"))
			{
				A_SpawnItemEx("PentaShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERROLL|SXF_TRANSFERSPRITEFRAME);
			}
			A_SetRoll(roll + 1,SPF_INTERPOLATE);
		}
		Wait;
	Pickup:
		TNT1 A 0
		{
			let inv = PowerInvulBase(FindInventory("PowerInvulBase"));
			if (inv)
			{
				inv.EffectTics += 1050;
				inv.A_PlaySound(invoker.PickupSound,CHAN_AUTO,1,0,ATTN_NONE);
				return;
			}
			A_GiveInventory("Invulnerability");
		}
		Stop;
	}
}

Class Invulnerability : PowerupGiver
{	
	Default 
	{
		Inventory.InterhubAmount 0;
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.QUIET
		+INVENTORY.ADDITIVETIME
		+INVENTORY.NOSCREENBLINK
		Powerup.Color "Gold", 0.15;
		Powerup.Type "PowerInvulBase";
		Powerup.Duration 1050;
	}
}

Class D4ExtraLifeProtection : PowerProtection { Default { Powerup.Duration -5; DamageFactor "Normal", 1.0; } }

Class Invul3s : Invulnerability	{ Default {	Powerup.Duration 107; } }
Class Invul5s : Invulnerability	{ Default {	Powerup.Duration -5; } }

Class PowerInvulBase : PowerInvulnerable
{
	const WaitTimer = 70;
	private uint PentaNoiseTimer;
	Default 
	{
		ActiveSound "PentagramOfProtection/Protect";
		+INVENTORY.NOSCREENBLINK;
		+INVENTORY.ADDITIVETIME
		Inventory.InterhubAmount 0; 
	}
	
	override void InitEffect()
	{
		Super.InitEffect();
		if (!Owner)	return;
		A_PlaySound("PentagramOfProtection/Pickup");
		if (Owner.CountInv("D4PentagramUpgrade1"))	Owner.bREFLECTIVE = true;
		if (Owner.CountInv("D4PentagramUpgrade4"))	Owner.bNODAMAGE = true;
		bNOINTERACTION = true;
		PentaNoiseTimer = 0;
		if (Owner.Player)	Owner.Player.DamageCount = 0;
	}
	
	override void DoEffect()
	{
		if (Owner)
		{
			if (PentaNoiseTimer > 0)	PentaNoiseTimer--;
			SetOrigin(Owner.pos, false);
			Prev = Owner.Prev;
			Vel = Owner.Vel;
			if (Owner.CountInv("D4PentagramUpgrade1"))	Owner.bREFLECTIVE = true;
			if (Owner.CountInv("D4PentagramUpgrade4"))	Owner.bNODAMAGE = true;
			if (globalfreeze || level.Frozen)
			{
				EffectTics++; //'Freeze' the timer.
			}
			else
			{
				Switch (EffectTics)
				{
					Case 105:
						A_PlaySound("PentagramOfProtection/Warning",5,1,0,ATTN_NONE);
					Case 70:
					Case 35:
						Owner.A_SetBlend("Gold",0.45,12);
					Default:
						break;
				}
			}
		}
		Super.DoEffect();
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		if (passive && damage > 0)
		{
			newdamage = damage;
			if (Owner && PentaNoiseTimer < 1)
			{
				PentaNoiseTimer = WaitTimer;
				A_PlaySound(ActiveSound, CHAN_VOICE, 1.0, false, ATTN_NONE);
			}
		}
	}
	
	override void EndEffect()
	{
		if (Owner)	
		{
			if (Owner.Player)	Owner.Player.DamageCount = 0;
			Owner.bREFLECTIVE = false;
			Owner.bNODAMAGE = false;
		}
		Super.EndEffect();
	}
}