/*==============================================================================
================================================================================
									Trail Beams
================================================================================
	A guide on how to use these will come later.
	
	-----------
	Trail Types
	-----------
	
	- TrailBeam -
	Standard non-moving trail.
	
	- MovingTrailBeam -
	Interpolates with the shooter's movement and turning.
	
	- TrailBeamStaticScaling -
	Does not move. Scales in, holds, and scales out by tic settings.
	
	-----------
	Spawn Types
	-----------
	
	- TrailBeamStaticScalingSpawner -
	- TrailBeamJitterSpawner -
	

==============================================================================*/


Class MovingTrailBeam : Actor 
{
	const NoSpawn = 256;
	double  user_dist;
	int user_t;
	int user_zoffset;
	double user_angle;
	double user_pitch;
	double user_xa, user_xb;
	double user_ya, user_yb;
	double user_za, user_zb;
	double user_time;
	double user_scale;
	int user_pflags;
	int user_neg;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+BRIGHT
		+ROLLCENTER
		YScale 0.25; //Don't touch this! Otherwise the trail will become broken up!
		XScale 0.03; //This modifies the width of the beam. It is safe to play around with.
		Alpha 0;
		RenderStyle "Add";
	}
	// DO NOT add a translation. If you need to change the colors, make a sprite
	// entry in TEXTURES lump and use BLEND. NEVER TRANSLATE!
	States
	{
	Spawn:
		X202 B 0 NoDelay
		{
			// Sets how long to split the scaling-in effect.
			user_time = 3.0;
			user_zoffset = 16;
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			A_SpawnItemEx("MovingTrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
		}
		Goto Process;
	Process:
		"####" "#" 0
		{
			if (!user_pflags)	{ user_pflags = WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEOFFSET;	}
			A_Warp(DefPtr,0,0,user_zoffset,0,WARPF_NOCHECKPOSITION);
			// If it's a secondary trail (vertical)
			if (tid > 0)	
			{	
				Thing_ChangeTID(0,0);
				roll = pitch + 90;
				pitch = 90;
				angle += 90;
			}
		
			// Save our current information so we know how to properly interpolate whenever
			// the owner moves.
			user_neg = (Scale.X < 0) ? 1 : 0;
			user_scale = Scale.X;
			user_angle = angle;
			user_pitch = pitch;
			user_dist = GetDistance(false, TargetPtr);
			user_xa = pos.x;
			user_ya = pos.y;
			user_za = pos.z;
			
			// Move to the shooter so we can get just how far out we are.
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
			user_xb = user_xa - pos.x;
			user_yb = user_ya - pos.y;
			user_zb = user_za - pos.z;
			
			// Now move back without interpolating. Otherwise it'll look weird.
			A_Warp(TargetPtr,user_xb,user_yb,user_zb,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEOFFSET);
			angle = user_angle;
			pitch = user_pitch;
		}
		"####" "#" 1 
		{
			A_FadeIn(1.0,FTF_CLAMP);
			A_Warp(TargetPtr, user_xb+vel.x, user_yb+vel.y, user_zb+vel.z, 0, user_pflags);
			angle = user_angle;
			pitch = user_pitch;
		}
		"####" "#" 1 
		{
			// Keep 'shrinking'. NEVER fade out!
			if (user_neg)
			{
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X >= 0)	{ return ResolveState("Null"); }
			}
			else
			{
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X <= 0)	{ return ResolveState("Null"); }
			}
			A_Warp(TargetPtr ,user_xb + vel.x, user_yb + vel.y, user_zb + vel.z ,0, user_pflags);
			angle = user_angle;
			pitch = user_pitch;
			return ResolveState(null);
		}
		Wait;
	}
}

Class TrailBeam : Actor 
{
	const ZOffset = 16;
	const NoSpawn = 256;
	const PFlags = WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY|WARPF_ABSOLUTEOFFSET;
	double user_time;
	double user_scale;
	int user_neg;
	Default 
	{
		+NOINTERACTION
		+FLATSPRITE
		+BRIGHT
		+ROLLCENTER
		YScale 0.25; //Don't touch this! Otherwise the trail will become broken up!
		XScale 0.03; //This modifies the width of the beam. It is safe to play around with.
		Alpha 0;
		RenderStyle "Add";
	}
	// DO NOT add a translation. If you need to change the colors, make a sprite
	// entry in TEXTURES lump and use BLEND. NEVER TRANSLATE!
	States
	{
	Spawn:
		X202 B 0 NoDelay
		{
			// Sets how long to split the scaling-in effect.
			user_time = 3.0;
			
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			A_SpawnItemEx("TrailBeam",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
			return ResolveState("Process");
		}
	Process:
		"####" "#" 1
		{
			//A_Warp(DefPtr,0,0,ZOffset,0,WARPF_NOCHECKPOSITION);
			user_scale = Scale.X;
			user_neg = ((user_scale < 0) ? 1 : 0);
			// If it's a secondary trail (vertical)
			if (tid > 0)	
			{	
				Thing_ChangeTID(0,0);
				roll = pitch + 90;
				pitch = 90;
				angle += 90;
			}
			A_FadeIn(1.0,FTF_CLAMP);
		}
		"####" "#" 1 
		{
			// Keep 'shrinking'. NEVER fade out!
			
			if (user_neg)
			{
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X >= 0)	{ return ResolveState("Null"); }
			}
			else
			{			
				A_SetScale(Scale.X - (user_scale / Max(1.0, user_time)), Scale.Y);
				if (Scale.X <= 0)	{ return ResolveState("Null"); }
			}
			return ResolveState(null);
		}
		Wait;
	}
}


//By static, I mean non-moving. Not static rifle.
Class TrailBeamStaticScaling : Actor 
{
	enum TBSS
	{
		ZOffset = 16,
		NoSpawn = 256,
		PFlags = WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION|WARPF_COPYVELOCITY|WARPF_ABSOLUTEOFFSET,
	};
	double  user_dist;
	int user_t;
	double  user_timeup;
	double  user_timedown;
	double  user_scale;
	int user_stoff;
	int user_neg;
	double  user_sin;
	int user_wait;
	int user_stage;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		+ROLLSPRITE
		+FLATSPRITE
		+ROLLCENTER
		+BRIGHT
		//RenderStyle "Add";
		XScale 0.16;
		YScale 0.248;
		Species "LaserKillable"; //So the Monster; can 'end' its attack if interrupted.
	}
	States
	{
	Spawn:
		"####" "#" 0 NoDelay
		{
			user_timeup = 10.0;
			user_wait = 30;	//
			user_timedown = 7.0;
			
			// Set this to the actor's same name. The TID will prevent it spawning infinitely (tid * 256).
			A_SpawnItemEx("TrailBeamStaticScaling",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME,tid * 256,1);
			return ResolveState("Setup");
		}
	Setup:
		"####" "#" 0
		{
			
			// If it's a secondary trail (vertical)
			if (tid > 0)	
			{
				roll = pitch + 90.0;
				pitch = 90.0;
				angle += 90.0;
				Thing_ChangeTID(0,0);
			}
			
			user_scale = Scale.X;
			Scale.X = 0;
		}
	Process:
		"####" "#" 1 
		{
			if (!user_stage)
			{
				user_sin += ((user_timeup >= 1.0) ? (90.0/user_timeup) : (90.0 / 35.0));
				A_SetScale(sin(user_sin) * user_scale, Scale.Y);
				if (user_sin >= 90.0)	{	user_stage = 1;	}
			}
			else if (user_stage == 1)
			{
				user_sin = 90.0;
				user_wait--;
				if (user_wait <= 0)		{	user_stage = 2;	}
			}
			else
			{
				user_sin -= ((user_timedown >= 1.0) ? (90.0/user_timedown) : (90.0 / 35.0));
				A_SetScale(sin(user_sin) * user_scale, Scale.Y);
				if (Scale.X <= 0)	{ return ResolveState("Null"); }
			}
			
			return ResolveState(null);
		}
		Wait;
	Death:
		"####" "#" 1
		{
			if (Scale.X <= 0)	{ return ResolveState("Null"); }
			user_sin -= ((user_timedown >= 1.0) ? (90.0/user_timedown) : (90.0 / 35.0));
			A_SetScale(sin(user_sin) * user_scale, Scale.Y);
			return ResolveState(null);
		}
		Wait;
	}
}

//==============================================================================
//==============================================================================
// Laser Spawners
//==============================================================================
//==============================================================================

Class TrailBeamStaticScalingSpawner : Actor 
{
	enum TBSSS
	{
		SpawnFlags = SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE,
	};
	const StepDistance = 31;
	const AngleRandom = 6.0; // The boundaries of angle changing (random(-AngleRandom,AngleRandom))
	const PitchRandom = 6.0; // ^ for pitch
	double user_pitch;
	double user_angle;
	double user_dista, user_distb; 
	double user_checkfova, user_checkfovb;
	int user_checksight;
	double user_checkrangea, user_checkrangeb;
	//[0] = Current distance travelled
	//[1] = How much further to go
	int user_DoCheckRange;
	int user_DoCheckSight;
	int user_DoCheckFOV;
	int user_MaxDistance;
	int user_flags;
	//[0] = Current distance travelled
	//[1] = How much further to go
	Default 
	{
		Projectile;
		+NOCLIP
		+NOINTERACTION
		+NOBLOCKMAP
		RenderStyle "None";
		XScale 0.16;
		YScale 0.25;
		Species "LaserKillable";
	}
	States
	{
	Spawn:
		X202 B 0 NoDelay
		{
			user_MaxDistance = 30000;
			user_DoCheckSight = 0;
			user_DoCheckRange = 0;
			user_DoCheckFOV = 0;
			user_checkrangea = 4096;
			user_checkfova = 90.0;
			
			//Include this if one wishes to spawn a laser which co-works with this one.
			A_SpawnItemEx("TrailBeamJitterSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS);

			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			A_FaceTracer(0,0,0,0,FAF_MIDDLE);
			// Grab the velocity IMMEDIATELY.
			if (target) { vel = target.vel; }
			
			if (user_MaxDistance <= 0)		{	user_MaxDistance = 		30000;	}
			if (user_checkrangea <= 0)		{	user_checkrangea = 		4096;	}
			if (user_checkfova <= 0.0)		{	user_checkfova =		90.0;	}
			
			// The angle and pitch won't change so go ahead and save it now.
			user_pitch = pitch;
			user_angle = angle;
			user_distb = Min(user_MaxDistance, GetDistance(true,TracerPtr));
			
			// user_dista = distance currently travelled.
			// user_distb = maximum distance.
			while ((user_dista < user_distb))
			{
				if (user_DoCheckRange)		{	user_checkrangeb = (!(A_CheckRange(user_checkrangea,"Null",false)) ? 1 : 0);	}
				else						{	user_checkrangeb = 1;	}
				
				if (user_DoCheckSight)		{	user_checksight = (!(A_CheckSight("Null")) ? 1 : 0);	}
				else						{	user_checksight = 1;	}
				
				if (user_DoCheckFOV)		{	user_checkfovb = ((abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) <= user_checkfova) ? 1 : 0);	}
				else						{	user_checkfovb = 1;		}
				
				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				if (user_checkrangeb && user_checksight && user_checkfovb)
				{	A_SpawnItemEx("TrailBeamStaticScaling",cos(pitch) * (StepDistance / 2.0),0,-sin(pitch) * (StepDistance / 2.0),0,0,0,0,SpawnFlags);	}
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				user_dista += StepDistance;
			}
		}
		Stop;
	}
}

Class TrailBeamJitterSpawner : Actor 
{
	const SpawnFlags = 	SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|
						SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERTRANSLATION;
	const Straight = 0.0000000001;
	const StepDistance = 31;
	int user_count;
	int user_choke;
	int user_chokemin;
	int user_chokemax;
	int user_checksight;
	int user_checkrangea, user_checkrangeb;
	double user_x;
	double user_y;
	double user_z;
	double user_pitch;
	double user_angle;
	double user_checkfova, user_checkfovb;
	double user_dista, user_distb;
	//[0] = Current distance travelled
	//[1] = How much further to go
	int user_InRange;
	int user_DoCheckRange;
	int user_DoCheckSight;
	int user_DoCheckFOV;
	int user_MaxDistance;
	double user_AngleRandom;
	double user_PitchRandom;
	Default 
	{
		Projectile;
		+NOCLIP
		+NOINTERACTION
		+NOBLOCKMAP
		RenderStyle "None";
		XScale 0.08;
		YScale 0.25;
		Species "LaserKillable";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_DoCheckRange = 0;			// Use Range Checker? Boolean. 
			user_DoCheckSight = 0;			// Use Sight Checker? Boolean. 
			user_DoCheckFOV = 0;			// Use Angle Checker? Boolean.
			
			user_count = 0; 				// How many tics this should respawn itself.
			user_MaxDistance = 30000;		// The absolute total length it can travel.
			
			user_checkrangea = 4096;		// How far in range it must be for it to spawn for a player.
			user_checkfova = 90.0;		// The FOV this must be in for the player.
			
			// Choke determines how often the laser should reorient itself to 
			// remain on target. The higher it goes, the more sporadic it will be.
			user_chokemin = 1;				// Minimum choke.
			user_chokemax = 7;				// Maximum choke.
			
			// Angle and pitch to randomize whenever not being choked.
			// If you want it straight, use the defined keyword Straight in these
			// parameters.
			user_AngleRandom = 6.0;
			user_PitchRandom = 6.0;
			return ResolveState("Setup");
		}
	Setup:
		TNT1 A 0
		{
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			// Grab the velocity IMMEDIATELY.
			if (target) { vel = target.vel; }
			
			// Establish defaults if unspecified.
			if (user_MaxDistance <= 0)		{	user_MaxDistance = 		30000;	}
			if (user_checkrangea <= 0)	{	user_checkrangea = 	4096;	}
			if (user_chokemin <= 0)			{	user_chokemin = 		1;		}
			if (user_chokemax <= 0)			{	user_chokemax = 		7;		}
			if (user_AngleRandom <= 0.0)	{	user_AngleRandom =		6.0;	}
			if (user_PitchRandom <= 0.0)	{	user_PitchRandom =		6.0;	}
			if (user_checkfova <= 0.0)	{	user_checkfova =		90.0;	}
			
			// The angle and pitch won't change so go ahead and save it now.
			A_FaceTracer(0,0,0,0,FAF_MIDDLE);
			user_pitch = pitch;
			user_angle = angle;
			user_x = pos.x;
			user_y = pos.y;
			user_z = pos.z;
			user_distb = Min(user_MaxDistance, GetDistance(true,TracerPtr));
			user_choke = random(user_chokemin, user_chokemax);
			Scale.X *= 2.5;
			Scale.Y *= 0.485;
			return ResolveState("Sprite");
		}
	Sprite:
		TNT1 A 0 
		{
			A_SetScale(Scale.X*randompick(-1,1), Scale.Y*randompick(-1,1));
			return A_Jump(256,1,2,3,4);
		}
		X206 FGHI 0 { return ResolveState("Moving");	}
	Moving:
		"####" "#" 1
		{
			user_InRange = 0;
		
			// user_dista = distance currently travelled.
			// user_distb = maximum distance.
			// Make sure we always have a valid target.
			while ((user_dista < user_distb))
			{
				// Don't randomize the very first beam.
				if (user_dista > 0)
				{	A_FaceTracer(0,0,0,0,FAF_MIDDLE);	}
				
				// Randomizes the angle of the beams. 
				if (user_dista < (user_distb - StepDistance))
				{
					// If we're not about to reach the end, or not hitting the 
					// choker, randomize it. Otherwise, stay on target and go 
					// for the puff.
					if (user_choke > 0)
					{
						A_SetPitch(pitch + frandom(-user_PitchRandom, user_PitchRandom));
						A_SetAngle(angle + frandom(-user_AngleRandom, user_AngleRandom));
						user_choke--;
					}
					else 
					{	user_choke = random(user_chokemin, user_chokemax);	}
				}
				
				// Check sight, range, and FOV. If disabled, then assume the 
				// check(s) passed. For range, if the range is beyond the player
				// and it previously was, break out of the Loop; and save on 
				// processing time.
				if (user_DoCheckRange)		
				{	
					if (user_checkrangeb > 0.0)
					{	user_InRange = 1;	}
					
					user_checkrangeb = (!(A_CheckRange(user_checkrangea,"Null",false)) ? 1 : 0);
					
					if (!user_checkrangeb && user_InRange)
					{	break;	}
				}
				else						{	user_checkrangeb = 1;	}
				
				if (user_DoCheckSight)		{	user_checksight = (!(A_CheckSight("Null")) ? 1 : 0);	}
				else						{	user_checksight = 1;	}
				
				if (user_DoCheckFOV)		{	user_checkfovb = ((abs(GetAngle(GAF_RELATIVE|GAF_SWITCH,Player1)) <= user_checkfova) ? 1.0 : 0.0);	}
				else						{	user_checkfovb = 1;		}
				
				// Spawn the beam with the same angle and pitch. Note that the
				// beam is being centered so we have to take that into account
				// and spawn it FORWARD based on half the beam's length.
				// Then move forward by a beam's length and repeat until done.
				if (user_checkrangeb && user_checksight && user_checkfovb)
				{	A_SpawnItemEx("LaserBeamJitter",cos(pitch) * (StepDistance / 2.0),0,-sin(pitch) * (StepDistance / 2.0),0,0,0,0,SpawnFlags);	}
				
				A_Warp(DefPtr,cos(pitch) * StepDistance,0,-sin(pitch) * StepDistance,0,WARPF_NOCHECKPOSITION);
				user_dista += StepDistance;
			}
			
			user_count--;
			
			if (user_count <= 0)
			{	return ResolveState("Null");	}
			
			user_dista = 0.0;
			A_Warp(DefPtr,user_x,user_y,user_z,user_angle,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION|WARPF_ABSOLUTEANGLE);
			pitch = user_pitch;
			return ResolveState(null);
		}
		Goto Sprite;
	Death:
		TNT1 A 0;
		Stop;
	}
}

Class LaserBeamJitter : TrailBeam
{
	States
	{
	Spawn:
		"####" "#" 0 NoDelay 
		{
			user_time = 3.0;
			A_SpawnItemEx("LaserBeamJitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERTRANSLATION,tid * 256,1);
			
			return ResolveState("Process");
		}
	}
}

Class WhiteLaserBeamJitter : TrailBeam
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1,1,1]";
	}
	States
	{
	Spawn:
		"####" "#" 0 NoDelay 
		{
			user_time = 3.0;
			A_SpawnItemEx("WhiteLaserBeamJitter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERTRANSLATION,tid * 256,1);
			
			return ResolveState("Process");
		}
	}
}

Class WhiteLaser : TrailBeamJitterSpawner
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[1,1,1]";
	}
	States
	{
	Spawn:
		"####" "#" 0 NoDelay
		{
			user_checkrangea = 1024;
			return ResolveState("Setup");
		}
	}
}

Class RedLaser : TrailBeamJitterSpawner
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[2.0,1.0,1.0]";
		XScale 0.2;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			user_PitchRandom = 12.0;
			user_AngleRandom = 12.0;
			user_count = 0;
			return ResolveState("Setup");
		}
	}
}