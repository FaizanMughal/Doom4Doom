//==============================================================================
//==============================================================================
//
//								SuperShotgun
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Original Code: DBThanatos
//	Code rewrite + layer support: Major Cooke
//	Offset tweaks: Xaser
//
//==============================================================================
//==============================================================================
const PitchKick = 4.0;
Class D4SuperShotgunDuo : Inventory {	Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 2;		Inventory.InterhubAmount 2; } }

const SSGReloadVolume = 0.3;
Class D4SuperShotgun : Doom4Weapon //replaces SuperShotgun
{
	int hoffset;
	name RP;
	enum SuperShotgun
	{
		DmgBase = 		5,
		DmgMulMin = 	1,
		DmgMulMax = 	3,
		FCMFlags =		FPF_NOAUTOAIM,
	};
	const SpreadXY = 11.2;
	const SpreadZ = 7.1;
	Default 
	{
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOALERT
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.SlotNumber 1;
		Inventory.PickupMessage "Super Shotgun! Just like the old times!";
		Obituary "%o ate %k's double dose of buckshot for breakfast.";
		Tag "Super Shotgun";
		Weapon.AmmoType1 "D4Shells";
		Weapon.AmmoGive1 8;
		Weapon.AmmoUse1 1;
		Weapon.SelectionOrder 10;
		Scale 0.75;
		+DONTGIB
	}
	States
	{
	Spawn:
		WPPK D -1;
		Stop;

	//First off, set up the overlays before raising it up. I'm going to use the
	//entire weapon as one massive overlay -- the actual listening layer you're
	//used to calling the weapon itself, is actually permanently invisible from
	//here on out.
	
	// Layer numbers that are off limits:
	// -1, 0, and 1. DO NOT USE A_OVERLAY ON THOSE LAYERS. EVER.
	// You have from
	// -2147483647
	//  to
	//  2147483644 [1]
	// layers at your disposal.
	
	// [1]-The very last three are also reserved. Don't use them.
	
	// How do they behave? Like layers in photoshop or gimp. The higher the
	// number, the higher the drawing priority. Easy enough to understand so far,
	// yes?
	
	// Now, first thing you'll want to do is, right after spawning the overlay,
	// give it flags. See http://zdoom.org/wiki/A_OverlayFlags for more information.
	// I've included some handy See Also links at the bottom there too.
	Select:
		M666 A 0;
		M666 A 0
		{
			ACS_NamedExecute("RemoveModText",0,0,0,0); //clears previous wep text
			if (CountInv("SSGUpgrade4"))						//Two shotguns?
			{
				//SSR = Super Shotgun Right
				//SSL = Super Shotgun Left
				A_SetInventory("SSLSecondShotToken",0);
				A_SetInventory("SSRSecondShotToken",0);
				A_Overlay(RGun,"SSR.Ready");
				A_Overlay(LGun,"SSL.Ready");							//Draw the second one.
			}
			else
			{
				A_Overlay(RGun,"SSN.Ready"); //Normal shotgun with hands.
			}
			A_OverlayFlags(LGun,WeapMoveBob,true);			//Make it follow the 'weapon'. See the constant above.
			A_OverlayFlags(RGun,WeapMoveBob,true);
			return ResolveState(null);
		}
	// We should now have one or both shotguns raising up.
		M666 A 1 A_Raise;
		M666 A 0 A_Raise(WeaponSwitchSpeed);
		Loop;
	Deselect:
		"----" A 0 
		{
			A_Overlay(GunWatcher,"Null");
			A_Overlay(SwitchWatcher,"Null");
			A_SetInventory("SSLSecondShotToken",0);
			A_SetInventory("SSRSecondShotToken",0);
		}
	DesLoop:
		"----" A 1 A_Lower;
		"----" A 0 A_Lower(WeaponSwitchSpeed);
		Loop;
		
		
	Ready:
		M666 A 0 
		{
			A_Overlay(SwitchWatcher,"SwitchWatcher",true);
			if (CountInv("SSGUpgrade4"))
			{	
				A_Overlay(RGun,"SSR.Ready",true);
				A_Overlay(LGun,"SSL.Ready",true);
				A_Overlay(GunWatcher,"SSG.Listen");
				return ResolveState("ReadyLoop"); 
			}
			return ResolveState(1);
		}
		DW4A A 0;
		Goto ReadyLoop;
	ReadyLoop:
		"----" A 1 
		{
			if (!CountInv("SSGUpgrade4"))
			{	A_WeaponReady((!CountInv("BusyToken")) ? WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_ALLOWUSER2 : WRF_NOSWITCH);	}
			else
			{	
				// Follow the weapon.
				A_OverlayFlags(LGun,WeapMove,true);
				A_OverlayFlags(RGun,WeapMove,true);
				A_Overlay(GunWatcher,"SSG.Listen",true);
				if (CountInv("SSLSecondShotToken") > 1 && CountInv("SSRSecondShotToken") > 1)
				{	// Both are reloading.
					A_OverlayFlags(LGun,WeapBob,false);
					A_OverlayFlags(RGun,WeapBob,false);	
					A_WeaponReady(WRF_NOFIRE);
				}
				else if (CountInv("SSLSecondShotToken") > 1)
				{	// Left is reloading. Right is ready.
					A_OverlayFlags(LGun,WeapBob,false);
					A_OverlayFlags(RGun,WeapBob,true);
					A_WeaponReady(WRF_NOFIRE);
				}
				else if (CountInv("SSRSecondShotToken") > 1)
				{	// Right is reloading. Left is ready.
					A_OverlayFlags(LGun,WeapBob,true);
					A_OverlayFlags(RGun,WeapBob,false);
					A_WeaponReady(WRF_NOFIRE);
				}
				else
				{	// Both are ready.
					A_OverlayFlags(LGun,WeapBob,true);
					A_OverlayFlags(RGun,WeapBob,true);
					A_WeaponReady((!CountInv("BusyToken")) ? WRF_NOFIRE|WRF_ALLOWRELOAD|WRF_ALLOWUSER2 : WRF_NOFIRE|WRF_NOSWITCH);
				}
			}
			return ResolveState(null);
		}
		Goto Ready;
	SwitchWatcher:
		M666 A 1
		{
			if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_USER1) &&
				!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_USER1))
			{
				ACS_NamedExecute("ToggleDoubleTrouble",0,0,0,0);
			}
		}
		Loop;
	//==========================================================================
	//==========================================================================
	// The other states.
			
	SSN.Ready:
		DW4A A -1;
		Stop;
	SSR.Ready:
		M665 A -1;
		Stop;
	SSL.Ready:
		M664 A -1;
		Stop;
	//-------------------------------------------------------
	// Primary Fire
	//-------------------------------------------------------
	Fire:
		M666 A 1
		{
			
			if (!CountInv("SSGUpgrade4"))
			{
				A_Overlay(LGun,"Null");
				A_Overlay(RGun,"Null");
			}
			
			if (CountInv("D4Shells") > 1 || GetCvar("sv_infiniteammo") > 0) 
			{	return ResolveState("FireSingle");	}
			return ResolveState("HoldNoRef");
		}
	Hold:
	HoldNoRef:
		M666 A 1;
		M666 A 0 A_Refire("HoldNoRef");
		M666 A 0 A_TakeInventory("FireToken",32767);
		Goto Ready;
	FireSingle:
		DW4A B 1 Bright
		{			
			if (GetCvar("D4D_DTMode") || CountInv("SSRSecondShotToken"))
			{	
				A_Overlay(RGunFX,"SSR.FX");
				A_Overlay(RGunFire,"SSR.FireBullets");
				A_GiveInventory("SSRSecondShotToken",1);
				A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_WEAPON,1);
			}
			else								
			{
				A_Overlay(RGunFX,"SSR.FX");
				A_Overlay(RGunFX2,"SSR.FX");
				A_Overlay(RGunFire,"SSR.FireBullets");
				A_Overlay(RGunFire2,"SSR.FireBullets");
				A_GiveInventory("SSRSecondShotToken",2);
				A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",7,1);
			}
			
			if (CountInv("SSRSecondShotToken") > 1)
			{
				if (CountInv("SSGUpgrade1"))
					return ResolveState("FastReload");
				return ResolveState("NormalReload");
			}
			A_WeaponOffset(12, 36);
			return ResolveState(1);
		}
	NoReload:
		DW4A B 1 Bright { A_WeaponOffset(24,39); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);}
		DW4A B 1 Bright { A_WeaponOffset(32,46); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		DW4A C 1        { A_WeaponOffset(20,41); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);}
		DW4A C 1        { A_WeaponOffset(16,38); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		DW4A C 1        { A_WeaponOffset( 8,36); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);}
		DW4A D 1        { A_WeaponOffset( 4,34); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		DW4A D 1        { A_WeaponOffset( 1,33); A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY); }
		DW4A D 1 A_WeaponReady(WRF_NOBOB|WRF_NOSECONDARY);
		Goto Ready;
		
		
	NormalReload:	//49 tics total, exactly as in v1.01.4
		DW4A B 0 A_Overlay(5000, "Overlay.ReloadSoundNormal");
		DW4A B 1 Bright { A_WeaponOffset(24,39); A_TakeInventory("SSRSecondShotToken",32767); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A B 1 Bright { A_WeaponOffset(32,46); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A C 1        { A_WeaponOffset(28,45); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A C 1        { A_WeaponOffset(24,43); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A C 1        { A_WeaponOffset(20,41); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A D 1        { A_WeaponOffset(18,39); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A D 1        { A_WeaponOffset(16,38); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A E 1 { A_WeaponOffset(-2,3,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A E 1 { A_WeaponOffset(-2,3,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A E 1 { A_WeaponOffset(-2,3,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A E 1 { A_WeaponOffset(-2,3,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A F 2	//13
		{
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			A_WeaponOffset(-2,2,WOF_ADD);
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}	
		DW4A GHIJ 2 { A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A KKLL 2 { A_WeaponOffset(-1,2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A MMNN 2 { A_WeaponOffset(1,-2,WOF_ADD);	A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A O 2 { A_WeaponOffset(8,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A O 2 { A_WeaponOffset(0,36); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A PP 1 { A_WeaponOffset(2,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A P 1 { A_WeaponOffset(0,32); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A QQ 2 { A_WeaponOffset(3,3,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A A 1 { A_WeaponReady(WRF_NOFIRE); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		Goto Ready;
		
		

	FastReload:	//34 tics total, exactly as in v1.01.4
		DW4A B 0 A_Overlay(5001, "Overlay.ReloadSoundFast");
		DW4A B 1 Bright { A_WeaponOffset(24,39); A_TakeInventory("SSRSecondShotToken",32767); }
		DW4A B 1 Bright { A_WeaponOffset(32,46); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A C 1        { A_WeaponOffset(28,45); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A C 1        { A_WeaponOffset(24,43); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A C 1        { A_WeaponOffset(20,41); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A D 1        { A_WeaponOffset(18,39); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A D 1        { A_WeaponOffset(16,38); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A E 1 		{ A_WeaponOffset(-4,6,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A E 1		{ A_WeaponOffset(-4,6,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A F 1	//10
		{
			A_WeaponOffset(-2,2,WOF_ADD);
			A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		
		DW4A GHIJ 2; // From 8 to 4
		DW4A K 1 { A_WeaponOffset(-1,2,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A K 1 { A_WeaponOffset(-1,2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A L 1 { A_WeaponOffset(-1,2,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A L 1 { A_WeaponOffset(-1,2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);}
		DW4A M 1 { A_WeaponOffset(1,-2,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A M 1 { A_WeaponOffset(1,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A N 1 { A_WeaponOffset(1,-2,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A N 1 { A_WeaponOffset(1,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A O 1 { A_WeaponOffset(8,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A O 1 { A_WeaponOffset(0,36); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A P 1 { A_WeaponOffset(2,-2,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A P 1 { A_WeaponOffset(2,-2,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A P 1 { A_WeaponOffset(0,32); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A Q 1 { A_WeaponOffset(3,3,WOF_ADD); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A Q 1 { A_WeaponOffset(3,3,WOF_ADD); A_WeaponReady(WRF_NOFIRE|WRF_NOBOB); }
		DW4A A 0 A_WeaponReady(WRF_NOFIRE);
		Goto Ready;
	SSL.FireBullets:
		M666 A 0
		{
			invoker.hoffset = -5;
			return ResolveState("SSGFireBullets");
		}
	SSR.FireBullets:
		M666 A 0
		{
			invoker.hoffset = 5;
			return ResolveState("SSGFireBullets");
		}
	SSGFireBullets:
		M666 A 0
		{
			double newspread = (CountInv("SSGUpgrade3") ? 7.1 : 11.2);
			//-----------------------------------------------------
			// Double trouble section
			A_TakeInventory("D4Shells",1,TIF_NOTAKEINFINITE);
			A_GunFlash("Null");
			
			Class<Actor> PuffRail = null;
			if(GetCvar("D4D_SSGGib") == 0)	//no gibs
				PuffRail = "D4BulletPuffForRails";
			else if(GetCvar("D4D_SSGGib") == 1)	//some gibs
				PuffRail = (random(0,1) ? "D4BulletPuffForRails" : "D4BulletPuffForRailsExtreme");
			else	//all gibs
				PuffRail = "D4BulletPuffForRailsExtreme";
			
			
			if(CountInv("SSGUpgrade2"))	//if you have piercing shots
			{
				
				for (int i = 0; i < 10; i++)
				{
					double sprs = 10.415 * 4.0;
					if (i < 7)	{	A_RailAttack(DmgBase*random(DmgMulMin,DmgMulMax),invoker.hoffset,0,-1,-1,RGF_SILENT|RGF_EXPLICITANGLE,0,PuffRail,frandom(-newspread,newspread),frandom(-SpreadZ,SpreadZ));	}//,0,0,8192,0,"BulletSmallTracer");	}
					else		{	A_RailAttack(DmgBase*random(DmgMulMin,DmgMulMax),invoker.hoffset,0,-1,-1,RGF_SILENT|RGF_EXPLICITANGLE,0,PuffRail,frandom(-newspread,newspread),frandom(-SpreadZ,SpreadZ));	}
				}
				A_FireBullets(CountInv("SSGUpgrade3") ? SpreadZ : SpreadXY,SpreadZ,7,0,"PacifistPuff",FBF_NORANDOMPUFFZ|FBF_PUFFTRACER,0,"BulletSmallTracer",0,invoker.hoffset);
			}
			else //if you dont have piercing shots, then you're in normal state
			{
				A_FireBullets(CountInv("SSGUpgrade3") ? SpreadZ : SpreadXY,SpreadZ,7,DmgBase,PuffRail,FBF_PUFFTRACER,0,"BulletSmallTracer",0,invoker.hoffset);
				A_FireBullets(CountInv("SSGUpgrade3") ? SpreadZ : SpreadXY,SpreadZ,3,DmgBase,PuffRail,FBF_PUFFTRACER,0,null,0,invoker.hoffset);
			}
			
			//-----------------------------------------------------
			// Rest of the animation
			A_AlertMonsters();
			
			for (int i = P1; i <= P4; i++)
			{
				if (A_Overlay(i, "SSG.PitchKicker", true))
					break;
			}
		}
		Stop;
	
	SSG.PitchKicker:
		M666 A 1 
		{
			A_ZoomFactor(0.985,ZOOM_NOSCALETURNING);
			A_SetPitch(pitch-PitchKick,SPF_INTERPOLATE);
		}
		M666 AA 1 A_SetPitch(pitch+(PitchKick / 4.0));
		M666 A 1 { A_SetPitch(pitch+(PitchKick / 4.0)); A_ZoomFactor(1,ZOOM_NOSCALETURNING); }
		M666 A 1 A_SetPitch(pitch+(PitchKick / 4.0));
		Stop;
	
	SSG.Listen:
		M666 A 1
		{
			// Have ammo?
			if (!A_JumpIfNoAmmo("Null") && !CountInv("BusyToken"))
			{
				// Primary shoots left
				if ((CountInv("SSLSecondShotToken") < 2) &&
					(GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))
				{	A_Overlay(LGun,"SSL.Fire");	}
				
				// Secondary shoots right
				if ((CountInv("SSRSecondShotToken") < 2) &&
					(GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK))
				{	A_Overlay(RGun,"SSR.Fire");	}
			}
		}
		Loop;
	
	Overlay.ReloadSoundNormal:
		TNT1 A 5;
		TNT1 A 1 A_PlaySound("Doom4/Weapon/SuperShotgun/Open",5,SSGReloadVolume);
		TNT1 A 10 A_PlaySound("Doom4/Weapon/SuperShotgun/EjectShell",6,SSGReloadVolume);
		TNT1 A 6 A_PlaySound("Doom4/Weapon/SuperShotgun/ShellClick",5,SSGReloadVolume); 
		TNT1 A 16 A_PlaySound("Doom4/Weapon/SuperShotgun/Load",6,SSGReloadVolume);
		TNT1 A 1 A_PlaySound("Doom4/Weapon/SuperShotgun/Close",5,SSGReloadVolume);
		Stop;
	Overlay.ReloadSoundFast:
		TNT1 A 11;
	Overlay.ReloadSoundSanicDaHedgahmahoggy: // Crackhead getting crack, speed, and cocaine at once makes him super.
		TNT1 A 1
		{
			// Replace the channel that's closer to finishing.
			int channel = (S_GetLength(5) > S_GetLength(6)) ? 6 : 5;
			A_PlaySound("Doom4/Weapon/SuperShotgun/FullReload", channel, SSGReloadVolume);
		}
		Stop;
	
	//==========================================================================
	//==========================================================================
	// Dual SSGs
	
	// Now here's the thing about offsets when setting them on overlays with 
	// PSPF_ADDWEAPON flags: They inherit the base weapon's offsets, which means
	// it already has the y value. So take 32 from the y value on all
	// A_OverlayOffset calls for those layers. (Does not apply for the weapon
	// layer itself!)
	SSR.Fire:
		M665 B 1 Bright 
		{
			//A_OverlayOffset(RGun,12,36-32);
			A_OverlayOffset(RGun,12,5,WOF_ADD);
			
			if (!GetCvar("D4D_DTMode") && !CountInv("SSRSecondShotToken"))
			{
				A_Overlay(RGunFX,"SSR.FX");
				A_Overlay(RGunFX2,"SSR.FX");
				A_Overlay(RGunFire,"SSR.FireBullets");
				A_Overlay(RGunFire2,"SSR.FireBullets");
				A_GiveInventory("SSRSecondShotToken",2);
				A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_WEAPON,1);
			}
			else
			{
				A_Overlay(RGunFX,"SSR.FX");
				A_Overlay(RGunFire,"SSR.FireBullets");
				A_GiveInventory("SSRSecondShotToken",1);
				
				if (CountInv("SSRSecondShotToken") < 2)
					A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_BODY,1);
				else
					A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_WEAPON,1);
				
			}
		}
		M665 B 1 bright
		{
			//A_OverlayOffset(RGun,24,39-32);
			A_OverlayOffset(RGun,12,5,WOF_ADD);
			return A_JumpIfInventory("SSRSecondShotToken",2,"SSR.Reload");
		}
		M665 C 1 A_OverlayOffset(RGun,6,3,WOF_ADD);	//30 13
		M665 C 1 A_OverlayOffset(RGun,-8,-5,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-7,-3,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-6,-2,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-5,-2,WOF_ADD);
		M665 A 1 A_OverlayOffset(RGun,-4,-1,WOF_ADD);
		M665 A 0 A_OverlayOffset(RGun,0,32-32);
		Goto SSR.Ready;
	SSR.Reload:
		M665 C 0 
		{
			StateLabel next = null;
			if (CountInv("PowerD4DFS"))
			{
				next = "SSR.ReloadFast";
				A_Overlay(5002, "Overlay.ReloadSoundSanicDaHedgahmahoggy");
			}
			else
				A_Overlay(5001, "Overlay.ReloadSoundFast");
			
			return ResolveState(next);
		}
		M665 C 1 A_OverlayOffset(RGun,6,3,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-8,-5,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-7,-3,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-6,-2,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-5,-2,WOF_ADD);
		M665 A 1 A_OverlayOffset(RGun,-4,-1,WOF_ADD); //6
		
		M665 DDDDEE 1 A_OverlayOffset(RGun,2,6,WOF_ADD); //6
		
		"####" "#" 0
		{
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		M665 FFFF 1 A_OverlayOffset(RGun,-2,2,WOF_ADD);
		M665 FFFF 1 A_OverlayOffset(RGun,2,-2,WOF_ADD);	//8
		M665 GGGGG 1; 	//5

		
		M665 HHII 1 A_OverlayOffset(RGun,2,-8,WOF_ADD);
		M665 JJJJ 1 A_OverlayOffset(RGun,1,3,WOF_ADD);	//8
		M665 A 0 
		{
			A_OverlayOffset(RGun,0,32-32);
			A_TakeInventory("SSRSecondShotToken",32767,0);
		}
		Goto SSR.Ready;
		
	SSR.ReloadFast:
		M665 C 1 A_OverlayOffset(RGun,6,3,WOF_ADD);
		M665 C 0 A_OverlayOffset(RGun,-8,-5,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-7,-3,WOF_ADD);
		M665 C 0 A_OverlayOffset(RGun,-6,-2,WOF_ADD);
		M665 C 1 A_OverlayOffset(RGun,-5,-2,WOF_ADD);
		M665 A 0 A_OverlayOffset(RGun,-4,-1,WOF_ADD); //6
		
		M665 DDE 1 A_OverlayOffset(RGun,2*2,6*2,WOF_ADD); //6
		"####" "#" 0
		{
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		M665 FF 1 A_OverlayOffset(RGun,-4,4,WOF_ADD);
		M665 FF 1 A_OverlayOffset(RGun,4,-4,WOF_ADD);	//8
		M665 GG 1 ;	//5

		
		M665 HI 1 A_OverlayOffset(RGun,4,-16,WOF_ADD);
		M665 JJ 1 A_OverlayOffset(RGun,2,6,WOF_ADD);	//8
		M665 A 0 
		{
			A_OverlayOffset(RGun,0,32-32);
			A_TakeInventory("SSRSecondShotToken",32767,0);
		}
		Goto SSR.Ready;
		
	SSR.FX:
		M666 A 0
		{
		//	A_SpawnItemEx("SSGFireNoise", flags: SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER);
			if (GetCvar("HQEffectsWeapons"))
			{
				A_FireProjectile("SGSmokeSpawner",0,0,4,2);
				A_FireProjectile("SGSmokeSpawner",0,0,5,2);
				A_FireProjectile("SGSmokeSpawner",0,0,6,2);
			}
		}
		Stop;
	//==========================================================================
	SSL.Fire:
		M664 B 1 Bright
		{
			A_OverlayOffset(LGun,-12,5,WOF_ADD);
			if (!GetCvar("D4D_DTMode") && !CountInv("SSLSecondShotToken"))
			{
				A_Overlay(LGunFX,"SSL.FX");
				A_Overlay(LGunFX2,"SSL.FX");
				A_Overlay(LGunFire,"SSL.FireBullets");
				A_Overlay(LGunFire2,"SSL.FireBullets");
				A_GiveInventory("SSLSecondShotToken",2);
				A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_WEAPON,1);
			}
			else
			{
				A_Overlay(LGunFX,"SSL.FX");
				A_Overlay(LGunFire,"SSL.FireBullets");
				
				A_GiveInventory("SSLSecondShotToken",1);
				
				if (CountInv("SSLSecondShotToken") < 2)
					A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_BODY,1);
				else
					A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",CHAN_WEAPON,1);	
				
			}
		}
		M664 B 1 Bright 
		{
			A_OverlayOffset(LGun,-12,5,WOF_ADD);
			return A_JumpIfInventory("SSLSecondShotToken",2,"SSL.Reload");
		}
		M664 C 1 A_OverlayOffset(LGun,-6,3,WOF_ADD);	//30 13
		M664 C 1 A_OverlayOffset(LGun,8,-5,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,7,-3,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,6,-2,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,5,-2,WOF_ADD);
		M664 A 1 A_OverlayOffset(LGun,4,-1,WOF_ADD);
		M664 A 0 A_OverlayOffset(LGun,0,32-32);
		Goto SSL.Ready;
	SSL.Reload:
		M664 C 0 
		{
			StateLabel next = null;
			if (CountInv("PowerD4DFS"))
			{
				next = "SSR.ReloadFast";
				A_Overlay(5004, "Overlay.ReloadSoundSanicDaHedgahmahoggy");
			}
			else
				A_Overlay(5003, "Overlay.ReloadSoundFast");
			
			return ResolveState(next);
		}
		M664 C 1 A_OverlayOffset(LGun,-6,3,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,8,-5,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,7,-3,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,6,-2,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,5,-2,WOF_ADD);
		M664 A 1 A_OverlayOffset(LGun,4,-1,WOF_ADD);
		
		M664 DDDDEE 1 A_OverlayOffset(LGun,-2,6,WOF_ADD) ;
		"####" "#" 0
		{
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		M664 FFFF 1 A_OverlayOffset(LGun,2,2,WOF_ADD);
		M664 FFFF 1 A_OverlayOffset(LGun,-2,-2,WOF_ADD)	;
		M664 GGGGG 1;

		
		M664 HHII 1 A_OverlayOffset(LGun,-2,-8,WOF_ADD);
		M664 JJJJ 1 A_OverlayOffset(LGun,-1,3,WOF_ADD)	;
		M664 A 0 
		{
			A_OverlayOffset(LGun,0,32-32);
			A_TakeInventory("SSLSecondShotToken",32767,0);
		}
		Goto SSL.Ready;
	SSL.ReloadFast:
		M664 C 1 A_OverlayOffset(LGun,-6,3,WOF_ADD);
		M664 C 0 A_OverlayOffset(LGun,8,-5,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,7,-3,WOF_ADD);
		M664 C 0 A_OverlayOffset(LGun,6,-2,WOF_ADD);
		M664 C 1 A_OverlayOffset(LGun,5,-2,WOF_ADD);
		M664 A 0 A_OverlayOffset(LGun,4,-1,WOF_ADD);
		
		M664 DDE 1 A_OverlayOffset(LGun,-4,12,WOF_ADD);
		"####" "#" 0
		{
			if (GetCvar("D4D_Casings"))
			{
				A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		M664 FF 1 A_OverlayOffset(LGun,4,4,WOF_ADD);
		M664 FF 1 A_OverlayOffset(LGun,-4,-4,WOF_ADD);
		M664 GG 1 ;

		
		M664 HI 1 A_OverlayOffset(LGun,-4,-16,WOF_ADD);
		M664 JJ 1 A_OverlayOffset(LGun,-2,6,WOF_ADD);
		M664 A 0 
		{
			A_OverlayOffset(LGun,0,32-32);
			A_TakeInventory("SSLSecondShotToken",32767,0);
		}
		Goto SSL.Ready;

		
	SSL.FX:
		M666 A 0
		{
			//A_SpawnItemEx("SSGFireNoise",flags: SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_SETMASTER);
			if (GetCvar("HQEffectsWeapons"))
			{
				A_FireProjectile("SGSmokeSpawner",0,0,-4,2);
				A_FireProjectile("SGSmokeSpawner",0,0,-5,2);
				A_FireProjectile("SGSmokeSpawner",0,0,-6,2);
			}
		}
		Stop;
	}
}

Class SSGFireNoise : Actor
{
	Vector3 Diff;
	Default
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		+INVISIBLE
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			A_PlaySound("Doom4/Weapon/SuperShotgun/Fire",5);
			if (!Target)	return Destroy();
			Diff = Target.pos - pos;
		}
		TNT1 A 1
		{
			if (S_GetLength(5) <= 0.0 || !Target)
				return Destroy();
			Vel = Target.Vel;
			double cam = Target.GetCameraHeight();
			SetXYZ(Target.pos + (0,0,cam));
		}
		Wait;
	}
}

Class SSRSecondShotToken : Inventory	{ 	Default { Inventory.MaxAmount 2;	} }
Class SSLSecondShotToken : Inventory	{	Default { Inventory.MaxAmount 2;	} }

Class D4BulletPuffForRails : D4BulletPuff
{	Default { +ALWAYSPUFF	}	}

Class D4BulletPuffForRailsExtreme : D4BulletPuffForRails
{	Default { +EXTREMEDEATH	}	}



//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Casing
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//	Normal SSG
Class SSGCasingSpawner : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 18;
	const YOff = 11;
	const ZOff = 34;
	double  pos;
	int t;
	
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		/*RenderStyle "Add";
		Alpha 0.1*/
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (master) { pitch = master.pitch; }
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	A_SpawnItemEx("ShellCasingSilent",0,0,0,frandom(0.5,-0.5),frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("ShellCasing",0,0,0,frandom(0.5,-0.5),frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
			}
		}
		Stop;
	}
}

//	Double SSG, right
Class SSGCasingSpawnerRight : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 18;
	const YOff = 11;
	const ZOff = 31;
	double  pos;
	int t;
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		/*RenderStyle "Add";
		Alpha 0.1*/
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (master) { pitch = master.pitch; }
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
			
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	A_SpawnItemEx("ShellCasingSilent",0,0,0,frandom(0.5,-0.5),frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("ShellCasing",0,0,0,frandom(0.5,-0.5),frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
			}
		}
		Stop;
	}
}

//	Double SSG, Left
Class SSGCasingSpawnerLeft : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 18;
	const YOff = -11;
	const ZOff = 31;
	double  pos;
	int t;
	Default 
	{
		Projectile;
		+NOINTERACTION
		Scale 0.30;
		Alpha 0.0;
		RenderStyle "None";
		Translation "0:255=%[0,0,0]:[0,1,0]";
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (master) { pitch = master.pitch; }
			
			if (pitch > 0) //Looking down
			{	pos = (sin(pitch) * 12);	}
			else //Looking up
			{	pos = (sin(pitch) * 6);	}
			
			A_Warp(MasterPtr,
				(cos(-pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);
				
			if (GetCvar("D4D_Casings"))
			{
				if (GetCvar("D4D_SilentCasings"))
				{	A_SpawnItemEx("ShellCasingSilent",0,0,0,frandom(0.5,-0.5),-frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
				else
				{	A_SpawnItemEx("ShellCasing",0,0,0,frandom(0.5,-0.5),-frandom(2,4),frandom(0.8,1.6),0,SXF_NOCHECKPOSITION);	}
			}
		}
		Stop;
	}
}