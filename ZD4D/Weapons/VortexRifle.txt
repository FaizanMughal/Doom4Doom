
//===================================================================================================
//===================================================================================================
//
//		Vortex rifle
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Code: DBThanatos
//
//===================================================================================================
//===================================================================================================
// Primary fire: Regular shot. Pierces enemies
// Secondary fire: Zooms and charges up shot, deals x1.5 as regular primary, doesnt pierce
//   Upgrades:
// ->VortexUpgradeDamage: Increases BASE damage only, that is, unzoomed and base damage when charging
// ->VortexUpgradeAmmo: Decreases ammo usage from 15 to 10
// ->VortexUpgradeAltSpeed: Removes the player slowdown while aiming with the scope
// ->VortexUpgradeAltPierce: Allows alt fire to pierce monsters
//===================================================================================================
const Sparsity = 10.415;

enum VortexRifleProps
{
	FlagsNoPierce = RGF_NORANDOMPUFFZ|RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,
	FlagsPierce = 	RGF_NORANDOMPUFFZ|RGF_SILENT|RGF_FULLBRIGHT,
	VortexRifle_AmmoCostN =	12,
	VortexRifle_AmmoCostU =	8,
};


Class D4VortexRifle : Doom4Weapon
{
	/*
	enum VortexRifle
	{
		FlagsNoPierce = 	RGF_NORANDOMPUFFZ|RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,
		FlagsPierce = 		RGF_NORANDOMPUFFZ|RGF_SILENT|RGF_FULLBRIGHT,
	};
	const Sparsity = 10.415;
	*/
	Default 
	{
		+FLOORCLIP
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+WEAPON.NOAUTOFIRE
		+WEAPON.NOALERT
		Scale 0.6;
		Weapon.AmmoType1 "D4Cells";
		Weapon.AmmoType2 "D4Cells";
		Weapon.AmmoGive1 350;
		Weapon.AmmoUse1 12;	//doesnt matter, since it's taken manually in the weapon code
		Weapon.AmmoUse2 0;
		
		Obituary "%k's mad sniper skills are too much for %o.";
		Inventory.PickupMessage "Vortex Rifle! A sniper's delight!";
		Tag "Vortex Rifle";
	}
	
	States
	{
	Spawn:
		WPPK M -1;
		Wait;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		VTXG A 0 
		{
			A_StopSound(5);
			A_TakeInventory("VortexZoomed",32768);
			A_TakeInventory("VortexReloadPositionTracker",32768);
			A_TakeInventory("VortexEnoughAmmo",32768);
			A_TakeInventory("VortexCharges",32768);
			A_ZoomFactor(1.00);
			A_SetSpeed(1.0);
		}
		VTXG A 1 A_Lower;
		VTXG A 0 A_Lower(WeaponSwitchSpeed);
		Loop;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		VTXG A 0 ACS_NamedExecute("RemoveModText",0,0,0,0);
		VTXG A 1 A_Raise;
		VTXG A 0 A_Raise(WeaponSwitchSpeed);
		Goto Select+1;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
		VTXG A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Loop;
		
	//===========================================================================	
	// Primary fire
	Fire:
		"####" "#" 0 
		{
			invoker.AmmoUse1 = CountInv("VortexUpgradeAmmo") ? VortexRifle_AmmoCostU : VortexRifle_AmmoCostN;
			A_CheckReload();
			
			if (A_JumpIfNoAmmo("Null"))
				return ResolveState("NotEnoughAmmo");
				
			StateLabel next = "FireNormal";
			if (CountInv("VortexZoomed"))	next = "FireZoomed";
			return ResolveState(next);
		}
	NotEnoughAmmo:
		"####" "#" 5 ACS_NamedExecute("NotEnoughAmmo",0,0,0);
		"####" "#" 0
		{
			if(CountInv("VortexZoomed"))
			{	return ResolveState("AltFireHolding");	}
			else
			{	return ResolveState("Ready");	}
		}
		Goto Ready;
		
		
	FireNormal:
		VTXG B 2 Bright
		{
			A_PlaySound("Doom4/Weapon/Vortex/Fire",CHAN_WEAPON);
			
			//normal, min 100, max 300, avg 200
			//upgraded, min 200, max 400, avg 300
			A_GunFlash("Null");
			if (GetCvar("vid_renderer"))	//gzdoom
			{
				A_RailAttack(CountInv("VortexUpgradeDamage") ? 25*random(8,16) : 20*random(5,15) ,4,0,"","",RGF_SILENT|RGF_FULLBRIGHT|RGF_NORANDOMPUFFZ,0,null,0,0,32767,0,Sparsity,0.0,"VortexTrail"); 
			}
			else	//zdoom
			{ 
				A_RailAttack(CountInv("VortexUpgradeDamage") ? 25*random(8,16) : 20*random(5,15) ,4,0,"","",RGF_SILENT|RGF_FULLBRIGHT|RGF_NORANDOMPUFFZ,0,null,0,0,32767,0,1.5 ,0.0,"VortexTrailSoftware");
			}
			
			//Ammo, checks for upgrade, takes either 12 or 8
			A_TakeInventory("D4Cells",CountInv("VortexUpgradeAmmo") ? 8 : 12,TIF_NOTAKEINFINITE);
			
			A_AlertMonsters();
			A_SetPitch(pitch-3);
			A_OverlayOffset(1,24,18,WOF_Add);
		}
		VTXG AAAAAA 1 
		{
			A_SetPitch(pitch+0.5);
			A_OverlayOffset(1,-4,-3,WOF_Add);
			//A_WeaponOffset(-4,-3,WOF_Add);
		}
		VTXG A 27 { A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH); A_SetTics(CountInv("PowerD4DFS") ? 15 : 27); }	//it's a one second delay
		Goto Ready;
		
	FireZoomed:
		R016 N 2 Bright
		{
			A_StopSound(5);
			A_PlaySound("Doom4/Weapon/Vortex/Fire",CHAN_WEAPON);
			//when normal, 
			// min charge -> min 100+(1charges*2)=102, max 300+(1charges*2)=302, avg 202
			// max charge -> min 100+(52charges*2)=204, max 300+(52charges*2)=404, avg 304
			
			//when upgraded,
			// min charge -> min 200+(1charge*2)=202, max 400+(1charges*2)=402, avg 302
			// max charge -> min 200+(52charge*2)=304, max 400+(52charges*2)=504, avg 404
			A_GunFlash("Null");
			int dmg = (CountInv("VortexUpgradeDamage") ? (25*random(8,16)) + (CountInv("VortexCharges")*2) : (20*random(5,15)) + (CountInv("VortexCharges")*2));
			int toPierce = CountInv("VortexUpgradeAltPierce")? FlagsPierce : FlagsNoPierce;
			if (GetCvar("vid_renderer"))	//gzdoom
			{
				A_RailAttack(dmg,0,0,0,0,toPierce,0,null,0,0,32767,0,Sparsity,0.0,"VortexTrail"); 
			}
			else	//zdoom
			{
				A_RailAttack(dmg,0,0,0,0,toPierce,0,null,0,0,32767,0,1.5,0.0,"VortexTrailSoftware"); 
			}
			
			//Ammo, checks for upgrade, takes either 15 or 10
			A_TakeInventory("D4Cells",CountInv("VortexUpgradeAmmo") ? 8 : 12,TIF_NOTAKEINFINITE);
			
			A_AlertMonsters();
			A_SetPitch(pitch-1.5);
			A_TakeInventory("VortexCharges",32768);
			A_TakeInventory("VortexEnoughAmmo",32768); //given during the charge-up
			return A_JumpIf(CountInv("PowerD4DFS"),"FireZoomedFast");
		}
		R016 NNNNNN 1 
		{
			A_SetPitch(pitch+0.25);	//restores pitch
		}
		R016 NNNNNNNNNNNNNNNNNNNNNNNNNNN 1	//27 tics, tracks position via token
		{
			A_GiveInventory("VortexReloadPositionTracker",1);
			if (GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK) //if holding alt fire
			{
				return ResolveState(null);	//does nothing
			}
			else //if alt fire released
			{	return ResolveState("UnzoomWhileReloading"); } //goes to unzoom where it tracks the reload position
		}
		Goto ZoomInSounds;
		
	FireZoomedFast:
		R016 NNN 1 
		{
			A_SetPitch(pitch+0.5);	//restores pitch
		}
		R016 NNNNNNNNNNNNN 1
		{
			A_GiveInventory("VortexReloadPositionTracker",1);
			if (GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK) //if holding alt fire
			{
				return ResolveState(null);	//does nothing
			}
			else //if alt fire released
			{	return ResolveState("UnzoomWhileReloading"); } //goes to unzoom where it tracks the reload position
		}
		Goto ZoomInSounds;
			
		UnzoomWhileReloading:
			R016 A 0
			{
				A_StopSound(5);
				A_TakeInventory("VortexZoomed",32768);
				A_ZoomFactor(1.00);
				A_SetSpeed(1.0);
				A_PlaySound("Doom4/Weapon/Shotgun/CancelAim",6);
			}
			VTXG AAAAAAAAAAAAAAAAAAAAAAAAAAA 1;	//27 tics
			VTXG A 0 A_TakeInventory("VortexReloadPositionTracker",32768);
			Goto Ready;
		
	//===========================================================================	
	// Alt fire
	AltFire:
		ZoomIn:
			R016 N 0
			{
				A_GiveInventory("VortexZoomed",1);
				if(CountInv("VortexUpgradeAltSpeed"))
				{
					A_ZoomFactor(3.0);
				}
				else
				{
					A_SetSpeed(0.35);
					A_ZoomFactor(2.0);
				}
			}
		ZoomInSounds:
			R016 N 0
			{
				//checks for ammo, to play or not the charging sound
				if(CountInv("VortexUpgradeAmmo"))
				{
					if(CountInv("D4Cells")>=8 || GetCvar("sv_infiniteammo")) //if enough ammo for 1 shot
					{ A_PlaySound("Doom4/Weapon/Vortex/ZoomIn",5,1,1); A_GiveInventory("VortexEnoughAmmo",1); }
					else		//no ammo, but will still zoom
					{ A_PlaySound("Doom4/Weapon/Machinegun/ZoomIn",5);}
				}
				else //doesnt have ammo upgrade
				{
					if(CountInv("D4Cells")>=12 || GetCvar("sv_infiniteammo"))	//if enough ammo for 1 shot
					{ A_PlaySound("Doom4/Weapon/Vortex/ZoomIn",5,1,1); A_GiveInventory("VortexEnoughAmmo",1); }
					else	//no ammo, but will still zoom
					{ A_PlaySound("Doom4/Weapon/Machinegun/ZoomIn",5);}
				}
			}
			Goto AltFireHolding;
				
			AltFireHolding:
				R016 N 1 Bright
				{
					//charges alt fire
					//it has to check if there was ammo, if not, doesnt "charge" the shot
					//I made it this way to not have to check 4 or so "if"s every tic in this sequence
					if(CountInv("VortexEnoughAmmo"))	
					{	A_GiveInventory("VortexCharges",2);	}
					
					//Weapon ready
					A_WeaponReady(WRF_NOBOB|WRF_NOSWITCH|WRF_NOSECONDARY);
				}	
				R016 N 0
				{
					//checks if alt fire is being held
					if (GetPlayerInput(MODINPUT_BUTTONS|MODINPUT_OLDBUTTONS) & BT_ALTATTACK)
					{
						return ResolveState("AltFireHolding");
					}
					return ResolveState(null);
				}
				Goto AltFireReleaseButton;
					
				AltFireReleaseButton:
					VTXG A 5
					{
						A_StopSound(5);
						A_TakeInventory("VortexZoomed",32768);
						A_TakeInventory("VortexEnoughAmmo",32768); //given during the charge-up
						A_ZoomFactor(1.00);
						A_SetSpeed(1.0);
						A_TakeInventory("VortexCharges",32768);
						A_PlaySound("Doom4/Weapon/Shotgun/CancelAim",6);
					}
					Goto Ready;
	}
}

Class VortexTrailSoftware : Actor 
{	//you cant say i dont love you guys, i even recolored to doom pallete!
	Default 
	{
		+NOINTERACTION
		RenderStyle "Add";
		Scale 0.15;
	}
	States
	{
	Spawn:
		CBA3 BBBBB 1 Bright;
		CBA3 B 1 Bright A_FadeOut(0.05);
		Wait;
	}
}

Class VortexTrail : TrailBeam
{
	Default 
	{
		XScale 0.1;
		YScale 0.25; //Don't touch.
	}
	States
	{
	Spawn:
		X202 H 0 NoDelay
		{
			//pitch *= -1;
			//if (tid) { angle += 180; }
			// user_time = time to shrink to nothing
			user_time = 15.0;
			A_SpawnItemEx("VortexTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
		}
		Goto Process;
	}
}

//--------------------------------------------------------------------------------
//	Weapon tokens

Class VortexCharges : Inventory 	//the charged shot counter
{ Default { Inventory.MaxAmount 52; } }


Class VortexEnoughAmmo : Inventory {}

Class VortexZoomed : Inventory {}

Class VortexReloadPositionTracker : Inventory 
{
	Default 
	{
		Inventory.MaxAmount 27 ;
		Inventory.InterHubAmount 0;
	}
}