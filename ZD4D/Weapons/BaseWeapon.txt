const SparsitySmall = 100.0; //10.415;

Struct FireStraightBeamParams
{
	int damage, spawnofs_xy, flags, duration, spiraloffset, limit;
	bool useammo;
	Color col[2];
	double maxdiff, spread_xy, spread_z, range, driftspeed, spawnofs_z, sparsity;
	Class<Actor> pufftype, spawnclass, spawnstart;
	
	double MaxEffectDistance;
	
	void Init(int dmg = 0)
	{
		damage = dmg;
		useammo = true;
		col[0] = col[1] = 0;
		spawnofs_xy = flags = duration = limit = 0;
		maxdiff = spread_xy = spread_z = range = spawnofs_z = 0.0;
		pufftype = "BulletPuff";
		spawnclass = null;
		spawnstart = null;
		sparsity = driftspeed = 1.0;
		spiraloffset = 270;
		
		MaxEffectDistance = 1024;
	}
	/*
	int damage, 
	int spawnofs_xy = 0, 
	bool useammo = true, 
	color color1 = 0, 
	color color2 = 0, 
	int flags = 0, 
	double maxdiff = 0, 
	class<Actor> pufftype = "BulletPuff", 
	double spread_xy = 0, 
	double spread_z = 0, 
	double range = 0, 
	int duration = 0, 
	double sparsity = 1.0, 
	double driftspeed = 1.0, 
	class<Actor> spawnclass = "none", 
	double spawnofs_z = 0, 
	int spiraloffset = 270, 
	int limit = 0
	*/
}
//==============================================================================
//==============================================================================
//
//		Base weapon for all D4D 
//
//==============================================================================
//==============================================================================
Class Doom4Weapon : Weapon
{
	const GrenadeOverlay = 50;
	const GrenadePrimer = 51;
	const PunchOverlay = 52;
	const PunchSway = 53;
	
	Inventory Modules[2];
	Inventory ActiveMod;
	
	Default 
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		Inventory.PickupSound "Doom4/Other/WeaponPickup";
		Weapon.UpSound "Doom4/Weapons/WeaponSwitch";
		Inventory.RespawnTics 175;
		Tag "REPLACE ME YOU IDIOT!";
	}
	
	/*
	void FireStraightBeam(
			int damage, int spawnofs_xy = 0, bool useammo = true, 
			color color1 = 0, color color2 = 0, int flags = 0, 
			double maxdiff = 0, class<Actor> pufftype = "BulletPuff", 
			double spread_xy = 0, double spread_z = 0, double range = 0, 
			int duration = 0, double sparsity = 1.0, double driftspeed = 1.0, 
			class<Actor> spawnclass = "none", double spawnofs_z = 0, 
			int spiraloffset = 270, int limit = 0)
	
	void FireStraightBeam(FireStraightBeamParams p)
	{
		
		
		A_RailAttack(0, p.spawnofs_xy, false, "Red", "Red", p.flags, p.maxdiff,
					"PacifistPuff", p.spread_xy, p.spread_z, 101, 0, p.sparsity, 1.0, p.spawnstart,
					p.spawnofs_z, 270, p.limit);
		A_RailAttack(0, p.spawnofs_xy, false, "Red", "Red", p.flags, p.maxdiff,
					"PacifistPuff", p.spread_xy, p.spread_z, p.MaxEffectDistance, 0, p.sparsity, 1.0, p.spawnclass, 
					p.spawnofs_z, 270, p.limit);
		A_RailAttack(p.damage, p.spawnofs_xy, p.useammo, "None", "None", p.flags, p.maxdiff,
					p.pufftype, 0, 0, p.range, limit: p.limit);
					
		//A_RailAttack(0,5,0,"Green","Green",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"PacifistPuff",0,0,201,0,SparsitySmall,1.0,"GaussTrailStart");
		//A_RailAttack(400+random(1,150),5,1,"Green","Green",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"GaussShockwave",0,0,0,0,SparsitySmall,1.0,"GaussTrail");
	}
	*/
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	Pickup:
		TNT1 A 0 ACS_NamedExecuteAlways("UpdateWeaponList",0,0,0,0);
		Stop;
	Reload:	//since there's no reload, we used this key to throw grenades
		"####" "#" 1
		{
			if(countinv("FragGrenadeSelected")|| countinv("SyphonGrenadeSelected")|| countinv("MarineHoloSelected"))
			{
				return ResolveState("ThrowGrenade");
			}
			else
			{
				if (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD)
				{	return ResolveState(null);	}
			
				ACS_NamedExecute("GrenadeUnavailPrint",0,4); //print "No grenade available"
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
			}
			return ResolveState(null);
		}
		"####" "#" 0 { return ResolveState("Ready"); }	//goes back to ready
		
	ThrowGrenade:
		"####" "#" 1
		{
			// Prevent message spam.
			if (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD)
			{	return ResolveState(null);	}
			if (CountInv("GrenadeCooldown"))
			{	
				ACS_NamedExecute("GrenadeUnavailPrint",0,5); //print "grenade not ready"
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				return ResolveState(null);
			}
			A_GiveInventory("BusyToken");
			return ResolveState("GrenadeReady");
		}
		"####" "#" 0 { return ResolveState("Ready"); }
		
	GrenadeReady:
		"####" "###" 1 A_WeaponOffset(11,16,WOF_ADD);	//lowers weapon
		"####" "#" 2;
		"####" "#" 15 A_Overlay(GrenadeOverlay,"Overlay.GrenadeToss");	//calls the throwing hand 
		"####" "###" 1 A_WeaponOffset(-11,-16,WOF_ADD);
		"####" "#" 0 { A_TakeInventory("BusyToken",32767); return ResolveState("Ready"); }
		
	Overlay.GrenadeToss:
		D4GR A 0 
		{
			if (CountInv("FragGrenadeSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				A_FireProjectile("D4FragGrenade",0,0,-8,6);
			}
			
			else if (CountInv("SyphonGrenadeSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/ThrowGren",5);
				A_FireProjectile("D4SyphonGrenade",0,0,-8,6);
			}
			
			else if (CountInv("MarineHoloSelected")>=1)
			{
				A_PlaySound("Doom4/Weapon/Grenade/SpawnHolo",5);
				//A_FireProjectile("D4HoloSpawner",0,0,0,0);
				A_SpawnItemEx("D4PlayerHolograph",40,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
			A_GiveInventory("GrenadeCooldown",50);
		}
		D4GR A 0 A_OverlayFlags(GrenadeOverlay,PSPF_ADDWEAPON,0);
		D4GR A 0 A_OverlayOffset(GrenadeOverlay,0,0);
		D4GR AAA 1 A_OverlayOffset(GrenadeOverlay,20,10,WOF_ADD);
		D4GR BBB 1 A_OverlayOffset(GrenadeOverlay,20,10,WOF_ADD);
		Stop;
		
	//--------------------------------------------------------------
	//	Quick melee / Glory kill
	//--------------------------------------------------------------
	User2:
		"####" "#" 0 //before it does the regular punch, it checks if the Monster; is ready to be GK'd and if GK is ON
		{
			A_GiveInventory("BusyToken");
			
			if(countinv("FinisherToken",AAPTR_PLAYER_GETTARGET)>=1 && GetCvar("D4D_ExecutionAnimation")==1 && A_CheckLOF("Null",CLOFF_SETTARGET|CLOFF_NOAIM_VERT|CLOFF_IGNOREGHOST|CLOFF_MUSTBESOLID ,100))
			{ return ResolveState("ExecuteExecutions");	}

			return ResolveState(null);
		}
		
		"####" "##" 1 A_WeaponOffset(16,24,WOF_ADD);	//lowers weapon	
		"####" "#" 15 A_Overlay(PunchOverlay,"Overlay.Puncher");	//calls the punching hand
		"####" "###" 1 A_WeaponOffset(-11,-16,WOF_ADD);
		"####" "#" 0 
		{ 
			A_TakeInventory("BusyToken",32767);
			return ResolveState("Ready"); 
		}
		
	Overlay.Puncher:
		MELE A 0 
		{
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
		}
		MELE F 1 A_OverlayOffset(PunchOverlay,0,40);
		"####" "#" 0 A_Overlay(PunchSway,"Overlay.PunchSwayEffect");	//calls the punching swaying
		MELE F 4 
		{
			A_OverlayOffset(PunchOverlay,10,32);
			
			if(countinv("FinisherToken",AAPTR_PLAYER_GETTARGET)>=1)
			{
				A_CustomPunch(999999,1,0,"MeleePunchPuff",80,0,0,null,"Doom4/Weapon/Melee/Punch","Doom4/Other/MeleeSwing1");
			}
			else
			{	//if you have berserk, the quick melee will increase damage, but not as strong as the "fist weapon". This is to encourage to use the fist
				A_CustomPunch(countinv("PowerStrength")? random(50,100) : random(15,35),1,0,"FistPuff",80,0,0,null,"Doom4/Weapon/Melee/Punch","Doom4/Other/MeleeSwing1");
			}
		}
		MELE F 1 A_OverlayOffset(PunchOverlay,0,36);
		MELE F 1 A_OverlayOffset(PunchOverlay,-2,40);
		
		MELE E 1 A_OverlayOffset(PunchOverlay,-3,42);
		MELE E 1 A_OverlayOffset(PunchOverlay,-6,45);
		MELE E 1 A_OverlayOffset(PunchOverlay,-8,48);
		
		MELE D 1 A_OverlayOffset(PunchOverlay,-10,44);
		MELE D 1 A_OverlayOffset(PunchOverlay,-12,47);
		MELE D 1 A_OverlayOffset(PunchOverlay,-15,50) ;
		Stop;
	Overlay.PunchSwayEffect:
		W666 A 1 {  A_SetAngle(angle-1); A_SetRoll(-1.25,SPF_INTERPOLATE); A_SetPitch(pitch-0.5); }
		W666 A 1 {  A_SetAngle(angle-1); A_SetRoll(-2.5,SPF_INTERPOLATE); A_SetPitch(pitch-0.5); }
		W666 A 1 ;
		W666 A 1 ;
		W666 A 1 { A_SetAngle(angle+1); A_SetRoll(-1.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.5); }
		W666 A 1 { A_SetAngle(angle+0.5); A_SetRoll(-0.75,SPF_INTERPOLATE); A_SetPitch(pitch+0.5); }
		W666 A 1 { A_SetAngle(angle+0.5); A_SetRoll(0,SPF_INTERPOLATE); }
		Stop;
	
	
		
	ExecuteExecutions:	//purposefully/purposely silly name
		"####" "##" 0 A_WeaponOffset(21,60,WOF_ADD);	//lowers weapon
		"####" "#" 1 A_CustomPunch(10000,1,0,"GloryKillPuff",150,0,0,null); //actually kills the Monster; without gibbing it
		"####" "#" 35 A_Overlay(PunchOverlay,"Overlay.Finisher");	//calls the animation
		"####" "###" 1 A_WeaponOffset(-7,-40,WOF_ADD);
		"####" "#" 0 
		{ 
			A_TakeInventory("BusyToken",32767);
			return ResolveState("Ready"); 
		}
	Overlay.Finisher:
		MELE A 0 A_Jump(256,"Finisher1","Finisher2","Finisher3");
		Goto Finisher2;
	Finisher1:
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill1Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN); //player is made invulnerable, unshootable, unmovable and frozen for the duration of the Glory Kill
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE A 1 A_OverlayOffset(PunchOverlay,40,50);
		MELE B 1 { A_OverlayOffset(PunchOverlay,20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE C 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-40,35); A_SetAngle(5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-60,35); A_SetAngle(5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-80,60);
		MELE C 1 A_OverlayOffset(PunchOverlay,-100,80);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-120,100);  A_SetAngle(-2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-140,120);  A_SetAngle(-2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-180,140);  A_SetAngle(-2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-200,160);
		MELE G 1 A_OverlayOffset(PunchOverlay,20,80);
		MELE G 1 A_OverlayOffset(PunchOverlay,10,70);
		MELE H 1 { A_OverlayOffset(PunchOverlay,0,60); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE H 1 { A_OverlayOffset(PunchOverlay,10,50);  A_SetRoll(3); A_SetPitch(1); }
		MELE I 1 { A_OverlayOffset(PunchOverlay,10,40);  A_SetRoll(6); A_SetPitch(2); }
		MELE I 1 { A_OverlayOffset(PunchOverlay,10,35); A_Playsound("Doom4/Weapon/Melee/Kick",CHAN_WEAPON); }
		MELE I 1 A_OverlayOffset(PunchOverlay,-10,36);
		MELE I 1 A_OverlayOffset(PunchOverlay,-12,40);
		MELE H 1 A_OverlayOffset(PunchOverlay,-13,48);
		MELE H 1 A_OverlayOffset(PunchOverlay,-16,45);
		MELE H 1 { A_OverlayOffset(PunchOverlay,-18,42);  A_SetRoll(4); A_SetPitch(2); }
		MELE G 1 { A_OverlayOffset(PunchOverlay,-20,50);  A_SetRoll(2); A_SetPitch(1); }
		MELE G 1 { A_OverlayOffset(PunchOverlay,-22,47);  A_SetRoll(0); A_SetPitch(0); }
		MELE G 1 A_OverlayOffset(PunchOverlay,-25,44);
		"####" "#" 0 
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN); 
		}
		Stop;
	Finisher2:	//double punch
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill2Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE A 1 A_OverlayOffset(PunchOverlay,40,50);
		MELE B 1 { A_OverlayOffset(PunchOverlay,20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE C 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-40,35); A_SetAngle(5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-60,35); A_SetAngle(5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-80,60);
		MELE C 1 A_OverlayOffset(PunchOverlay,-100,80);
		MELE C 1 { A_OverlayOffset(PunchOverlay,-120,100); A_SetAngle(-2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-140,120); A_SetAngle(-2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE C 1 { A_OverlayOffset(PunchOverlay,-180,140); A_SetAngle(-2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE C 1 A_OverlayOffset(PunchOverlay,-200,160);
		MELE D 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE E 1 { A_OverlayOffset(PunchOverlay,-20,48); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE F 1 A_OverlayOffset(PunchOverlay,0,40);
		MELE F 1 { A_OverlayOffset(PunchOverlay,20,35); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,40,35); A_SetAngle(-5+angle); A_SetRoll(-5); A_SetPitch(-3); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,60,35); A_SetAngle(-5+angle); A_SetRoll(-10); A_SetPitch(-6); }
		MELE F 1 A_OverlayOffset(PunchOverlay,80,60);
		MELE F 1 A_OverlayOffset(PunchOverlay,100,80);
		MELE F 1 { A_OverlayOffset(PunchOverlay,120,100); A_SetAngle(2+angle); A_SetRoll(-6); A_SetPitch(-4); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,140,120); A_SetAngle(2+angle); A_SetRoll(-3); A_SetPitch(-2); }
		MELE F 1 { A_OverlayOffset(PunchOverlay,180,140); A_SetAngle(2+angle); A_SetRoll(0); A_SetPitch(0); }
		MELE F 1 A_OverlayOffset(PunchOverlay,200,160);
		"####" "#" 0 
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		}
		Stop;
	Finisher3:
		"####" "#" 0 
		{
			A_GiveInventory("GloryKill3Token",1,TargetPtr);
			A_OverlayFlags(PunchOverlay,PSPF_ADDWEAPON,0);
			A_OverlayOffset(PunchOverlay,0,32);
			SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			A_UnsetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_SetInvulnerable();	}
			A_Stop();
			bDONTTHRUST = true;
		}
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,50);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,1,30);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-20,40);
		MELE "[" 1 A_OverlayOffset(PunchOverlay,-40,50);
		MELE J 1 { A_OverlayOffset(PunchOverlay,1,40); A_SetAngle(3+angle); A_SetPitch(-2); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-5,0); A_SetAngle(3+angle); A_SetPitch(-4); A_Playsound("Doom4/Other/MeleeSwing1",CHAN_BODY); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-10,-40); A_SetAngle(3+angle); A_SetPitch(-8); }
		MELE J 4 { A_OverlayOffset(PunchOverlay,-25,-90); A_Playsound("Doom4/Weapon/Melee/Punch",CHAN_WEAPON); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-20,-60); A_SetAngle(-2+angle); A_SetPitch(-8); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-15,-30); A_SetAngle(-2+angle); A_SetPitch(-6); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-10,0); A_SetAngle(-2+angle); A_SetPitch(-4); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,-5,30); A_SetAngle(-2+angle); A_SetPitch(-2); }
		MELE J 1 { A_OverlayOffset(PunchOverlay,1,60); A_SetAngle(-1+angle); A_SetPitch(0); }
		MELE "]" 1 A_OverlayOffset(PunchOverlay,1,42);
		MELE "]" 1 A_OverlayOffset(PunchOverlay,1,37);
		"####" "#" 0
		{
			bDONTTHRUST = false;
			A_SetShootable();
			if (!CountInv("PowerInvulBase") && !CountInv("PowerInvulnerable"))
			{	A_UnSetInvulnerable();	}
			A_OverlayOffset(PunchOverlay,1,32); 
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
		}
		Stop;
	}
}

Class BusyToken : Inventory { Default { Inventory.InterhubAmount 0; }}

Class FinisherToken : Inventory {}
Class GloryKill1Token : Inventory {}
Class GloryKill2Token : Inventory {}
Class GloryKill3Token : Inventory {}

Class GloryKillPuff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+ALLOWTHRUFLAGS	//to ignore pinky's shield
		+THRUGHOST
		+PUFFGETSOWNER
		+PUFFONACTORS
		+NOTIMEFREEZE
		DamageType "GloryKill";
		+BLOODLESSIMPACT
		+NOEXTREMEDEATH
	}
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_GiveToTarget("PunchedAlready",1);
		Stop;
	}
}
Class MeleePunchPuff : Actor 
{
	Default 
	{
		DamageType "MeleePunch";
		-BLOODLESSIMPACT
		-NOEXTREMEDEATH
		+ALLOWTHRUFLAGS	//to ignore pinky's shield
		+THRUGHOST
		+PUFFGETSOWNER
		+PUFFONACTORS
		+NOTIMEFREEZE
	}
	
	override void PostBeginPlay()
	{
		Destroy();
	}
}

//=======================================================================
//=======================================================================
// "Give weapons" identifier
//=======================================================================
//=======================================================================

Class D4IdfaTrap : Weapon 
{
	Default 
	{
		Weapon.SlotNumber 0;
	}
	States 
	{ 
		Ready: Deselect: Select: Fire: TNT1 A 1 A_Lower;
	} 
}
Class IdfaStamp : Inventory {}

//=======================================================================
//=======================================================================
// Ledge grabbing hands
//=======================================================================
//=======================================================================

Class ClimbingHands : Weapon
{
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+Weapon.NOAUTOFIRE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		M666 A 0 A_Raise;
		Loop;
	Deselect:	
		M666 A 1;	//Needed.
	DesLoop:
		M666 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 5 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		Wait;
	Fire:
		M666 A 10;
		Goto Ready;
	}
}


//=======================================================================
//=======================================================================
// Impact Compensation
//=======================================================================
//=======================================================================

Class FallingHands : Weapon
{
	int UVeloz;
	int UVelooz;
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.NOAUTOFIRE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		TNT1 A 0 A_Raise;
		Loop;
	Deselect:	
		TNT1 A 1;	//Needed.
	DesLoop:
		TNT1 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 1 
		{
			if(pos.z != floorz)
			{
				A_SetPitch(pitch + frandom(1,2), SPF_INTERPOLATE);
			}
		}
		TNT1 A 0 A_JumpIf(pos.z == floorz, "Impact");
		Loop;
	Impact:
		TNT1 A 0 
		{
			if(pitch < 80) { A_SetPitch(80, SPF_INTERPOLATE); }
			A_Log("Impact Compensation.");
			A_PlaySound("Doom4/Player/Climb",7); // placeholder sound
			A_Overlay(Overlay_AnglePitch,"Visuals");
		}
		TNT1 A 25;
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 97 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_SetPitch(pitch * 95 / 100 - frandom(0.5,1.5), SPF_INTERPOLATE);
		TNT1 ABCDEFGH 1 A_SetPitch(pitch * 90 / 100 - frandom(0.1,1.0), SPF_INTERPOLATE);
		TNT1 A 0 A_TakeInventory("FallingHands",0x7FFFFFFF);
		TNT1 A 0 A_SelectWeapon("D4Pistol");
		TNT1 A 0 A_WeaponReady;
	Visuals:
		PKFS F 25;
		PKFS EDCBA 8; // placeholder hands animation
		Stop;
	Fire:
		TNT1 A 0 A_SelectWeapon("D4Pistol");
		TNT1 A 0 A_WeaponReady;
		Goto Ready;
	}
}

Class FallingSpeed : Inventory { Default { Inventory.MaxAmount 0x7FFFFFFF; } }


//=======================================================================
//=======================================================================
// Doom doll
//=======================================================================
//=======================================================================
Class D4DoomDoll : CustomInventory
{
	Default 
	{
		Scale 0.3;
		Inventory.PickupMessage "Picked up a collectible doomguy!";
	}
	States
	{
	Spawn:
		DOLL A -1;
		Stop;
	PickUp:
		TNT1 A 0
		{
			if (CountInv("D4DoomDollHands"))
			{
				A_GiveInventory("DollUses",3);
			}
			else
			{
				A_GiveInventory("DollUses",4);
				ACS_NamedExecute("D4DoomDoll",0,0,0);
			}
		}
		Stop;
	}
}

Class DollUses : Inventory
{
	Default 
	{
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNDROPPABLE
		Inventory.InterhubAmount 10;
		Inventory.MaxAmount 10;
		Inventory.Amount 1;
	}
}

Class D4DoomDollPlaying : Inventory
{	Default { Inventory.InterHubAmount 0;	}}

Class D4DoomDollHands : Weapon
{
	Default 
	{
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.AMMO_OPTIONAL
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOAUTOFIRE
	}
	States
	{
	Spawn:
		TNT1 A 0;
		Stop;
	Select:
		M666 A 0 A_Raise;
		Loop;
	Deselect:	
		M666 A 1;	//Needed.
	DesLoop:
		M666 A 0 A_Lower;
		Loop;
	Ready:
		TNT1 A 0 
		{
			A_GiveInventory("DollBuddha");
			if (CountInv("D4DoomDollUpgrade1"))
			{
				A_GiveInventory("DollSpeed");
				A_GiveInventory("DollJump");
			}
		}
		TNT1 AAAA 1 A_WeaponOffset(-8,20,WOF_ADD);
		DDLL AAAAAAAA 1 A_WeaponOffset(4,-10,WOF_ADD);
		DDLL A 70;
		DDLL BCDEE 1 ;
		"####" F 1
		{
			if (CountInv("D4DoomDollUpgrade2"))
			{
				A_SpawnItemEx("DollExplosion",flags: SXF_NOCHECKPOSITION);
				bFORCERADIUSDMG = bFOILINVUL = true;
				A_Explode(2048, 1024, XF_NOTMISSILE, false, 512);
				bFORCERADIUSDMG = bFOILINVUL = false;
			}
			A_GiveInventory("DollProtection");
			A_GiveInventory("DollPush");
			A_GiveInventory("D4MegaSphereNoBonus");
			if (CountInv("D4RegenUpgrade4") && health < 300)
			{	A_SetHealth(300);	}
			A_TakeInventory("DollUses",1,0);
			A_SpawnItemEx("BroFistPuff",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		}
		DDLL FFFF 1;
		DDLL GHIJKLMNOPQRSTUVWXYZ 2;
		DDL2 ABCDEFGHI 2;
		DDLL AAAAAAAA 1 A_WeaponOffset(-6,10,WOF_ADD);
		TNT1 A 5 ;
		TNT1 A 10000; //just to ensure it wont play again while the script takes it away
		Loop;
	Fire:
		M666 A 1;
		Goto Ready;
	}
}

Class BroFistPuff : Actor 
{
	Default 
	{
	+NOINTERACTION
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("BruiserDustCloud",0,0,0,frandom(-6,6),frandom(-6,6),0,0,SXF_NOCHECKPOSITION);

		}
		TNT1 A 10;
		Stop;
	}
}

Class DollExplosion : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+NOSECTOR
	}
	States
	{
	Spawn:
		TNT1 A 200 NoDelay A_PlaySound("Doom4/Other/DollExplode",CHAN_WEAPON,1,0,ATTN_NONE);
		Stop;
	}
}

Class DollProtBase : PowerProtection
{
	Default 
	{
		DamageFactor "Normal", 0.05;	//takes a tiny bit of damage
	}
}

Class DollProtection : PowerupGiver
{
	Default 
	{
		powerup.duration -8;
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		Powerup.Type "DollProtBase";
	}
	States
	{
	Spawn:
		MEGA A 4 Bright;
		Loop;
	}
}

Class DollPush : ArtiBlastRadius
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.UNDROPPABLE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
	}
	States
	{
	Spawn:
		MEGA A 4 Bright;
		Loop;
	}
}

Class DollBuddha : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerBuddha";
		Powerup.Duration 170;
	}
}

Class DollSpeed : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerSpeed";
		Powerup.Duration 170;
	}
}

Class DollJump : PowerupGiver
{
	Default 
	{
		+INVENTORY.QUIET
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.NOSCREENFLASH
		+INVENTORY.UNDROPPABLE
		Powerup.Type "PowerHighJump";
		Powerup.Duration 170;
	}
}


//=======================================================================
//=======================================================================
// Casings
//=======================================================================
//=======================================================================

Class BulletCasing : Actor 
{
	Default 
	{
	Projectile;
	-NOGRAVITY
	Radius 4;
	Height 2;
	+THRUACTORS
	Gravity 0.7;
	Scale 0.15;
	Bouncetype "doom";
	BounceFactor 0.5;
	+FORCEXYBILLBOARD
	BounceSound "Doom4/Weapon/BulletCasing";
	}
	States
	{
	Spawn:
		CSNG AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1; //A_SpawnParticle("696969",0,random(20,40),random(1,2),0,0,0,0,0,0,frandom(0.1,0.6))
		Loop;
	Death:
		"####" "#" 100
		{
			if (GetCvar("D4D_ShortCasingLives")) { return ResolveState("Null"); }
			return ResolveState(null);
		}
		Stop;
	}
}

Class BulletCasingSilent : BulletCasing
{	Default { BounceSound ""; }}

Class ShellCasing : Actor 
{
	Default 
	{
	Projectile;
	-NOGRAVITY
	Radius 4;
	Height 2;
	+THRUACTORS
	Gravity 0.7;
	Scale 0.22;
	Bouncetype "doom";
	BounceFactor 0.5;
	+FORCEXYBILLBOARD
	BounceSound "Doom4/Weapon/ShellCasing";
	}
	States
	{
	Spawn:
		SHLL AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPP 1; //A_SpawnParticle("696969",0,random(20,40),random(1,2),0,0,0,0,0,0,frandom(0.1,0.6))
		Loop;
	Death:
		"####" "#" 100
		{
			if (GetCvar("D4D_ShortCasingLives")) { return ResolveState("Null"); }
			return ResolveState(null);
		}
		Stop;
	}
}

Class ShellCasingSilent : ShellCasing
{	Default { BounceSound ""; }}



//=======================================================================
//=======================================================================
// Tracers
//=======================================================================
//=======================================================================

Class NonPuff : Actor
{
	Default
	{
		+NOINTERACTION
		+PAINLESS
		+BLOODLESSIMPACT
		+NOTIMEFREEZE
		+NOBLOCKMAP
		+ALWAYSPUFF
		+PUFFONACTORS
		+SKYEXPLODE
		Radius 1;
		Height 1;
		Renderstyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3;
		Stop;
	}
}

Class NonPuffThru : NonPuff
{
	Default
	{
		+ALLOWTHRUFLAGS
		+THRUACTORS
	}
}

Class PistolTracerNormal : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.2;
		Translation "0:255=%[0,0,0]:[0.5,0.65,1.5]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class PistolTracerRed : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.2;
		Translation "0:255=%[0,0,0]:[1.5,0,0]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class BulletSmallTracer : FastProjectile
{
	Default 
	{
		Projectile;
		+RANDOMIZE
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NOEXTREMEDEATH
		+NOTIMEFREEZE
		damage 0;
		radius 2;
		height 2;
		speed 200;
		RenderStyle "Add";
		alpha 0.9;
		scale 0.13;
		//Translation "0:255=%[0,0,0]:[0,1,1.5]";
	}
	states
	{
	Spawn:
		TRAC A 10 BRIGHT;
		Stop;
	Death:
		TNT1 A 1;
		Stop;
	XDeath:
		TNT1 A 1;
		Stop;
	}
}


Class D4AbstractMissile : Actor 
{
	transient CVar HQC;
	bool HQ;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		HQC = CVar.FindCvar("HQEffects");
		if (HQC)	HQ = HQC.GetBool();
	}
}

Class D4AbstractMissileQuake : D4AbstractMissile
{
	transient CVar QuakeC;
	bool DoQuake;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		QuakeC = CVar.FindCvar("D4D_quakexplosions");
		if (QuakeC)	DoQuake = QuakeC.GetBool();
	}
}