//===================================================================================================
//===================================================================================================
//
//		Static rifle
//
//	Sprites: Neccronixis
//	MuzzleFlash sprite edit: DBThanatos
//	Code: DBThanatos
//	Beam trails: Major Cooke
//	Offset tweaks: Xaser
//
//===================================================================================================
//===================================================================================================


Class StaticRifleChargingToken : Inventory { Default { Inventory.MaxAmount 540; } }// 520 is max already, the extra 20 is a cushion to retain "max charge"
Class ShowStaticRifleCharge : Inventory {}

Class D4StaticRifle : Doom4Weapon
{
	enum StaticRifle
	{
		RailFlags = 	RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,
		RailFlags3 = 	RGF_SILENT|RGF_FULLBRIGHT,
	};
	
	const Sparsity = 10.415;
	
	Default 
	{
		+FLOORCLIP
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Scale 0.6;
		Tag "Static Rifle";
		Obituary "%k's static rifle taught %o that running away doesn't make one necessarily a pussy.";
		Inventory.PickupMessage "Static Rifle, move to charge!";
		Decal "D4RailgunOrange";
		Weapon.SelectionOrder 110;
		+DONTGIB
	}
	States
	{
	Spawn:
		WPPK K -1;
		Wait;
	//-------------------------------------------------------
	// DeSelect sequence
	//-------------------------------------------------------
	Deselect:
		STRF A 0 
		{
			ACS_NamedExecute("RemoveModText",0,0,0,0);
			A_RemoveChildren(true,RMVF_EVERYTHING,"ChargeSoundPlayer");
			A_TakeInventory("StaticRifleActive",1);
		}
		STRF A 1 A_Lower;
		STRF A 0 A_Lower(WeaponSwitchSpeed);
		Goto Deselect+1;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select:
		STRF A 0 
		{
			A_SpawnItemEx("ChargeSoundPlayer",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			A_GiveInventory("StaticRifleActive",1);
			ACS_NamedExecute("RemoveModText",0,0,0,0);
			//A_TakeInventory("StaticRifleChargingToken",1000);  //it only charges while you have it out
		}
		STRF A 1 A_Raise;
		STRF A 0 A_Raise(WeaponSwitchSpeed);
		Goto Select+1;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	ReadyNoHolding:
		STRF A 1;
		STRF A 0 A_Refire("ReadyNoHolding");
	Ready:
		STRF A 0 
		{	
			if (CountInv("StaticRifleChargingToken")>=40)
			{	return ResolveState("ReadyCharging");	}
			else
			{	return ResolveState("ReadyDischarged");	}

		}
	ReadyDischarged:
		STRF A 1
		{
			if (CountInv("StaticUpgrade4"))
			{	A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);	}
			else
			{	A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2|WRF_NOSECONDARY);	}
		}
		Goto Ready;
	ReadyCharging:
		STRF BBBCCC 1 
		{
			if (CountInv("StaticUpgrade4"))
			{	A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);	}
			else
			{	A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2|WRF_NOSECONDARY);	}
		}
		Goto Ready;
	//===========================================================================	
	// Primary fire
	Fire:
	AltFire:
		STRF A 0
		{
			if (CountInv("StaticRifleChargingToken") >= 20)
			{
				if (CountInv("StaticUpgrade4"))
				{
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
					if (!CountInv("StaticChargeDrain"))
					{	A_GiveInventory("StaticChargeDrain",1);		}
					return ResolveState("FireWatcher");
				}
				else
				{	
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
					
					// It's important that the tics be updated if the animation 
					// under (Overlay.)Anim state is changed at all.
					// AnimLoop1 and 2 don't count.
					A_SetTics(10); 
					return ResolveState(null);
				}
			}
			else
			{
				ACS_NamedExecute("ChargeTooLow",0,0,0);
			}
			return ResolveState(null);
		}
		STRF A 1;
		STRF A 0 A_Refire("ReadyNoHolding");
		Goto Ready;
	FireWatcher:
		M666 A 1;
		M666 A 1
		{
			if (CountInv("StaticChargeDrain"))
			{
				if (((GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))
					||
					((GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK) &&
					!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK)))
				{
					A_Overlay(SR_Fire,"Overlay.Fire");
					A_Overlay(SR_Anim,"Overlay.Anim");
				}
				return ResolveState(null);
			}
			//Don't allow spamalamadingdongs.
			
			else if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) || 
					(GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK))
			{
				return ResolveState("ReadyNoHolding"); 
			}
			
			return ResolveState("Ready");
		}
		Wait;
	Overlay.Fire:
		STRF A 0
		{
			//A_GiveInventory("ShowStaticRifleCharge",1); //	debug
			
			//----------------------
			//Main fire attack
			//it has to attack before the pitches are applied, otherwise it fucks with your aim
			if (CountInv("StaticRifleChargingToken")>=20)
			{
				A_GunFlash("Null");
				if (CountInv("StaticRifleChargingToken")>=520)	//if at max
				{
					if (GetCvar("vid_renderer"))	//gzdoom
					{
						A_RailAttack(0,1,0,"","",RGF_SILENT|RGF_FULLBRIGHT,0,null,0,0,32765,0,Sparsity,0.0,"StaticTrailBig");
					}
					A_RailAttack(random(100,200),0,1,"Red","",RGF_SILENT|RGF_FULLBRIGHT,0,null,0,0,32765,0,2.0,1.0);
				}
				
				
				//normal attacks
				if (GetCvar("vid_renderer"))	//gzdoom
				{	
					A_RailAttack(0,1,0,"","",(CountInv("StaticUpgrade3") ? RailFlags3 : RailFlags),0,null,0,0,32765,0,Sparsity,0.0,"StaticTrail"); 
				}
				else		//zdoom
				{	A_RailAttack(0,1,0,"","Orange",(CountInv("StaticUpgrade3") ? RailFlags3 : RailFlags),0,null,0,0,32765,0,2,0.0,"StaticRifleTrailSoftware"); }
				
				
				A_RailAttack(int(CountInv("StaticRifleChargingToken")*0.85),0,1,"","",(CountInv("StaticUpgrade3") ? RailFlags3 : RailFlags),0,"StaticPuff",0,0,32765,0,2.0,1.0);
				
				
			}
			//refuses to fire if the charge was too low
			else
			{	
				A_SetTics(10);
				ACS_NamedExecute("ChargeTooLow",0,0,0);
				//return ResolveState("NotEnoughCharge");
			}
			//----------------------
			//effects and sounds depend on the charge level
			if(CountInv("StaticRifleChargingToken")>=500)	//if max, it has a 20 tokens chance to deal max damage
			{	
				A_PlaySound("Doom4/Weapon/StaticRifle/FireMax",CHAN_Weapon); 
				A_ZoomFactor(0.65,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			else if(CountInv("StaticRifleChargingToken")<=40)	//if very low
			{		
				A_PlaySound("Doom4/Weapon/StaticRifle/FireMin",CHAN_Weapon,0.5); 	//otherwise, will play super low sound
				A_ZoomFactor(0.95,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			else 		//if anything in between
			{	
				A_PlaySound("Doom4/Weapon/StaticRifle/Fire",CHAN_Weapon,0.8);
				A_ZoomFactor(0.9,ZOOM_INSTANT|ZOOM_NOSCALETURNING);
				A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			}
			A_PlaySound("Doom4/Weapon/StaticRifle/FireContinuation",5,0.7);
			
			if (CountInv("StaticUpgrade4"))
			{	A_GiveInventory("StaticChargeDrain",1);	}
			else
			{	A_TakeInventory("StaticRifleChargingToken",100000);	}
			return ResolveState(null);
		}
		Stop;
	Overlay.Anim:
	Anim:
		STRF D 1 Bright A_WeaponOffset( 3.0, 35.0);
		STRF D 1 Bright A_WeaponOffset(12.0, 38.0);
		STRF D 1 Bright A_WeaponOffset(15.0, 42.0);
		STRF A 1 A_WeaponOffset(14.0, 41.0);
		STRF A 1 A_WeaponOffset(12.0, 39.0);
		STRF A 1 A_WeaponOffset(10.0, 37.0);
		STRF A 1 A_WeaponOffset( 7.0, 35.0);
		STRF A 1 A_WeaponOffset( 4.0, 34.0);
		STRF A 1 A_WeaponOffset( 2.0, 33.0);
		STRF A 1 A_WeaponOffset( 0.0, 32.0);
	AnimLoop1:
		STRF BBBCCC 1
		{
			if (!CountInv("StaticChargeDrain"))
			{	return ResolveState("Null");	}
			if (CountInv("StaticRifleChargingToken") < 19)
			{	return ResolveState("AnimLoop2");	}
			return ResolveState(null);
		}
		Loop;
	AnimLoop2:
		STRF A 1
		{
			if (!CountInv("StaticChargeDrain"))
			{	return ResolveState("Null");	}
			return ResolveState(null);
		}
		Loop;
		
	}
}

Class StaticChargeDrain : 	Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.InterhubAmount 0; } }
Class StaticRifleActive : 	Inventory {}

Class ChargeSoundPlayer : Actor 
{
	double user_dist;
	Default 
	{
		+NOINTERACTION
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_PlaySound("Doom4/Weapon/StaticRifle/ChargeLoop",7,1,1);
	Looping:
		TNT1 A 1
		{
			if (!master || master.FindInventory("PowerMorph",true) != null || !CountInv("StaticRifleActive",MasterPtr))
			{
				A_StopSound(7);
				Destroy();
				return;
			}
			
			if (CountInv("StaticRifleChargingToken",MasterPtr) >= 520)
			{	A_Warp(MasterPtr,0,0,32,0,WARPF_NOCHECKPOSITION);	}
			else
			{
				user_dist = 1040 - (CountInv("StaticRifleChargingToken",MasterPtr) * 2);
				A_Warp(MasterPtr,-user_dist,0,32,0,WARPF_NOCHECKPOSITION);
			}
		}
		Loop;
	Nothing:
		TNT1 A 100;
		Stop;
	}
}

//----------------------------------------------------------------------
Class StaticPuff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+PUFFGETSOWNER
		+PUFFONACTORS
		+ALWAYSPUFF
	}
	States
	{
	Spawn:	//hit non bleeding
		TNT1 A 1 A_GiveToTarget("StaticHitSound");
		Stop;
	Xdeath:	//hit bleeder
		TNT1 A 1 A_GiveToTarget("StaticHitSound");
		Stop;
	Crash:	//hit everything else
		TNT1 A 1;
		Stop;
	}
}

Class StaticHitSound : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP 
		RenderStyle "None";
	}
	States
	{
	Spawn:
		MEGA A 6;
		Loop;
	Pickup:
		TNT1 A 0 A_PlaySound("Doom4/Weapon/StaticRifle/Hit",10,1,0,140);
		Stop;
	}
}
//----------------------------------------------------------------------

Class StaticTrail : TrailBeam
{
	Default 
	{
		XScale 0.1;
		YScale 0.25; //Don't touch.
	}
	States
	{
	Spawn:
		X202 C 0 NoDelay
		{
			//pitch *= -1;
			//if (tid) { angle += 180; }
			// user_time = time to shrink to nothing
			user_time = 25.0;
			A_SpawnItemEx("StaticTrail",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERSCALE|SXF_TRANSFERPOINTERS,tid * 256,1);
		}
		Goto Process;
	}
}

Class StaticTrailBig : StaticTrail
{	Default {	XScale 0.15;	}	}

Class StaticRiflePitch8 : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 3;
		TNT1 AAAAAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+1);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}

Class StaticRiflePitch4 : StaticRiflePitch8
{
	States
	{
	Spawn:
		TNT1 A 2;
		TNT1 AAAAAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+0.5);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}
Class StaticRiflePitch1 : StaticRiflePitch8
{
	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 AAAAA 1
		{
			A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH); //Never override the pitch. Offset to it instead.
			A_SetPitch(pitch+0.2);		//Needs to affect itself first.
			A_SetPitch(pitch,0,MasterPtr);
		}
		Stop;
	}
}

Class StaticRifleTrailSoftware : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+PUFFGETSOWNER
		RenderStyle "Add";
		//Translation "0:255=223:208"
		Scale 0.1;
	}
	States
	{
	Spawn:
		//X025 A 0 NODELAY 
		//{	return A_Jump(256,2,4,6,8,10,12,14,16,18,20);		}
		X025 ACDEFGHIJKLMNOPQRSTUVWXY 0 A_Jump(256,"Play");
	Play:
		"####" "#" 4 BRIGHT ;
		"####" "#" 1 BRIGHT 
		{	
			A_FadeOut(0.075);
			A_SetScale(Scale.X-0.01);
		}
		Wait;
	}
}