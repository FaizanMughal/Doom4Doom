/*==============================================================================

	Akimbo System
	Developed by Major Cooke
	
================================================================================

The idea is simple: Hold one weapon in the left, and the other one in the right.
This is not the same as dual wielding, since the only weapon dual wieldable is
the Super Shotgun.

Keys to assign:

- user1: Change right mod
- user2: Change left mod
- user3: Fire left secondary
- user4: Fire right secondary

Will be changed to help accommodate if needed.

To keep the code clean, see the bottom for all the functions.
==============================================================================*/

Struct AkimboStates
{
	StateLabel ReadyState;
	StateLabel FireState;
	StateLabel AltFireState;
	StateLabel SelectState;
	StateLabel DeselectState;
	
	void Init()
	{
		ReadyState = FireState = AltFireState = SelectState = DeselectState = null;
	}
}

Struct AkimboStateFlags
{
	bool bAddWeapon;
	bool bAddBob;
	bool bPowDouble;
	bool bCVarFast;
	bool bFlip;	
}

Class AkimboWeapon : Weapon
{
	enum StatesNum
	{
		ID_D4Pistol = 1,
		ID_D4Shotgun,
		ID_D4SuperShotgun,
		ID_D4Repeater,
		ID_D4AssaultRifle,
		ID_D4Chaingun,
		ID_D4RocketLauncher,
		ID_D4LightningGun,
		ID_D4PlasmaRifle,
		ID_D4StaticRifle,
		ID_D4VortexRifle,
		ID_D4GaussCannon,
		ID_D4CarrionCannon,
		ID_D4BFG
	};
	AkimboStates as[15], LeftStates, RightStates;
	int Status[2];
	StateLabel LeftNext, RightNext;
	Class<Weapon> LeftPend, RightPend;
	Class<Weapon> LeftGun, RightGun;
	int InputCur, InputOld;
	int WeaponFlags;
	Vector2 LOff, ROff, LO, RO;
	uint8 WeaponID[2];
	bool interpolate[2];
	enum StatusState
	{
		Left = 0,
		Right = 1,
		Nurr = 0,
		Ready = 1,		// Ready to fire
		Fire,			// Firing primary
		AltFire,		// Firing secondary
		ChangeMod,		// Changing mods
		ChangeWeapon,	// Changing weapons
		Raise,			// Raising
		Lower,			// Lowering
		ReadyNoSwitch,	//
	};
	enum AKOverlays
	{
		AKBase = 30000,
		AKRLow = 30003,
		AKRHigh = 39999,
		OV_LeftWeapon = 30000,
		OV_RightWeapon = 30001,
		OV_CheckWeapons = 30002,
		OV_SwitchLeft,
		OV_SwitchRight,
		OV_Custom
	};
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE //Will have to program in wherever the autofire happens on the normal guns.
		Weapon.UpSound "Doom4/Weapons/WeaponSwitch";
		Tag "Akimbo Guns";
	}
	States
	{	
	Overlay.OffsetManager:
		TNT1 A 1
		{
			invoker.WeaponID[Left] = invoker.owner.CountInv("LeftWeaponCount");
			invoker.WeaponID[Right] = invoker.owner.CountInv("RightWeaponCount");
			//if (invoker.Status[Left] <= Ready)
			//{
				invoker.LOff = (invoker.LeftOffset[(invoker.WeaponID[Left] * 2)] + LOfx, 
								invoker.LeftOffset[(invoker.WeaponID[Left] * 2) + 1] + LOfy) + invoker.LO;
								//invoker.LeftOffset[(invoker.WeaponID[Left] * 2) + 1] + LOfy);
				invoker.owner.A_OverlayOffset(OV_LeftWeapon, Invoker.LOff.x, Invoker.LOff.y, 
					(invoker.interpolate[Left] ? WOF_INTERPOLATE : 0));
				//A_OverlayOffset(OV_LeftWeapon, Invoker.ROff.x, Invoker.ROff.y, WOF_INTERPOLATE);
				//Console.Printf("%d", invoker.WeaponID[Left]);
			//}
			
			//if (invoker.Status[Right] <= Ready)
			//{
				invoker.ROff = (invoker.RightOffset[(invoker.WeaponID[Right] * 2)] + ROfx, 
								invoker.RightOffset[(invoker.WeaponID[Right] * 2) + 1] + ROfy) + invoker.RO;
				invoker.owner.A_OverlayOffset(OV_RightWeapon, Invoker.ROff.x, Invoker.ROff.y, 
					(invoker.interpolate[Right] ? WOF_INTERPOLATE : 0));
			//}
		}
		Wait;
	//==========================================================================
	// Main States
	//==========================================================================
	Spawn:
		M666 A 0;
		Stop;
	Select:
		M666 A 1 
		{
			if (!invoker.AkimboCheckWeapons())
			{
				A_SelectWeapon("D4Pistol");
				A_PlaySound("Doom4/Player/Nope",CHAN_AUTO);
				return ResolveState("Deselect");
			}
			invoker.interpolate[Left] = invoker.interpolate[Right] = true;
			invoker.PrepareStates();
			int ci = invoker.owner.CountInv("LeftWeaponCount");
			invoker.WeaponID[Left] = ci;
			invoker.LeftStates.ReadyState = 	invoker.as[ci].ReadyState;
			invoker.LeftStates.FireState = 		invoker.as[ci].FireState;
			invoker.LeftStates.AltFireState = 	invoker.as[ci].AltFireState;
			invoker.LeftStates.SelectState = 	invoker.as[ci].SelectState;
			invoker.LeftStates.DeselectState = 	invoker.as[ci].DeselectState;
			
			ci = invoker.owner.CountInv("RightWeaponCount");
			invoker.WeaponID[Right] = ci;
			invoker.RightStates.ReadyState = 		invoker.as[ci].ReadyState;
			invoker.RightStates.FireState = 		invoker.as[ci].FireState;
			invoker.RightStates.AltFireState = 		invoker.as[ci].AltFireState;
			invoker.RightStates.SelectState = 		invoker.as[ci].SelectState;
			invoker.RightStates.DeselectState = 	invoker.as[ci].DeselectState;
			
			// Skip the offsetting for this situation.
			if (!invoker.LeftGun)	invoker.LeftGun = 	invoker.LeftPend; 	invoker.LeftPend = null;
			if (!invoker.RightGun)	invoker.RightGun = 	invoker.RightPend; 	invoker.RightPend = null;
			A_Overlay(OV_LeftWeapon, 	invoker.LeftNext);
			A_Overlay(OV_RightWeapon, 	invoker.RightNext);
			A_OverlayFlags(OV_LeftWeapon, PSPF_ADDWEAPON|PSPF_FLIP, true);
			A_OverlayFlags(OV_RightWeapon, PSPF_ADDWEAPON, true);
			A_Overlay(OV_Custom + 1, "Overlay.OffsetManager");
			
			
			
			if (invoker.Status[Left] <= Ready)
			{
				invoker.LOff = (invoker.LeftOffset[(invoker.WeaponID[Left] * 2)] + LOfx, 
								invoker.LeftOffset[(invoker.WeaponID[Left] * 2) + 1] + LOfy) + invoker.LO;
								//invoker.LeftOffset[(invoker.WeaponID[Left] * 2) + 1] + LOfy);
				invoker.owner.A_OverlayOffset(OV_LeftWeapon, Invoker.LOff.x, Invoker.LOff.y, WOF_INTERPOLATE);
				//A_OverlayOffset(OV_LeftWeapon, Invoker.ROff.x, Invoker.ROff.y, WOF_INTERPOLATE);
			}
			
			if (invoker.Status[Right] <= Ready)
			{
				invoker.ROff = (invoker.RightOffset[(invoker.WeaponID[Right] * 2)] + ROfx, 
								invoker.RightOffset[(invoker.WeaponID[Right] * 2) + 1] + ROfy) + invoker.RO;
				invoker.owner.A_OverlayOffset(OV_RightWeapon, Invoker.ROff.x, Invoker.ROff.y, WOF_INTERPOLATE);
			}
			
			return ResolveState("SelLoop");
		}
	SelLoop:
		M666 A 1 A_Raise();
		M666 A 0 A_Raise(WeaponSwitchSpeed);
		Loop;
	Deselect:
		M666 A 0 
		{
			invoker.LeftPend = null;
			invoker.RightPend = null;
			invoker.LeftNext = null;
			invoker.RightNext = null;
			//invoker.UpdateStates(OverlayID());
			A_OverlayFlags(OV_LeftWeapon, PSPF_ADDWEAPON, true);
			A_OverlayFlags(OV_RightWeapon, PSPF_ADDWEAPON, true);
		}
	DesLoop:
		M666 A 1 A_Lower();
		M666 A 0 A_Lower(WeaponSwitchSpeed);
		Loop;
	Ready:
		M666 A 1 
		{
			
			A_OverlayFlags(OV_LeftWeapon, PSPF_ADDWEAPON, true);
			A_OverlayFlags(OV_RightWeapon, PSPF_ADDWEAPON, true);
			for (int i = 0; i < invoker.Status.Size(); i++)
				if (invoker.Status[i] <= invoker.Nurr)
					invoker.Status[i] = Ready;
			invoker.InputCur = GetPlayerInput(MODINPUT_BUTTONS);
			invoker.InputOld = GetPlayerInput(MODINPUT_OLDBUTTONS);
			
			A_WeaponReady(WRF_NOFIRE|invoker.WeaponFlags);
			
			
			if ((invoker.InputCur & BT_USER3) && !(invoker.InputOld & BT_USER3))
			{
				Menu.SetMenu("AkimboSideSelect");
			}
			if ((invoker.InputCur & BT_USER2) && !(invoker.InputOld & BT_USER2))
			{
				//Console.Printf("Attempting switch 1");
				if (invoker.Status[Left] <= Ready && invoker.Status[Right] <= Ready)
				{
					//Console.Printf("Attempting switch 2");
					invoker.SetWeaponSideClass(invoker.LeftGun, true, true);
					invoker.SetWeaponSideClass(invoker.RightGun, false, true);
				}
				else
				{
					if (invoker.Status[Left] > Ready)	Console.Printf("Left is %d", invoker.Status[Left]);
					if (invoker.Status[Right] > Ready)	Console.Printf("Right is %d", invoker.Status[Right]);
				}
			}
			
			/*
			if ((invoker.InputCur & BT_ATTACK) && !(invoker.InputOld & BT_ATTACK))
			{
				
				uint size = invoker.WeaponList.Size();
				A_SetInventory("LeftWeaponCount", Clamp(((CountInv("LeftWeaponCount") + 1) % size), 1, size - 1));
				
				A_SetInventory("RightWeaponCount", Clamp(((CountInv("RightWeaponCount") + 1) % size), 1, size - 1));
				uint cnt = CountInv("LeftWeaponCount");
				A_SetInventory("RightWeaponCount",cnt);
				invoker.LeftGun = invoker.WeaponList[cnt];
				
				A_Overlay(OV_LeftWeapon, invoker.WeaponReadyStates[cnt]);
				A_OverlayFlags(OV_LeftWeapon, PSPF_ADDWEAPON|PSPF_FLIP, true);
				A_Overlay(OV_RightWeapon, invoker.WeaponReadyStates[cnt]);
				A_OverlayFlags(OV_RightWeapon, PSPF_ADDWEAPON, true);
			}
			*/
		}
		Loop;
	Fire:
		M666 A 1;
		Goto Ready;

	//--------------------------------------------------------------------------
	D4Pistol.Select:
		WEP1 A 0 { UpdateStates(ID_D4Pistol); }
		Goto CommonSelect;
	D4Pistol.Ready:
		WEP1 A 1 { AkWeaponReady( 0, true); }
		Loop;
	D4Pistol.Fire:
		"####" "#" 1 Bright  
		{
			int s = invoker.Side(OverlayID());
			if (CountInv("PistolUpgradeDamage"))
			{
				A_PlaySound("Doom4/Weapon/Pistol2/Fire",CHAN_WEAPON,1);
				A_FireBullets(0,0,1,random(6,14),"D4PistolPuffRed",FBF_NORANDOMPUFFZ|FBF_NORANDOM); // from 6 to 14
				A_FireProjectile("PistolTracerRed",0,0,6 * s);
			}
			
			else
			{
				A_PlaySound("Doom4/Weapon/Pistol/Fire",CHAN_WEAPON,1);
				A_FireBullets(0,0,1,3,"D4PistolPuffNormal",FBF_NORANDOMPUFFZ); //either 3, 6 or 9 dmg	
				A_FireProjectile("PistolTracerNormal",0,0,6 * s);
			}
			
			A_AlertMonsters();
			
			/*
			for (int i = 0; i < P1 + 50; i++)
			{
				if (A_Overlay(i,"Overlay.Pitch",true))
					break;
			}
			*/
			AkOffset();
		}
	D4Pistol.ContinueFire:
		"####" B 1 Bright {	AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); AdjustHaste();	}
		"####" C 1 { AkOffset((3, -2), WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" C 1 { AkOffset((3, -3), WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); AdjustHaste(); }
		"####" C 1 { AkOffset((2, 3), WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" A 1 { AkOffset((-6, 3), WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_NOSWITCH|WRF_NOBOB); AdjustHaste(); }
		"####" A 1 { AkOffset((-2, -2), WOF_ADD);AkWeaponReady(WRF_NOSECONDARY|WRF_ALLOWRELOAD|WRF_NOSWITCH|WRF_NOBOB); }
		"####" A 1 
		{
			AkOffset();
			if (invoker.owner.CountInv("PistolUpgradeAutomatic"))		
			{	invoker.AkRefire(OverlayID(), "D4Pistol.Fire");	}
			//A_WeaponReady(WRF_ALLOWRELOAD|WRF_NOSWITCH|WRF_NOBOB);
			//if (invoker.owner.CountInv("PowerD4DFS")) { A_SetTics(0); }
			invoker.AdjustHaste();
			
		}
		Goto D4Pistol.Ready;
	
	//--------------------------------------------------------------------------
	D4Shotgun.Select:
		DW3A A 0 { UpdateStates(ID_D4Shotgun); }
		Goto CommonSelect;
	D4Shotgun.Ready:
		DW3A A 1 { AkWeaponReady(0, true); }
		Wait;
	D4Shotgun.Fire:
		---- A 1;
		Goto D4Shotgun.Ready;
		
	//--------------------------------------------------------------------------
	D4SuperShotgun.Select:
		M665 A 0 { UpdateStates(ID_D4SuperShotgun); }
		Goto CommonSelect;
	D4SuperShotgun.Ready:
		M665 A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	D4SuperShotgun.Fire:
		---- A 1;
		Goto D4SuperShotgun.Ready;
	//--------------------------------------------------------------------------
	D4Repeater.Select:
		REPG A 0 { UpdateStates(ID_D4Repeater); }
		Goto CommonSelect;
	D4Repeater.Ready:
		REPG A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	//--------------------------------------------------------------------------
	D4AssaultRifle.Select:
		ARNI A 0 { UpdateStates(ID_D4AssaultRifle); }
		Goto CommonSelect;
	D4AssaultRifle.Ready:
		ARNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	//--------------------------------------------------------------------------
	D4Chaingun.Select:
		CGNS A 0 { UpdateStates(ID_D4Chaingun); }
		Goto CommonSelect;
	D4Chaingun.Ready:
		CGNS A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	//--------------------------------------------------------------------------
	D4RocketLauncher.Select:
		RLNI A 0 { UpdateStates(ID_D4RocketLauncher); }
		Goto CommonSelect;
	D4RocketLauncher.Ready:
		RLNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4PlasmaRifle.Select:
		PRNI A 0 { UpdateStates(ID_D4PlasmaRifle); }
		Goto CommonSelect;
	D4PlasmaRifle.Ready:
		PRNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4LightningGun.Select:
		LGNI A 0 { UpdateStates(ID_D4LightningGun); }
		Goto CommonSelect;
	D4LightningGun.Ready:
		LGNI AABBCC 1 bright { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4StaticRifle.Select:
		STRF A 0 { UpdateStates(ID_D4StaticRifle); }
		Goto CommonSelect;
	D4StaticRifle.Ready:
		STRF A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4VortexRifle.Select:
		VTXG A 0 { UpdateStates(ID_D4VortexRifle); }
		Goto CommonSelect;
	D4VortexRifle.Ready:
		VTXG A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4GaussCannon.Select:
		GCNI A 0 { UpdateStates(ID_D4GaussCannon); }
		Goto CommonSelect;
	D4GaussCannon.Ready:
		GCNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4CarrionCannon.Select:
		HELG A 0 { UpdateStates(ID_D4CarrionCannon); }
		Goto CommonSelect;

	D4CarrionCannon.Ready:
		HELG H 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//--------------------------------------------------------------------------
	D4BFG.Select:
		TNT1 A 1 
		{
			UpdateStates(ID_D4BFG);
			AkOffset((128,0),0,true);
		}
		WE27 A 1
		{
			int id = OverlayID();
			AkOffset((-(WeaponSwitchSpeed + 6) / 2, 0), WOF_ADD);
			if ((id == OV_LeftWeapon && invoker.LO.x >= 0) || (id == OV_RightWeapon && invoker.RO.x <= 0)) 
			{
				AkOffset((0,0));
				AkRaiseGun(512,true); // Force it immediately.
			}
			else invoker.interpolate[(id == OV_RightWeapon) ? Right : Left] = true;
		}
		Wait;
	D4BFG.Deselect:
		---- A 1
		{
			int id = OverlayID();
			if ((id == OV_LeftWeapon && invoker.LO.x < -128) || (id == OV_RightWeapon && invoker.RO.x > 128)) 
			{
				AkOffset((0,WEAPONBOTTOM),0,true);
				AkLowerGun(512,true); // Force it immediately.
				invoker.interpolate[(id == OV_RightWeapon) ? Right : Left] = true;
			}
			else 
			{
				AkOffset(((WeaponSwitchSpeed + 6) / 2, 0), WOF_ADD);
			}
		}
		Wait;
	D4BFG.Ready:
		WE27 A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	D4Pistol.Deselect:
	D4Shotgun.Deselect:
	D4SuperShotgun.Deselect:
	D4Repeater.Deselect:
	D4AssaultRifle.Deselect:
	D4Chaingun.Deselect:
	D4RocketLauncher.Deselect:
	D4PlasmaRifle.Deselect:
	D4LightningGun.Deselect:
	D4StaticRifle.Deselect:
	D4VortexRifle.Deselect:
	D4GaussCannon.Deselect:
	D4CarrionCannon.Deselect:
	
	CommonDeselect:
		---- A 1 { AkLowerGun(WeaponSwitchSpeed + 6); }
		Wait;
	CommonSelect:
		---- A 1 { AkRaiseGun(WeaponSwitchSpeed + 6); }
		Wait;
	}
}

Class UpdateLeftWeapon : Inventory { }
Class UpdateRightWeapon : Inventory { }
Class LeftWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }
Class RightWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }


