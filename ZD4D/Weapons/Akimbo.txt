/*==============================================================================

	Akimbo System
	Developed by Major Cooke
	
================================================================================

	The idea is simple: Hold one weapon in the left, and the other one in the 
	right. This is not the same as dual wielding, since the only weapon dual 
	wieldable is the Super Shotgun.

	The code is, unfortunately, far more complex. Ye be warned, all you
	code sp'lunkers, your in for some nasty surprises and headaches.

	To keep the code clean, see AkimboFunctions for all the functions and base
	states (Select, Deselect, Ready, Fire).
==============================================================================*/

Struct AkimboStates
{
	StateLabel ReadyState;
	StateLabel FireState;
	StateLabel AltFireState;
	StateLabel SelectState;
	StateLabel DeselectState;
	StateLabel ModState;
	
	void Init()
	{
		ReadyState = FireState = AltFireState = SelectState = DeselectState = null;
	}
}

Struct AkimboStateFlags
{
	bool bAddWeapon;
	bool bAddBob;
	bool bPowDouble;
	bool bCVarFast;
	bool bFlip;	
}

Class AkimboWeapon : Weapon
{
	enum StatesNum
	{
		ID_D4Pistol = 1,
		ID_D4Shotgun,
		ID_D4SuperShotgun,
		ID_D4Repeater,
		ID_D4AssaultRifle,
		ID_D4Chaingun,
		ID_D4RocketLauncher,
		ID_D4PlasmaRifle,
		ID_D4LightningGun,
		ID_D4GaussCannon,
		ID_D4VortexRifle,
		ID_D4StaticRifle,
		ID_D4CarrionCannon,
		ID_D4BFG
	};
	AkimboStates as[15], LeftStates, RightStates;
	int Status[2];
	StateLabel LeftNext, RightNext;
	Class<Weapon> LeftPend, RightPend;
	Class<Weapon> LeftGun, RightGun;
	int InputCur, InputOld;
	int WeaponFlags;
	Vector2 LOff, ROff, LO, RO;
	uint8 WeaponID[2];
	bool IsLowering;
	bool interpolate[2];
	Actor SoundMaker[2];
	enum StatusState
	{
		Left = 0,
		Right = 1,
		Nurr = 0,
		Ready = 1,		// Ready to fire
		Fire,			// Firing primary
		AltFire,		// Firing secondary
		ChangeMod,		// Changing mods
		ChangeWeapon,	// Changing weapons
		Raise,			// Raising
		Lower,			// Lowering
	};
	enum AKOverlays
	{
		AKBase = 30000,
		AKRLow = 30003,
		AKRHigh = 39999,
		OV_LeftWeapon = 30000,
		OV_RightWeapon = 30001,
		OV_CheckWeapons = 30002,
		OV_SwitchLeft,
		OV_SwitchRight,
		OV_Custom
	};
	Default
	{
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.7;
		Weapon.BobRangeY 0.5;
		+WEAPON.AMMO_OPTIONAL
		+WEAPON.ALT_AMMO_OPTIONAL
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
		Weapon.UpSound "Doom4/Weapons/WeaponSwitch";
		Tag "Akimbo Guns";
	}
	States
	{	
	
	// Main states are in AkimboFunctions.txt
	

	//==========================================================================
	//==========================================================================
	// Pistol
	//==========================================================================
	//==========================================================================
	D4Pistol.Select:
		WEP1 A 0 
		{
			PSprite psp = player.FindPSprite(OverlayID());
				if (psp) psp.Sprite = GetSpriteIndex(CountInv("PistolUpgradeDamage") ? "PIS2" : "WEP1");
			UpdateStates(ID_D4Pistol); 
		}
		Goto CommonSelect;
	D4Pistol.Ready:
		---- A 1 
		{
			PSprite psp = player.FindPSprite(OverlayID());
			if (psp) psp.Sprite = GetSpriteIndex(CountInv("PistolUpgradeDamage") ? "PIS2" : "WEP1");
			AkWeaponReady(0, true); 
		}
		Loop;
	D4Pistol.Fire:
		"####" "#" 0 Bright  
		{
			AkOffset();
			if (CountInv("PistolUpgradeDamage"))
				A_FireBullets(0,0,1,random(6,14),"D4PistolPuffRed",FBF_NORANDOMPUFFZ|FBF_NORANDOM); // from 6 to 14
			else
				A_FireBullets(0,0,1,3,"D4PistolPuffNormal",FBF_NORANDOMPUFFZ); //either 3, 6 or 9 dmg	
		}
	D4Pistol.FireCont:
		#### B 1
		{
			int s = Side();
			if (CountInv("PistolUpgradeDamage"))
			{
				AkPlaySound("Doom4/Weapon/Pistol2/Fire",CHAN_WEAPON,1);
				A_FireProjectile("PistolTracerRed",0,0,6*s);
			}
			else
			{
				AkPlaySound("Doom4/Weapon/Pistol/Fire",CHAN_WEAPON,1);
				A_FireProjectile("PistolTracerNormal",0,0,6*s);
			}
			A_AlertMonsters();
			/*
			for (int i = 0; i < P1 + 50; i++)
			{
				if (A_Overlay(i,"Overlay.Pitch",true))
					break;
			}
			*/
		}
		"####" B 1 Bright {	AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); AdjustHaste();	}
		"####" C 1 { AkOffsetD( 3,-2, WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" C 1 { AkOffsetD( 3,-3, WOF_ADD, false, OverlayID(), 0); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" C 1 { AkOffsetD( 2, 3, WOF_ADD); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" A 1 { AkOffsetD(-6, 3, WOF_ADD, false, OverlayID(), 0); AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" A 1 { AkOffsetD(-2,-2, WOF_ADD);	AkWeaponReady(WRF_NOSECONDARY|WRF_NOSWITCH|WRF_NOBOB); }
		"####" A 1 
		{
			AkOffsetD(0, 0, 0, false, OverlayID(), 0);
			if (invoker.owner.CountInv("PistolUpgradeAutomatic"))		
			{	AkRefire("D4Pistol.Fire");	}
			
			
		}
		Goto D4Pistol.Ready;
	D4Pistol.AltFire:
		ChargeStart:
			TNT1 A 1 
			{
				Sound snd = CountInv("PistolUpgradeAltCharge") ? "Doom4/Weapon/Pistol2/Charge" : "Doom4/Weapon/Pistol/Charge";
				AkPlaySound(snd,5,1,1);
				
				PSprite psp = player.FindPSprite(OverlayID());
				if (psp) psp.Sprite = GetSpriteIndex(CountInv("PistolUpgradeAltDamage") ? "PIS2" : "WEP1");
			}
		D4Pistol.SecondaryCharging:
			#### A 1
			{
				int counter[2];
				counter[0] = CountInv("PistolAltFireCounter");
				counter[1] = CountInv("PistolLanceCounter");
				//------------
				//charge speed upgrade check
				
				A_GiveInventory("PistolAltFireCounter",1 + CountInv("PistolUpgradeAltCharge") + (CountInv("PowerD4DFS") * 1));
								
				if (counter[1] >= 52)
				{
					if (!CountInv("PistolLanceReadyToken"))
					{
						A_SetInventory("PistolLanceReadyToken",1);
						AkPlaySound("Doom4/Weapon/Shotgun/TripleShotAim",CHAN_WEAPON,1);
					}
				}				
				if (counter[0] >= 50)
				{
					AkOffsetD(frandom(-2.0,2.0),frandom(-2.0,2.0));
					if (CountInv("PistolLanceActive"))
				    {
					    A_GiveInventory("PistolLanceCounter",4 + (CountInv("PowerD4DFS") * 2)); 
			     	}
				}
				else if ((counter[0] >= 35) || (counter[0] >= 20 && random(0,1))) 
					AkOffsetD(frandom(-1.0,1.0),frandom(-1.0,1.0));
				
				AkRefire("D4Pistol.ReleaseCharge", true, false);
				AkRefire("D4Pistol.ReleaseCharge", false, false);
				AkWeaponReady(WRF_NOFIRE);
			}
			#### A 0 // Allow either to release the charge.
			{
				AkRefire("D4Pistol.ReleaseCharge", true, false);
				AkRefire("D4Pistol.ReleaseCharge", false, false);
				AkWeaponReady(WRF_NOFIRE);
			}
			Goto D4Pistol.SecondaryCharging;
			
	D4Pistol.ReleaseCharge:
		"####" A 0
		{
			AkOffset();
		    if (CountInv("PistolLanceReadyToken"))		{	return ResolveState("D4Pistol.ReleaseLance"); }
			int count = CountInv("PistolAltFireCounter");
			int dmg = 6;
			Sound snd;
			Class<Actor> puff;
			let inv = invoker.owner.FindInventory("PistolAltFireCounter");
			if (inv)
			{
				dmg = Clamp(inv.Amount, 1, inv.MaxAmount);
				if (CountInv("PistolUpgradeAltDamage"))
					dmg = random(6 * dmg, 14 * dmg);
				else
					dmg = random(3 * dmg, 9 * dmg);
			}
				 if (count >= 48) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig1Red" : "D4PistolPuffBig1");
			else if (count >= 32) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig1Red" : "D4PistolPuffBig1");
			else if (count >= 16) 	puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffBig1Red" : "D4PistolPuffBig1");
			else					puff = (CountInv("PistolUpgradeAltDamage") ? "D4PistolPuffRed" : 	 "D4PistolPuffNormal");
			A_FireBullets(0,0,1,dmg,puff,FBF_NORANDOMPUFFZ);
			A_TakeInventory("PistolAltFireCounter",100);
			StateLabel next = 'D4Pistol.EndRelease'; if (count < 16)	next = 'D4Pistol.FireCont';
			return ResolveState(next);
		}
	D4Pistol.EndRelease:
		"####" B 2 Bright
		{
			int s = Side();
			if (CountInv("PistolUpgradeAltDamage"))
			{
				A_FireProjectile("PistolTracerRed",0,0,6*s);
				AkPlaySound("Doom4/Weapon/Pistol2/ChargedFire",CHAN_WEAPON,1);
			}
			else
			{
				A_FireProjectile("PistolTracerNormal",0,0,6*s);
				AkPlaySound("Doom4/Weapon/Pistol/ChargedFire",CHAN_WEAPON,1);
			}
			A_AlertMonsters();
			
			A_TakeInventory("PistolAltFireCounter",200);
			A_TakeInventory("PistolLanceCounter",200);
			AkStopSound(5,6);
			/*
			for (int i = 0; i < P1 + 50; i++)
			{
				if (A_Overlay(i,"Overlay.PitchAlt",true))
					break;
			}
			*/
		}
		"####" C 1 { AkOffsetD(3,-2, 0, false, OverlayID(), 0); }
		"####" C 1 { AkOffsetD(6,-5); }
		"####" D 1 { AkOffsetD(6,-5, 0, false, OverlayID(), 0); }
		"####" D 1 { AkOffsetD(8,-7); }
		"####" D 1 { AkOffsetD(6,-5, 0, false, OverlayID(), 0); }
		"####" D 1 { AkOffsetD(3,-2); }
		"####" C 1 { AkOffsetD(2, 0, 0, false, OverlayID(), 0); }
		"####" C 1 { AkOffsetD(1, 1); }
		"####" A 1 { AkOffsetD(1, 0, 0, false, OverlayID(), 0); AkWeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_ALLOWRELOAD|WRF_NOSWITCH); }
		"####" A 1 { AkRefire("D4Pistol.AltFire"); AkWeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_ALLOWRELOAD|WRF_NOSWITCH);	}
		Goto D4Pistol.Ready;				
	D4Pistol.ReleaseLance:
		"####" B 2 Bright
		{
			AkPlaySound("Doom4/Weapon/PistolL/Fire",CHAN_WEAPON,1);
			A_RailAttack(100+random(1,180),2,1,"Green","Green",RGF_SILENT|RGF_FULLBRIGHT|RGF_NOPIERCING,0,"LanceShockwave",0,0,0,0,5,1.0,"LanceTrail",5);
			A_AlertMonsters();
			A_TakeInventory("PistolAltFireCounter",200);
			A_TakeInventory("PistolLanceCounter",200);
			A_TakeInventory("PistolLanceReadyToken",1);
			A_StopSound(5);
			A_StopSound(6);
			/*
			for (int i = P1; i < P4 + 1; i++)
			{
				if (A_Overlay(i, "Overlay.PitchAlt", true))
					break;
			}
			*/
		}
		"####" BBBBB 2 Bright;
		"####" C 1 { AkOffsetD(3,-2); }
		"####" C 1 { AkOffsetD(6,-5, 0, false, OverlayID(), 0); }
		"####" D 1 { AkOffsetD(6,-5); }
		"####" D 1 { AkOffsetD(8,-7, 0, false, OverlayID(), 0); }
		"####" D 1 { AkOffsetD(6,-7); }
		"####" D 1 { AkOffsetD(3,-2, 0, false, OverlayID(), 0); }
		"####" D 1 AkPlaySound("Doom4/Weapon/PistolL/Smoke",CHAN_WEAPON,1);
		"####" DDDDDDDD 3 A_FireProjectile("SGSmokeSpawner",0,0,Side(6),2);
		"####" C 1 { AkOffsetD(2, 0, 0, false, OverlayID(), 0); }
		"####" C 1 { AkOffsetD(1, 1); }
		"####" A 1 { AkOffsetD(1, 0, 0, false, OverlayID(), 0); AkWeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_ALLOWRELOAD|WRF_NOSWITCH); }
		"####" A 1 { AkWeaponReady(WRF_NOSECONDARY|WRF_NOBOB|WRF_ALLOWRELOAD|WRF_NOSWITCH);	}
		Goto D4Pistol.Ready;
	//==========================================================================
	//==========================================================================
	// Shotgun
	//==========================================================================
	//==========================================================================
	D4Shotgun.Select:
		DW3A A 0 { UpdateStates(ID_D4Shotgun); }
		Goto CommonSelect;
	D4Shotgun.Ready:
		DW3A A 1 
		{
			AkWeaponReady(WRF_NOSECONDARY, true);
		}
		Wait;
	D4Shotgun.Fire:
		"####" B 1 Bright 
		{
			int s = Side();
			
			if (GetCvar("user_TracerFX") > 0.0) //Remember, it's a SERVER cvar. Can't be a client.
			{
				for (int i = 0; i < 4; i++)
					A_FireProjectile("BulletTracerFX",frandom(4.5,-4.5),0,7 * s,0,0,frandom(1.1,-1.1));
			}
			if(GetCvar("HQEffectsWeapons"))
			{
				for (int i = 0; i < 2; i++)
					A_FireProjectile("SGSmokeSpawner",0,0,6 * s,2);
			}
			A_FireBullets(4.5,1.1,7,5);	//original SG is spread h5.6 v0.0. Here it adds to the same 5.6 total
			A_AlertMonsters();
			A_GunFlash("Null");
			A_ZoomFactor(0.99,ZOOM_NOSCALETURNING);
			AkPlaySound("Doom4/Weapon/Shotgun/Fire",CHAN_WEAPON,1);
			A_SetBlend("orange",0.05,6);
			AkOffsetD(6,4);
			//A_Overlay(2,"Overlay.PitchSetter");
		}
		"####" C 1 Bright AkOffsetD(8,6);
		"####" A 1 
		{ 
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
			AkOffsetD(12,9);
		}
		//AkWeaponReady(WRF_NOFIRE|WRF_NOBOB); 
		"####" A 3 { AkOffsetD(16,12, 0, false, OverlayID(), 1); }
		"####" A 1 { AkOffsetD(15, 9); }
		"####" A 1 { AkOffsetD(12, 6, 0, false, OverlayID(), 0); }
		"####" A 1 { AkOffsetD(10, 5); }
		"####" A 1 { AkOffsetD( 8, 4, 0, false, OverlayID(), 0); }
		"####" A 1 { AkOffsetD( 6, 3); }
		"####" A 1 { AkOffsetD( 4, 2, 0, false, OverlayID(), 0); }
		"####" A 1 { AkOffsetD( 2, 1); }
		"####" A 1 { AkOffsetD( 0, 0, 0, false, OverlayID(), 0); }
		//pump start
		"####" DFHI 1 
		{
			AkWeaponReady(WRF_NOFIRE|WRF_NOBOB);
			AkOffsetD(3,2,WOF_ADD); //+12 + 8 
		}
		"####" H 2 
		{
			if (GetCvar("user_Casings"))	{ A_SpawnItemEx("ShotgunCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); }
			AdjustHaste(0);
			AkWeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		"####" HHHHGFED 1 
		{
			AkOffsetD(-1.5,-1,WOF_ADD); //-9 -6
			AkWeaponReady(WRF_NOFIRE|WRF_NOBOB);
		}
		"####" "#" 0 { AkRefire("D4Shotgun.Fire"); }
		"####" "#" 0 { AkWeaponReady(WRF_NOBOB); }
		Goto D4Shotgun.Ready;
		
	//--------------------------------------------------------------------------
	D4SuperShotgun.Select:
		M665 A 0 { UpdateStates(ID_D4SuperShotgun); A_SetInventory("SSRSecondShotToken", 0); A_SetInventory("SSLSecondShotToken", 0);}
		Goto CommonSelect;
	D4SuperShotgun.Ready:
		M665 A 1 
		{ 
			AkWeaponReady(0, true);
			A_Overlay(OverlayID() + 10,"D4SuperShotgun.Watch", true);
		}
		Loop;
	D4SuperShotgun.Watch:
		M666 A 1
		{
			int id = OverlayID();
			if (AkCheckFire(true, false, id - 10))
			{
				ACS_NamedExecute("ToggleDoubleTrouble",0,0,0,0);
			}
			if (invoker.LeftGun != "D4SuperShotgun" && invoker.RightGun != "D4SuperShotgun" && id != PSP_WEAPON)
				return Destroy();
		}
		Wait;
	D4SuperShotgun.Fire:
		M665 B 1 Bright 
		{
			//AkOffsetD();
			//AkOffsetD(12,5,WOF_ADD);
			AkOffsetD(12,5);
			
			int s = Side();
			double newspread = (CountInv("SSGUpgrade3") ? 7.1 : 11.2);
			//-----------------------------------------------------
			// Double trouble section
			//A_TakeInventory("D4Shells",1,TIF_NOTAKEINFINITE);
			A_GunFlash("Null");
			class<Actor> PuffRail = null;
			int gibbing = GetCVar("user_SSGGib");
			
				 if (gibbing == 0)	PuffRail = "D4BulletPuffForRails";
			else if (gibbing == 1)	PuffRail = random(0,1) ? "D4BulletPuffForRails" : "D4BulletPuffForRailsExtreme";
			else					PuffRail = "D4BulletPuffForRailsExtreme";
			
			int repeat = (!GetCvar("D4D_DTMode") && !CountInv("SSRSecondShotToken")) ? 2 : 1;
			
			for (int i = 0; i < repeat; i++)
			{
				if (CountInv("SSGUpgrade2"))	//if you have piercing shots
				{
					
					for (int i = 0; i < 10; i++)
					{
						double sprs = 10.415 * 4.0;
						if (i < 7)	{	A_RailAttack(DmgBase*random(DmgMulMin,DmgMulMax),5*s,0,-1,-1,RGF_SILENT|RGF_EXPLICITANGLE,0,PuffRail,frandom(-newspread,newspread),frandom(-SpreadZ,SpreadZ),0,0,sprs,0,"BulletTrailBeam");	}
						else		{	A_RailAttack(DmgBase*random(DmgMulMin,DmgMulMax),0,0,-1,-1,RGF_SILENT|RGF_EXPLICITANGLE,0,PuffRail,frandom(-newspread,newspread),frandom(-SpreadZ,SpreadZ));	}
					}
					
				}
				else //if you dont have piercing shots, then you're in normal state
				{
					A_FireBullets(CountInv("SSGUpgrade3") ? SpreadZ : SpreadXY,SpreadZ,7,DmgBase,PuffRail,0,0,"BulletTracerFX",0,5*s);
					A_FireBullets(CountInv("SSGUpgrade3") ? SpreadZ : SpreadXY,SpreadZ,3,DmgBase,PuffRail,0,0);
				}
			}
			
			if (GetCvar("HQEffectsWeapons"))
			{
				A_FireProjectile("SGSmokeSpawner",0,0,4*s,2);
				A_FireProjectile("SGSmokeSpawner",0,0,5*s,2);
				A_FireProjectile("SGSmokeSpawner",0,0,6*s,2);
			}
			
			A_GiveInventory("SSRSecondShotToken",Clamp(repeat,1,2));
			A_AlertMonsters();
			
			if (CountInv("SSRSecondShotToken") < 2)
			{	AkPlaySound("Doom4/Weapon/SuperShotgun/FireSingle",5,1);	}
			else
			{	
				Sound snd = (CountInv("SSGUpgrade1")) ? "Doom4/Weapon/SuperShotgun/FireFast" : "Doom4/Weapon/SuperShotgun/Fire";
				AkPlaySound(snd,6,1);	
			}
			
			//-----------------------------------------------------
			// Rest of the animation
		}
		M665 B 1 bright
		{
			//AkOffsetD(24,39-32);
			AkOffsetD(12, 5,WOF_ADD);
			if (CountInv("SSRSecondShotToken") < 2)
				AkRefire("D4SuperShotgun.Fire", false, false);
			else
				return ResolveState("SSR.Reload");
			
			return ResolveState(null);
		}
		M665 C 1 { AkOffsetD( 6, 3,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}	//30 13
		M665 C 1 { AkOffsetD(-8,-5,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}
		M665 C 1 { AkOffsetD(-7,-3,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}
		M665 C 1 { AkOffsetD(-6,-2,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}
		M665 C 1 { AkOffsetD(-5,-2,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}
		M665 A 1 { AkOffsetD(-4,-1,WOF_ADD); AkRefire("D4SuperShotgun.Fire", false, false);}
		M665 A 0 AkOffsetD();
		Goto D4SuperShotgun.Ready;
	SSR.Reload:
		M665 C 1
		{
			if (CountInv("PowerD4DFS"))
				return ResolveState("SSR.ReloadFast");
			
			AkOffsetD(-6, 3,WOF_ADD);
			return ResolveState(null);
		}
		M665 C 1 AkOffsetD(-8,-5,WOF_ADD);
		M665 C 1 AkOffsetD(-7,-3,WOF_ADD);
		M665 C 1 AkOffsetD(-6,-2,WOF_ADD);
		M665 C 1 AkOffsetD(-5,-2,WOF_ADD);
		M665 D 1 AkOffsetD(-4,-1,WOF_ADD); //6
		
		M665 DDDDE 1 AkOffsetD(2,6,WOF_ADD); //6
		"####" "#" 1
		{
			AkOffsetD(2,6,WOF_ADD);
			if (GetCvar("user_Casings"))
			{
				if (OverlayID() == OV_RightWeapon)
					for (int i = 0; i < 2; i++)
						A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				
				else
					for (int i = 0; i < 2; i++)
						A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
			}
		}
		M665 FFFF 1 AkOffsetD(2, 3,WOF_ADD);
		M665 FFFF 1 AkOffsetD(2, 2,WOF_ADD);	//8
		M665 G 20 	//5
		{
			if (CountInv("SSGUpgrade1"))
				A_SetTics(5);
		}
		
		M665 HHII 1 AkOffsetD(-4,-9,WOF_ADD);
		M665 JJJJ 1 AkOffsetD( 1,-2,WOF_ADD);	//8
		M665 A 0 
		{
			AkOffsetD();
			A_SetInventory("SSRSecondShotToken",0);
			A_SetInventory("SSLSecondShotToken",0);
		}
		Goto D4SuperShotgun.Ready;
		
	SSR.ReloadFast:
		M665 C 1 AkOffsetD(  6,  3,WOF_ADD);
		M665 C 1 AkOffsetD(-15, -8,WOF_ADD);
		M665 C 1 AkOffsetD(-11, -4,WOF_ADD);
		M665 C 0 AkOffsetD( -4, -1,WOF_ADD); //6
		M665 DD 1 AkOffsetD( 4, 12,WOF_ADD); //6
		#### E 1
		{
			AkOffsetD(4,12,WOF_ADD);
			if (OverlayID() == OV_RightWeapon)
				for (int i = 0; i < 2; i++)
					A_SpawnItemEx("SSGCasingSpawnerRight",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
				
			else
				for (int i = 0; i < 2; i++)
					A_SpawnItemEx("SSGCasingSpawnerLeft",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
		M665 FF 1 AkOffsetD(-4, 4,WOF_ADD);
		M665 FF 1 AkOffsetD( 4,-4,WOF_ADD);	//8
		M665 GG 1 ;	//5

		
		M665 HI 1 AkOffsetD(4,-16,WOF_ADD);
		M665 JJ 1 AkOffsetD(2,  6,WOF_ADD);	//8
		M665 A 0 
		{
			AkOffsetD();
			A_SetInventory("SSRSecondShotToken",0);
			A_SetInventory("SSLSecondShotToken",0);
		}
		Goto D4SuperShotgun.Ready;
	
	//==========================================================================
	//==========================================================================
	// Repeater
	//==========================================================================
	//==========================================================================
	D4Repeater.Select:
		REPG A 0 { UpdateStates(ID_D4Repeater); }
		Goto CommonSelect;
	D4Repeater.Ready:
		REPG A 1 { AkWeaponReady(0, true); }
		Loop;
	D4Repeater.Fire:
		REPG B 0 
		{
			/*
			invoker.AmmoUse1 = CountInv("RepeaterUpgradeDamage") ? 3 : 2;
			
			if (A_JumpIfNoAmmo("NotEnoughAmmo"))
				return ResolveState("NotEnoughAmmo");
			*/
			Sound snd = (CountInv("D4Bullets") >= invoker.AmmoUse1 && !D4D_RepeaterMode)
						? "Doom4/Weapon/Repeater/FireTriple" : "Doom4/Weapon/Repeater/FireSingle";
			AkPlaySound(snd,CHAN_WEAPON);
			return ResolveState("D4Repeater.FireLoop");
		}
	D4Repeater.FireLoop:
		#### B 1
		{
			int s = Side();
			if (CountInv("RepeaterCounter") >= 3)// || A_JumpIfNoAmmo("Null"))
			{
				A_SetInventory("RepeaterCounter", 0);
				return ResolveState("D4Repeater.EndFire");
			}
			
			//checks for upgrades
			if(CountInv("RepeaterUpgradePiercing"))	// if piercing upgrade
			{
				if (GetCvar("user_TracerFX") > 0)	{	A_FireProjectile("BulletTracerFX",0,0,6 * s,0,0,0); }
				A_RailAttack(((CountInv("RepeaterUpgradeDamage") ? 22 : 14)*random(1,3)),0,1,-1,-1,RGF_SILENT|RGF_NORANDOMPUFFZ,0,"D4BulletPuffForRails",0,0,0,10,0,0,null,0,0,2); 
			}
			
			else //didnt have piercing upgrade
			{
				if (GetCvar("user_TracerFX") > 0)	{	A_FireBullets(0,0,-1,(CountInv("RepeaterUpgradeDamage") ? 22 : 14),"D4BulletPuff",PuffTracer|FBF_USEAMMO,0,"BulletTracerFX",-1,7 * s); 	}
				else								{	A_FireBullets(0,0,-1,(CountInv("RepeaterUpgradeDamage") ? 22 : 14)); 	}
			}
			
			//casings on?
			if (GetCvar("user_Casings"))
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);

			//weapon HQ on?
			if (GetCvar("HQEffectsWeapons"))
				A_FireProjectile("MGSmokeSpawner",0,0,4 * s,2);
			
			A_GiveInventory("RepeaterCounter",1 + (D4D_RepeaterMode * 2));
			A_GunFlash("Null");
			//A_SetPitch(pitch-0.8);
			AkOffsetD(8,8,WOF_ADD);
			A_AlertMonsters();
			return ResolveState(null);
			
		}
		REPG C 1 
		{
			//A_SetPitch(pitch+0.4);
			AkOffsetD(-3,-3,WOF_ADD);
			A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); 
		}
		REPG D 1 
		{
			//A_SetPitch(pitch+0.4);
			AkOffsetD(-3,-3,WOF_ADD);
		}
		Loop;
		
	D4Repeater.EndFire:
		REPG C 1 { AkOffsetD(6,6); }
		REPG C 1 { AkOffsetD(5,5,0,false,OverlayID(),0); }
		REPG A 1 { AkOffsetD(4,4); }
		REPG A 1 { AkOffsetD(3,3,0,false,OverlayID(),0); }
		REPG A 1 { AkOffsetD(2,2); }
		REPG A 1 { AkOffsetD(1,1,0,false,OverlayID(),0); }
		REPG A 0 { AkOffsetD(0.5,0.5); }
		
		REPG AAAAAAAAAAAAAAAAAA 1 AkWeaponReady(WRF_NOBOB,true); // half a second without bob, to avoid jerkiness when running and firing
		Goto D4Repeater.Ready;
		
	D4Repeater.Flash:
		TNT1 A 0 A_SetBlend("Orange",0.05,2);
		ZZZZ C 1 A_Light1();
		ZZZZ C 0 A_Light0();
		Stop;
		
	D4Repeater.AltFire:
		REPG B 2 Bright
		{
			int s = Side();
			AkPlaySound("Doom4/Weapon/Repeater/FireSingle",CHAN_WEAPON);
			AkPlaySound("Doom4/Weapon/HellShot/AltFire",5);
			
			//Ammo upgrade?
			//A_TakeInventory("D4Bullets",CountInv("RepeaterUpgradeAltAmmo") ? 5 : 8,TIF_NOTAKEINFINITE);
			
			A_GunFlash("Null");
			//Alt damage upgrade?
			if(CountInv("RepeaterUpgradeAltDamage"))
			{	A_FireProjectile("IncendiaryBulletDMG",0,0,6 * s);	}
			else
			{	A_FireProjectile("IncendiaryBullet",0,0,6 * s);	}
			
			//casings on?
			if (GetCvar("user_Casings"))
			{ 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
				A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER); 
			}

			//weapon HQ on?
			if(GetCvar("HQEffectsWeapons"))
			{ 
				A_FireProjectile("MGSmokeSpawner",0,0,4 * s,2); 
				A_FireProjectile("MGSmokeSpawner",0,0,4 * s,2); 
				A_FireProjectile("MGSmokeSpawner",0,0,4 * s,2); 
			}
			
			//A_SetPitch(pitch-1.8);
			AkOffsetD(20,20,WOF_ADD);
			A_SetBlend("Orange",0.05,5);
			A_Light2();
			A_AlertMonsters();
		}
		REPG C 0 
		{
			A_Light0();
			return A_JumpIf(CountInv("PowerD4DFS"),"D4Repeater.AltFast");
		}
		REPG CCDDCC 1 
		{
			//A_SetPitch(pitch+0.3);
			AkOffsetD(-2,-2,WOF_ADD);
		}
		REPG AAAAAAAA 1 AkOffsetD(-1,-1,WOF_ADD);
		Goto D4Repeater.Ready;
	D4Repeater.AltFast:
		REPG CDC 1 
		{
			//A_SetPitch(pitch+0.6);
			AkOffsetD(-4,-4,WOF_ADD);
		}
		REPG AAAA 1 AkOffsetD(-2,-2,WOF_ADD);
		Goto D4Repeater.Ready;
		
	NotEnoughAmmo:
		---- A 5 ACS_NamedExecute("NotEnoughAmmo",0,0,0);
		Goto D4Repeater.Ready;
	
	//==========================================================================
	//==========================================================================
	// Heavy Assault Rifle
	//==========================================================================
	//==========================================================================
	
	D4AssaultRifle.Mod:
		---- A 1 
		{
			if (!CountInv("AssaultRifleMod1") && !CountInv("AssaultRifleMod2"))
			{
				ACS_NamedExecute("NoModsAvailable",0,0,0,0);
				return ResolveState("D4AssaultRifle.Ready");
			}
			AkOffsetD(0, AkimboSwitchSpeed / 2, WOF_ADD);
			return ResolveState(null);
		}
		---- A 1
		{
			if (OverlayY() < 128)
				AkOffsetD(0, AkimboSwitchSpeed, WOF_ADD);
			else
			{
				if (countinv("AssaultRifleMod1")) //if has TacticalScope
				{
					if (countinv("MicroMissilesActive")) //but MicroMissiles was active
					{
						//return ResolveState("FromMicroMissilesToTacticalScope");
						A_SetInventory("MicroMissilesActive",0);
						A_SetInventory("TacticalScopeActive",1);
						AkPlaySound("Doom4/Weapon/Machinegun/SwitchToScope",5,1);
					}
					else if (!countinv("TacticalScopeActive"))
					{
						//return ResolveState("FromNormalToTacticalScope"); //but if it didnt have MicroMissiles active, then it was in "normal"
						A_SetInventory("MicroMissilesActive",0);
						A_SetInventory("TacticalScopeActive",1);
						AkPlaySound("Doom4/Weapon/Machinegun/SwitchToScope",5,1);
					}
				}
				if (countinv("AssaultRifleMod2")>=1) //if it has MicroMissiles
				{
					if (countinv("TacticalScopeActive")>=1) //but TacticalScope was active
					{
						//return ResolveState("FromTacticalScopeToMicroMissiles");
						A_SetInventory("MicroMissilesActive",1);
						A_SetInventory("TacticalScopeActive",0);
						AkPlaySound("Doom4/Weapon/Machinegun/SwitchToMissiles",5,1);
					}
					else if (countinv("MicroMissilesActive")==0)	//if nothing was active,
					{
						//return ResolveState("FromNormalToMicroMissiles"); //then it was in "normal" SG
						A_SetInventory("MicroMissilesActive",1);
						A_SetInventory("TacticalScopeActive",0);
						AkPlaySound("Doom4/Weapon/Machinegun/SwitchToMissiles",5,1);
					}
				}
				else
				{
					ACS_NamedExecute("NoModsAvailable",0,0,0,0);
				}
				return ResolveState(1);
			}
			
			let plr = invoker.owner.player;
			if (plr)
			{
				let psp = plr.FindPSprite(OverlayID());
				if (psp)
				{
					Name spr = "ARNI";
					if (CountInv("MicroMissilesActive"))
						spr = "ARMI";
					else if (CountInv("TacticalScopeActive"))
						spr = "ARSI";
					
					psp.Sprite = GetSpriteIndex(spr);
				}
			}
			
			return ResolveState(null);
		}
		Wait;
		
		// Now grab the state.
		---- A 0
		{
			if (CountInv("MicroMissilesActive"))
			{	return ResolveState("D4AssaultRifle.RaiseMicroMissile");	}
			if (CountInv("TacticalScopeActive"))
			{	return ResolveState("D4AssaultRifle.RaiseTacticalScope");	}
			return ResolveState("D4AssaultRifle.RaiseNormal");
		}
		
		D4AssaultRifle.RaiseNormal:
			ARNI A 0 A_Jump(256,"D4AssaultRifle.ModUp");
		D4AssaultRifle.RaiseMicroMissile:
			ARMI A 0 A_Jump(256,"D4AssaultRifle.ModUp");
		D4AssaultRifle.RaiseTacticalScope:
			ARSI A 0 A_Jump(256,"D4AssaultRifle.ModUp");
			
		// Now raise it.
		D4AssaultRifle.ModUp:
			---- A 1
			{
				if (OverlayY() > 32)
				{
					AkOffsetD(0, -AkimboSwitchSpeed, WOF_ADD);
					return ResolveState(null);
				}
				AkOffsetD();
				return ResolveState("D4AssaultRifle.Ready");
			}
		
	
	
		
	D4AssaultRifle.Ready:
		ARSI A 0
		{
			if (CountInv("TacticalScopeActive"))
			{
				return ResolveState("D4AssaultRifle.TacticalScopeReady");
			}
			else if (CountInv("MicroMissilesActive"))
			{
				return ResolveState("D4AssaultRifle.MicroMissilesReady");
			}
			return ResolveState("D4AssaultRifle.NormalSpriteReady");	
		}
		
		D4AssaultRifle.MicroMissilesReady:
			ARMI A 0 A_Jump(256,"D4AssaultRifle.ResumeReadySequence"); //I just know someone's going to abuse fast weapons.
		
		D4AssaultRifle.TacticalScopeReady:
			ARSI A 0 A_Jump(256,"D4AssaultRifle.ResumeReadySequence");
		
		D4AssaultRifle.NormalSpriteReady:
			ARNI A 0 A_Jump(256,"D4AssaultRifle.ResumeReadySequence");
			
	D4AssaultRifle.ResumeReadySequence:
		"####" "#" 0
		{
			if(countinv("TacticalScopeActive"))
			{	ACS_NamedExecute("ModSelectedText",0,1,0,0); }	//print Tactical scope
			if(countinv("MicroMissilesActive"))
			{	ACS_NamedExecute("ModSelectedText",0,2,0,0); }	//print Micro missiles
			
			return ResolveState("D4AssaultRifle.VeryReady");
		}
	D4AssaultRifle.VeryReady:
		"####" "#####" 1 AkWeaponReady(0, true);
		Loop;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	D4AssaultRifle.Select:
		M666 A 0 // Be safer about sprite selection.
		{
			UpdateStates(ID_D4AssaultRifle);
			ACS_NamedExecute("RemoveModText",0,0,0,0);
			if (CountInv("MicroMissilesActive"))
			{	return ResolveState("D4AssaultRifle.PrepareMicroMissilesSpriteSelect");	}
			if (CountInv("TacticalScopeActive"))
			{	return ResolveState("D4AssaultRifle.PrepareTacticalScopeSpriteSelect");	}
			return ResolveState("D4AssaultRifle.PrepareNormalSpriteSelect");
		}
		
		D4AssaultRifle.PrepareNormalSpriteSelect:
			ARNI A 0 A_Jump(256,"CommonSelect");
		D4AssaultRifle.PrepareMicroMissilesSpriteSelect:
			ARMI A 0 A_Jump(256,"CommonSelect");
		D4AssaultRifle.PrepareTacticalScopeSpriteSelect:
			ARSI A 0 A_Jump(256,"CommonSelect");

	D4AssaultRifle.Fire:
		M666 A 0
		{
			if (CountInv("MicroMissilesActive"))
			{	return ResolveState("D4AssaultRifle.MicroMissilesSprite");	}
			if (CountInv("TacticalScopeActive"))
			{	return ResolveState("D4AssaultRifle.TacticalScopeSprite");	}
			return ResolveState("D4AssaultRifle.NormalSprite");
		}
	
		D4AssaultRifle.NormalSprite:
			ARNF A 0 A_Jump(256,"D4AssaultRifle.FireNormalLooper");
		D4AssaultRifle.MicroMissilesSprite:
			ARMF A 0 A_Jump(256,"D4AssaultRifle.FireNormalLooper");
		D4AssaultRifle.TacticalScopeSprite:
			ARSF A 0 A_Jump(256,"D4AssaultRifle.FireNormalLooper");
	D4AssaultRifle.FireNormalLooper:
		"####" A 1 Bright
		{
			int s = Side();
			if (!CountInv("MachinegunFireToken"))
			{
				AkPlaySound("Doom4/Weapon/Machinegun/Fire",5,1);
				A_GiveInventory("MachinegunFireToken",1);
			}
			else
			{
				AkPlaySound("Doom4/Weapon/Machinegun/Fire",6,1);	//it plays in another channel
				A_TakeInventory("MachinegunFireToken",1);
			}
			if (GetCvar("user_Casings"))
			{	A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);	}
			
			if (GetCvar("user_TracerFX") > 0)	{	A_FireBullets(1,1,1,6,"D4BulletPuff",PuffTracer|FBF_USEAMMO,0,"BulletTracerFX",-1,7*s); 	}
			else								{	A_FireBullets(1,1,1,6); 	}
			
			A_AlertMonsters();
			A_GunFlash("Null");
			if(GetCvar("HQEffectsWeapons"))
			{
				A_FireProjectile("MGSmokeSpawner",0,0,5*s,2);
			}
			//A_SetPitch(pitch-0.5);
			A_ZoomFactor(0.995,ZOOM_NOSCALETURNING);
			A_SetBlend("orange",0.03,6);
			A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);
		}
		"####" B 1 Bright 
		{	
			AkOffsetD(4,4,WOF_ADD);
			A_ZoomFactor(1,ZOOM_NOSCALETURNING);
		}
		"####" C 1 Bright 
		{
			AkOffsetD(-2,-2,WOF_ADD);
			//A_SetPitch(pitch+0.25);
		}
		"####" D 1 Bright
		{
			AkOffsetD(-2,-2,WOF_ADD);
			//A_SetPitch(pitch+0.25);
		}
		"####" D 1
		{
			A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);
			return ResolveState(null);
		}
		"####" D 0 AkRefire("D4AssaultRifle.FireNormalLooper");
		Goto D4AssaultRifle.Ready;
		
		
	//-------------------------------------------------------
	// No ammo, used for the alt fires
	//-------------------------------------------------------
	D4AssaultRifle.NotEnoughAmmo:
		"####" "#" 5 
		{
			ACS_NamedExecute("NotEnoughAmmo",0,0,0);
			A_SetInventory("MGMissileToken",0);
			A_SetInventory("AltFireToken",0);
		}
		Goto D4AssaultRifle.Ready;
		
		D4AssaultRifle.StartScope:
			//Zoom In
			ARSI A 3
			{
				A_ZoomFactor(2.5);
				AkPlaySound("Doom4/Weapon/Machinegun/ZoomIn", 8, 1.0, 0);
				A_GiveInventory("MGZoomToken",1);
			}
		D4AssaultRifle.HoldScope:
			R016 N 1  
			{
				AkWeaponReady(WRF_NOFIRE|WRF_NOBOB,true);
				AkRefire("D4AssaultRifle.ZoomOut",true,false);
				AkRefire("D4AssaultRifle.FireZoomed",false,false);
				return ResolveState(null);
			}
			Loop;
		D4AssaultRifle.ZoomOut:
			//Zoom Out
			ARSI A 3
			{
				A_ZoomFactor(1.0);
				A_StopSound(6);
				AkPlaySound("Doom4/Weapon/Machinegun/ZoomOut", 8, 1.0, 0);
				A_SetInventory("MGZoomToken",0);
				A_SetInventory("AltFireToken",0);
			}
			Goto D4AssaultRifle.Ready;
			
		D4AssaultRifle.FireZoomed:
			R016 N 1 Bright
			{
				if (!CountInv("MachinegunFireToken"))
				{
					AkPlaySound("Doom4/Weapon/Machinegun/FireZoomed",5,1);
					A_GiveInventory("MachinegunFireToken",1);
				}
				else
				{
					AkPlaySound("Doom4/Weapon/Machinegun/FireZoomed",6,1);	//it plays in another channel
					A_TakeInventory("MachinegunFireToken",1);
				}
				A_AlertMonsters();
				A_GunFlash("Null");
				A_FireBullets(0,0,1,2);	//while this is there for the puff, it also deals 2*random(1,3) extra damage to first target hit
				A_RailAttack(6*random(1,3),0,0,-1,-1,RGF_SILENT);
				//casings check
				if (GetCvar("user_Casings"))
				{	
					A_SpawnItemEx("HARCasingSpawner",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER);	
				}
				//tracer check
				if (GetCvar("user_TracerFX") > 0)
				{	
					A_FireBullets(0,0,1,0,"D4BulletPuff",PuffTracer,0,"BulletTracerFX",-1,0); 	
				}
				else							
				{	A_FireBullets(0,0,1,0); 	}
				
				//A_SetPitch(pitch-0.4);
				A_SetBlend("orange",0.03,6);
			}
			"####" N 1 Bright A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);
			"####" NN 1 Bright; //A_SetPitch(pitch+0.2);
			"####" N 1
			{
				A_SetTics(CountInv("PowerD4DFS") ? 0 : 1);
			}
			"####" N 0 AkRefire("D4AssaultRifle.FireZoomed");
			Goto D4AssaultRifle.HoldScope;
		
		//-------------------------------------------------------
		// MiniMissiles
		D4AssaultRifle.FireMod2:
		D4AssaultRifle.StartMicro:
			ARMI A 0 
			{
				//if (CountInv("D4Bullets") >= 2 || GetCvar("sv_infiniteammo") > 0)
					return ResolveState("D4AssaultRifle.MissilesOpen");	
				
				return ResolveState("D4AssaultRifle.NotEnoughAmmo");
			}			
		D4AssaultRifle.MissilesOpen:
			ARMR A 0 
			{
				A_GiveInventory("MGMissileToken",1);
				return A_JumpIf(CountInv("PowerD4DFS"),"D4AssaultRifle.MissilesOpenFast");
			}
			ARMR ABCDEF 1;
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesOpenFast:
			ARMR ACE 1;
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesReady:
			ARMR F 1 
			{
				AkWeaponReady(WRF_NOFIRE);
				AkRefire("D4AssaultRifle.MissilesClose",true,false);
				AkRefire("D4AssaultRifle.MissilesFire",false,false);
			}
			Loop;
		D4AssaultRifle.MissilesClose:
			ARMR A 0 
			{
				A_SetInventory("MGMissileToken",0);
				A_SetInventory("AltFireToken",0);
				AkPlaySound("Doom4/Weapon/Machinegun/MinMissileRelease",6);
			}
			ARMR E 1 { A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMR D 1;
			ARMR C 1 { A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMR B 1;
			ARMR A 1 { A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			Goto D4AssaultRifle.Ready;
		
		
		D4AssaultRifle.MissilesFire:
			ARMR F 0
			{
				int s = Side();
				//if (CountInv("D4Bullets") < 2 && !GetCvar("sv_infiniteammo"))
				//{	return ResolveState("D4AssaultRifle.MissilesClose");	}
				A_AlertMonsters();
				A_GunFlash("Null");
				if(GetCvar("HQEffectsWeapons"))
				{
					A_FireProjectile("MGSmokeSpawner",0,0,5*s,2);
					A_FireProjectile("MGMiniMissile",0,0,5*s,2);	//fires the regular micro missiles
				}
				else
				{
					A_FireProjectile("MGMiniMissileNoTrail",0,0,5*s,2);	//micro missiles without trail
				}
				
				//A_TakeInventory("D4Bullets",2,TIF_NOTAKEINFINITE);
				//A_SetPitch(pitch-0.5);
				AkPlaySound("Doom4/Weapon/Machinegun/MiniMissileFire",5,1);
				A_SetBlend("orange",0.03,6);
				
				// Go by n-1 here. 
					 if (CountInv("MicroMissilesCounter") <= 0)	{	A_GiveInventory("MicroMissilesCounter",1); 			return ResolveState("D4AssaultRifle.MissilesFire1"); }
				else if (CountInv("MicroMissilesCounter") == 1)	{	A_GiveInventory("MicroMissilesCounter",1); 			return ResolveState("D4AssaultRifle.MissilesFire2"); }
				else if (CountInv("MicroMissilesCounter") == 2)	{	A_GiveInventory("MicroMissilesCounter",1); 			return ResolveState("D4AssaultRifle.MissilesFire3"); }
				else if (CountInv("MicroMissilesCounter") == 3)	{	A_GiveInventory("MicroMissilesCounter",1); 			return ResolveState("D4AssaultRifle.MissilesFire4"); }
				else if (CountInv("MicroMissilesCounter") == 4)	{	A_GiveInventory("MicroMissilesCounter",1); 			return ResolveState("D4AssaultRifle.MissilesFire5"); }
				else 											{	A_SetInventory("MicroMissilesCounter",0);			return ResolveState("D4AssaultRifle.MissilesFire6");	}
			}
		
		D4AssaultRifle.MissilesFire1:
			ARMA B 1 Bright AkOffsetD(1.0, 33.0);
			ARMA C 1      { AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA D 1      { AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA D 1      { AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA D 1;
			ARMA D 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesFire2:
			ARMA E 1 Bright  AkOffsetD(1.0, 33.0);
			ARMA F 1      { AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA G 1      { AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA G 1      { AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA G 1;
			ARMA G 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesFire3:
			ARMA H 1 Bright AkOffsetD(1.0, 33.0);
			ARMA I 1      { AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA J 1      { AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA J 1      { AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA J 1;
			ARMA J 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesFire4:
			ARMA K 1 Bright AkOffsetD(1.0, 33.0);
			ARMA L 1	{	AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA M 1	{	AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA M 1	{	AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA M 1;
			ARMA M 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesFire5:
			ARMA N 1 Bright AkOffsetD(1.0, 33.0);
			ARMA O 1	{ 	AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA P 1	{	AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA P 1 	{	AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA P 1	;
			ARMA P 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;
		D4AssaultRifle.MissilesFire6:
			ARMA Q 1 Bright AkOffsetD(1.0, 33.0);
			ARMA R 1      { AkOffsetD(3.0, 35.0); A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMA F 1      { AkOffsetD(1.5, 33.5); /*A_SetPitch(pitch+0.25);*/ }
			ARMA F 1      { AkOffsetD(0.0, 32.0); /*A_SetPitch(pitch+0.25);*/ A_SetTics(CountInv("PowerD4DFS") ? 0 : 1); }
			ARMR F 1;
			ARMR F 0 AkRefire("D4AssaultRifle.MissilesFire");
			"####" "#" 0 AkWeaponReady(WRF_NOPRIMARY);
			Goto D4AssaultRifle.MissilesReady;

	//==========================================================================
	//==========================================================================
	// Chaingun
	//==========================================================================
	//==========================================================================
	D4Chaingun.Select:
		CGNS A 0 { UpdateStates(ID_D4Chaingun); }
		Goto CommonSelect;
	D4Chaingun.Ready:
		CGNS A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4RocketLauncher.Select:
		RLNI A 0 { UpdateStates(ID_D4RocketLauncher); }
		Goto CommonSelect;
	D4RocketLauncher.Ready:
		RLNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4PlasmaRifle.Select:
		PRNI A 0 { UpdateStates(ID_D4PlasmaRifle); }
		Goto CommonSelect;
	D4PlasmaRifle.Ready:
		PRNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4LightningGun.Select:
		LGNI A 0 { UpdateStates(ID_D4LightningGun); }
		Goto CommonSelect;
	D4LightningGun.Ready:
		LGNI AABBCC 1 bright { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4StaticRifle.Select:
		STRF A 0 { UpdateStates(ID_D4StaticRifle); }
		Goto CommonSelect;
	D4StaticRifle.Ready:
		STRF A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4VortexRifle.Select:
		VTXG A 0 { UpdateStates(ID_D4VortexRifle); }
		Goto CommonSelect;
	D4VortexRifle.Ready:
		VTXG A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4GaussCannon.Select:
		GCNI A 0 { UpdateStates(ID_D4GaussCannon); }
		Goto CommonSelect;
	D4GaussCannon.Ready:
		GCNI A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4CarrionCannon.Select:
		HELG A 0 { UpdateStates(ID_D4CarrionCannon); }
		Goto CommonSelect;

	D4CarrionCannon.Ready:
		HELG H 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
		
	//==========================================================================
	//==========================================================================
	// 
	//==========================================================================
	//==========================================================================
	D4BFG.Select:
		TNT1 A 1 
		{
			UpdateStates(ID_D4BFG);
			AkOffset((128,0),0,true);
		}
		WE27 A 1
		{
			int id = OverlayID();
			AkOffset((-(WeaponSwitchSpeed + 6) / 2, 0), WOF_ADD);
			if ((id == OV_LeftWeapon && invoker.LO.x >= 0) || (id == OV_RightWeapon && invoker.RO.x <= 0)) 
			{
				AkOffset((0,0));
				AkRaiseGun(512,true); // Force it immediately.
			}
			else invoker.interpolate[(id == OV_RightWeapon) ? Right : Left] = true;
		}
		Wait;
	D4BFG.Deselect:
		---- A 1
		{
			int id = OverlayID();
			if ((id == OV_LeftWeapon && invoker.LO.x < -128) || (id == OV_RightWeapon && invoker.RO.x > 128)) 
			{
				AkOffset((0,WEAPONBOTTOM),0,true);
				AkLowerGun(512,true); // Force it immediately.
				invoker.interpolate[(id == OV_RightWeapon) ? Right : Left] = true;
			}
			else 
			{
				AkOffset(((WeaponSwitchSpeed + 6) / 2, 0), WOF_ADD);
			}
		}
		Wait;
	D4BFG.Ready:
		WE27 A 1 { AkWeaponReady(WRF_NOFIRE, true); }
		Loop;
	
	D4Pistol.Deselect:
		---- A 0 { A_SetInventory("PistolAltFireCounter",0);	return ResolveState("CommonDeselect"); }
	D4Shotgun.Deselect:
	D4SuperShotgun.Deselect:
	D4Repeater.Deselect:
	D4AssaultRifle.Deselect:
	D4Chaingun.Deselect:
	D4RocketLauncher.Deselect:
	D4PlasmaRifle.Deselect:
	D4LightningGun.Deselect:
	D4StaticRifle.Deselect:
	D4VortexRifle.Deselect:
	D4GaussCannon.Deselect:
	D4CarrionCannon.Deselect:
	
	CommonDeselect:
		---- A 1 { AkLowerGun(AkimboSwitchSpeed + 6); }
		Wait;
	CommonSelect:
		---- A 1 { AkRaiseGun(AkimboSwitchSpeed + 6); }
		Wait;
	}
}

Class UpdateLeftWeapon : Inventory { }
Class UpdateRightWeapon : Inventory { }
Class LeftWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }
Class RightWeaponCount : Inventory { Default { +INVENTORY.UNDROPPABLE Inventory.MaxAmount 14; Inventory.InterhubAmount 14; +INVENTORY.UNTOSSABLE } }


Class AkimboSoundMaker : Actor 
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
}