//======================================================================================
//======================================================================================
//		Grenades
//======================================================================================
//======================================================================================

//------------------------------------------------------
// tokens to indicate that the grenade exists in the player inventory

Class D4DGrenadeItem : D4DKeeperItem 
{
	Class<D4EquipmentProjectile> Grenade;
	bool Selected;
	String IconReady, IconCooldown; 
	double SX, SY, PX, PY;
	
	Property Grenade: Grenade;
	Property Icons: IconReady, IconCooldown;
	Property Scales: SX, SY;
	Property Positions: PX, PY;
	
	Default
	{
		D4DGrenadeItem.Scales 1, 1;
	}
	
	override void DepleteOrDestroy()
	{
		Selected = false;
		Super.DepleteOrDestroy();
	}
}

Class FlameThrowerPickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FlamePoint";		D4DGrenadeItem.Icons "FlameThr", "FlameTh0";	Tag "Flame";	D4DGrenadeItem.Positions 829, 681;	}}
Class FragGrenadePickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Frag";		D4DGrenadeItem.Positions 826, 680;	}}
Class HoloGrenadePickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4PlayerHolograph";	D4DGrenadeItem.Icons "HoloGren", "HoloGre0";	Tag "Holo";		D4DGrenadeItem.Positions 827, 681;	}}
Class SyphonGrenadePickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4SyphonGrenade";	D4DGrenadeItem.Icons "SyphGren", "SyphGre0";	Tag "Syphon";	D4DGrenadeItem.Positions 827, 679;	}}
Class PersonalPortalPickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Portal";	D4DGrenadeItem.Positions 828, 682;	}}
Class TeslaRocketPickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Tesla";	D4DGrenadeItem.Positions 828, 682;	}}
Class ThreatSensorPickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Sensor";	D4DGrenadeItem.Positions 828, 682;	}}
Class ThreatScannerPickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Scanner";	D4DGrenadeItem.Positions 828, 682;	}}
Class KineticMinePickup : D4DGrenadeItem	{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Mine";		D4DGrenadeItem.Positions 828, 682;	}}
Class ShieldWallPickup : D4DGrenadeItem		{ Default { D4DGrenadeItem.Grenade "D4FragGrenade";		D4DGrenadeItem.Icons "FragGren", "FragGre0";	Tag "Wall";		D4DGrenadeItem.Positions 828, 682;	}}


//------------------------------------------------------
// Actors to be picked up in world
// Flamethrower is the only exception as the player starts
// with it always.

Class D4DUtilityWorld : CustomInventory
{
	meta Class<D4DGrenadeItem> Pickup;
	meta Name SpriteName; 
	meta int SpriteFrame;
	
	Property Pickup: Pickup;
	Property SpawnSprite: SpriteName, SpriteFrame;
	
	Default
	{
		D4DUtilityWorld.SpawnSprite "TNT1", Fr_A;
	}
	
	action void ProcessPickup()
	{
		let pick = invoker.Pickup;
		
		Class<GrenadeCharge> charge = "GrenadeCharge";
		let chargedef = GetDefaultByType(charge);
		if (CountInv(charge) < chargedef.MaxAmount)
			A_SetInventory(charge, chargedef.MaxAmount);
		
		if (!CountInv(pick))
		{			
			A_GiveInventory("GrenadeSelectedStripper",1);
			
			A_SetInventory(pick,1);
			let gren = D4DGrenadeItem(FindInventory(pick));
			if (gren)	gren.Selected = true;
		}		
	}
	
	action void SetupSprite()
	{
		if (invoker.owner)	return;
		
		int s = GetSpriteIndex(invoker.SpriteName);
		if (s)	
		{
			invoker.Sprite = s;
			invoker.Frame = invoker.SpriteFrame;
		}
	}
	
	States
	{
	Spawn:
		TNT1 A -1 NoDelay SetupSprite();
		Stop;
	Pickup:
		TNT1 A 0 ProcessPickup();
		Stop;
	}
}

Class FragGrenadeWorld : D4DUtilityWorld
{
	Default 
	{
		Inventory.PickupMessage "Frag Grenade equipment";
		D4DUtilityWorld.SpawnSprite "D4GR", Fr_E;
		D4DUtilityWorld.Pickup "FragGrenadePickup";
		Scale 0.3;
	}
}
Class SyphonGrenadeWorld : D4DUtilityWorld
{
	Default 
	{
		Inventory.PickupMessage "Syphon Grenade equipment";
		D4DUtilityWorld.SpawnSprite "D4GR", Fr_G;
		D4DUtilityWorld.Pickup "SyphonGrenadePickup";
		Scale 0.3;
	}
}
Class HoloGrenadeWorld : D4DUtilityWorld
{
	Default 
	{
		Inventory.PickupMessage "Holograph equipment";
		D4DUtilityWorld.SpawnSprite "D4GR", Fr_F;
		D4DUtilityWorld.Pickup "HoloGrenadePickup";
		Scale 0.25;
	}
}



//--------------------------------------------------------------
// Timer for the cooldown
Class GrenadeCooldown : Inventory
{
	Default 
	{
		Inventory.MaxAmount 35;
		Inventory.InterHubAmount 0;
	}
}

Class GrenadeCharge : Inventory
{
	Default
	{
		Inventory.MaxAmount 350;
		Inventory.InterHubAmount 350;
	}
}

//--------------------------------------------------------------
// To select next/prev grenade
//Next

Class GrenadeSelectedStripper : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			for (int i = 0; i < Doom4Player.GrenadeSelected.Size(); i++)
			{
				let gren = D4DGrenadeItem(FindInventory(Doom4Player.GrenadeSelected[i]));
				if (!gren)	continue;
				
				gren.Selected = false;
			}
		}
		Stop;
	}
}

Class GrenadeSwitchNext : CustomInventory
{
	bool Previous;
	Property Previous: Previous;
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	
	void PrintMessage(String text)
	{
		D4Msg.PlainMsg("smallfont", text, (657.0, 527.0), (800, 600), time: (0,0,1.0), id: 110);
	}
	
	States
	{
	Pickup:
		TNT1 A 0
		{
			// If akimbo system, don't change grenades. Switch the weapon mod instead.
			let plr = player;
			if (plr && plr.ReadyWeapon && plr.ReadyWeapon.GetClassName() == 'AkimboWeapon')
			{
				let ak = AkimboWeapon(plr.ReadyWeapon);
				if (ak)
				{
					ak.CheckMods(1);
					return true;
				}
			}
			
			// No akimbo. Okay to cycle through.
			// Grab all available equipment and assign them to a sorted list.
			Array<D4DGrenadeItem> Grenades; Grenades.Clear();
			for (int i = 0; i < Doom4Player.GrenadeSelected.Size(); i++)
			{
				let gren = D4DGrenadeItem(FindInventory(Doom4Player.GrenadeSelected[i]));
				if (gren && gren.Amount > 0)
				{
					Grenades.Push(gren);
				}
			}
			
			// Find the current selected grenade and unselect it.
			// Then select the next/previous.
			for (int i = 0; i < Grenades.Size(); i++)
			{
				if (Grenades[i].Selected)
				{
					Grenades[i].Selected = false;
					if (invoker.Previous)
					{
						i--;	if (i < 0)					i = Grenades.Size() - 1;
					}
					else
					{
						i++;	if (i >= Grenades.Size())	i = 0;
					}
					Grenades[i].Selected = true;
					invoker.PrintMessage(Grenades[i].GetTag());
					return true;
				}
			}
			// Fallback case: Only have one grenade.
			if (Grenades.Size() > 0 && Grenades[0])
			{
				Grenades[0].Selected = true;
				invoker.PrintMessage(Grenades[0].GetTag());
			}
			// No grenades.
			else invoker.PrintMessage("No grenades available");
			
			return true;
		}
		Stop;
	}
}

//Prev
Class GrenadeSwitchPrev : GrenadeSwitchNext
{
	Default 
	{
		GrenadeSwitchNext.Previous true;
		+INVENTORY.ALWAYSPICKUP
	}
}
//==============================================================================
//==============================================================================
// Actual grenades/utilities
//==============================================================================
//==============================================================================
// Base class actor
Class D4EquipmentProjectile : D4Actor {}

//==============================================================================
// Kinetic Mine
//==============================================================================
Class D4KineticMine : D4EquipmentProjectile
{
}

//==============================================================================
// Personal Teleporter
//==============================================================================

//==============================================================================
// Shield Wall
//==============================================================================

//==============================================================================
// Syphon Grenade
//==============================================================================
Class D4SyphonGrenade : D4EquipmentProjectile 
{
	MCHandler 		Event;
	Array<Actor> 	Monsters;
	int 			c, d, e, rng;
	double 			dist, UCos;
	
	Default 
	{
		Projectile;
		Speed 28;
		+ROLLSPRITE
		+ROLLCENTER
		-NOGRAVITY
		+FORCERADIUSDMG
		+CANBOUNCEWATER
		+FOILINVUL
		Gravity 0.2;
		Scale 0.09;
		Radius 5;
		Height 10;
		DeathSound "Doom4/Weapon/Grenade/SyphonExplo";
	}
	
	States
	{
	Spawn:
		D4GR C 0 Bright NoDelay { Tracer = Target; }
	Moving:
		D4GR CCCCC 1 Bright A_SetRoll(roll+10,SPF_INTERPOLATE);
		Loop;
	Death:
		TNT1 A 12 
		{
			A_Stop();
			bNOINTERACTION = true;
			//if (pos.z <= floorz + 1)	SetXYZ(pos + (0, 0, floorz + 1));
			A_SpawnItemEx("SyphonShockwaveBig",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			A_SpawnItemEx("SyphonShockwaveBigFlat",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH);
			A_PlaySound("Doom4/Weapon/Grenade/FragArm",5);
			A_PlaySound("Doom4/Weapon/Grenade/SyphonExplo",CHAN_WEAPON);
			A_AlertMonsters();
		}
		Goto Explode;
	Explode:
		TNT1 A 0
		{
			A_PlaySound("Doom4/Weapon/Grenade/SyphonSuck",((c % 3) + 5),0.5);
			d = A_RadiusGive("PinkShadowSpawner",256,RGF_MONSTERS|RGF_CUBE,1,null,"None",0,5);
		}
	ExplodeLoop:
		TNT1 A 0
		{
			let plr = PlayerPawn(target);
			if (d > 0 && plr && plr.Health > 0)
			{
				
				int MaxSyphonHP = plr.GetMaxHealth(true);
				if (Target.health < MaxSyphonHP)
				{	
					Target.A_SetHealth(Min(Target.Health + 3, MaxSyphonHP));
				}
				else 
				{
					let inv = BasicArmor(target.FindInventory("BasicArmor"));
					if (!inv)	
					{
						target.A_GiveInventory("SyphonArmor", 1);
						inv = BasicArmor(target.FindInventory("BasicArmor"));
						inv.Amount = 3;
					}
					int cap = inv.MaxAmount - (100 - target.CountInv("D4ArmorCapRaiser"));
					cap = Max(cap, ArmorGreenNormal);
					if (inv && inv.Amount < cap)
					{
						inv.Amount = min(inv.Amount + 3, cap);						
					}
				}
				d--;
				return ResolveState("ExplodeLoop");
			}
			A_Explode(2,256,0,0,256);
			return ResolveState(null);
		}
		
		TNT1 AAAAAAAAAA 0
		{
			if (random[rng](1,10) <= 4)
			{
				rng = random[rng](1,4);
				dist = frandom[rng](64.0, 128.0);
				if (GetZAt(0,0) >= pos.z - 2)
				{	UCos = frandom[rng](0.0,90.0);	}
				else
				{	UCos = frandom[rng](0.0,180.0);	}
				A_SpawnParticle("FF0033",SPF_FULLBRIGHT|SPF_RELATIVE,10,0.1,random[rng](0,359),
				
				cos(-UCos) * dist,0,sin(UCos) * dist, 
				0,0,0, 
				cos(UCos) * -1.20,0,sin(UCos) * -1.20,1.0,0.0,3.0);
			}
		}
		TNT1 A 8
		{
			c++;
			if (c >= 10)
			{	Destroy(); return;	}
		}
		Goto Explode;
	}
}

Class SyphonDestroyer : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			A_Remove(DefPtr,RMVF_EVERYTHING,"D4SyphonGrenade");
		}
		Stop;
	}
}

Class SyphonHealth : HealthBonus
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Inventory.Amount 1;
		Inventory.MaxAmount 200;
	}
}

Class SyphonArmor : BasicArmorBonus
{
	Default 
	{
		+INVENTORY.IGNORESKILL
		+INVENTORY.ALWAYSPICKUP
		Armor.SavePercent 100;
		Armor.SaveAmount 1;
		Armor.MaxSaveAmount 200;
	}
}

Class SyphonShockwaveBig : D4DFX 
{
	const RollAmount = 8.0;
	const ScaleMul = 2.0;
	double c;
	double URoll;
	double dist;
	double UCos;
	int UFloor;
	int t;
	int rng;
	
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+ROLLSPRITE
		+ROLLCENTER
		RenderStyle "Add";
		Alpha 0;
		Scale 0;
		Translation "0:255=%[0,0,0]:[1.0,0.0,0.2]";
	}
	
	States
	{
	Spawn:
		X060 A 0 NoDelay
		{
			URoll = RollAmount * randompick(-1,1);
		}
	Looping:
		X060 A 1
		{
			if (c >= 90)
			{	return ResolveState("SpawnRing");	}
			c += (90/12);
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			A_FadeTo(0.99,(1.0/12.0),FTF_CLAMP);
			A_SetScale(sin(c) * ScaleMul);
			return ResolveState(null);
		}
		Loop;
	SpawnRing:
		"####" "#" 0
		{
			if ((t < 80) && ((t % 4) == 0))
			{	A_SpawnItemEx("SyphonShrinkRing",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_ORIGINATOR|SXF_TRANSFERPITCH|SXF_TRANSFERROLL|SXF_NOCHECKPOSITION|SXF_TRANSFERSCALE|SXF_TRANSFERTRANSLATION);	}
		}
	Shrink:
		"####" "#" 1
		{	
			if (t < 80)
			{	t++;	}
			else
			{
				c += (90.0/12.0);
				A_SetScale(sin(c) * ScaleMul);
				if (Scale.X <= 0)	{	return ResolveState("Null");	}
			}
			
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			return ResolveState(null);
		}
		Goto SpawnRing;
	}
}

//Everything handled with the FLATSPRITE flag check.
Class SyphonShockwaveBigFlat : SyphonShockwaveBig
{	Default { +FLATSPRITE		}}

Class SyphonShrinkRing : D4DFX 
{
	double UScale;
	double t;
	
	Default 
	{
		+ROLLCENTER
		+ROLLSPRITE
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Add";
		Alpha 0;
	}
	States
	{
	Spawn:
		X060 B 0 NoDelay
		{
			if (master)
			{	bFlatSprite = master.bFlatSprite;	}
			t = 90;
			UScale = Scale.X;
		}
	Looping:
		X060 B 1
		{
			t -= (90.0/10.0);
			A_SetScale(sin(t) * UScale);
			A_FadeIn(0.1,FTF_CLAMP);
			if (Scale.X <= 0)	{ return ResolveState("Null"); }
			return ResolveState(null);
		}
		Loop;
	}
}

//Class SyphonShrinkRingFlat : SyphonShrinkRing
//{	+FLATSPRITE		}

Class PinkShadowSpawner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_SpawnItemEx("PinkShadow",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
		Stop;
	}
}

Class PinkShadow : D4DFX 
{
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Stencil";
		StencilColor "Pink";
		Alpha 0.99 ;
	}
	
	States
	{
	Spawn:
		"----" A 1 A_FadeOut(0.12);
		Wait;
	}
}



//======================================================================================
//	Frag grenade
//======================================================================================
Class D4FragGrenade : D4EquipmentProjectile 
{
	int timer;
	int armed;
	Default 
	{
		Projectile;
		Speed 25;
		BounceType "Doom";
		BounceFactor 0.1;
		WallBounceFactor 0.1;
		-NOGRAVITY
		+FORCERADIUSDMG
		+ROLLSPRITE
		+CANBOUNCEWATER
		+EXTREMEDEATH
		Scale 0.06;
		Gravity 0.4;
		Radius 5;
		Height 10;
		ReactionTime 10;	//~1.4 secs to explode
		BounceSound "Doom4/Weapon/Grenade/FragBounce";
	}
	States
	{
	Spawn:
		D4GR D 1 NODELAY 
		{
			A_SetRoll(roll+16,SPF_INTERPOLATE);
			A_SpawnItemEx("GrenadeSmoke",0,0,0,0,0,frandom(0.2,0.7),0,SXF_NOCHECKPOSITION);

			if (timer==75 && armed==0) //if 50 tics passed, plays the arm sound
			{
				A_PlaySound("Doom4/Weapon/Grenade/FragArm",6);
				armed = 1;	//and marks the grenade as "armed"
			}
			if (timer>=100)
			{
				return ResolveState("Explode");
			}
			timer++;
			return ResolveState(null);
		}
		Loop;
	XDeath:
		D4GR D 0;
		Goto Explode;
		
	// THERE IS SUCH A THING AS TOO MANY COMMENTS. 
	Death:
		D4GR D 1
		{
			A_PlaySound("Doom4/Weapon/Grenade/FragBounce",5);
			timer = 0;
			if (A_CheckFloor("Null"))	//if it hits the floor
			{
				return ResolveState("ArmOnFloor");	//arms the grenade
			}
			
			//otherwise
			if (timer == 25 && armed == 0) //if 25 tics passed, plays the arm sound
			{
				A_PlaySound("Doom4/Weapon/Grenade/FragArm",6);
				armed = 1;	//and marks the grenade as "armed"
			}
			if (timer >= 50)
			{
				return ResolveState("Explode");
			}
			timer++;
			return ResolveState(null);
		} 
		Wait;
	ArmOnFloor:
		D4GR D 1 
		{
			A_PlaySound("Doom4/Weapon/Grenade/FragBounce",5);
			if (!armed) //if it hadnt played the sound before
			{
				A_PlaySound("Doom4/Weapon/Grenade/FragArm",6);
				armed = 1;
			}
			if (timer >= 25)
			{
				return ResolveState("Explode");
			}
			timer++;
			return ResolveState(null);
		}
		Wait;
	Explode:
		TNT1 A 0 
		{
			A_PlaySound("Doom4/Weapon/RocketLauncher/HRExplo",6);
			A_AlertMonsters();
			if (CountInv("ProtectionBonus2", TargetPtr))
			{			
				A_Explode(32,128);
				A_Explode(224,192,0,0,96);
			}
			else
			{			
				A_Explode(64,128);	
				A_Explode(192,192,0,0,96);
			}
			A_RadiusThrust(64,128,RTF_THRUSTZ|RTF_AFFECTSOURCE|RTF_NOIMPACTDAMAGE);
			A_RadiusThrust(192,192,RTF_THRUSTZ|RTF_NOIMPACTDAMAGE,96);
			
			if (HQEffectsWeapons)
			{
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("D4RocketExplosionSmoke",0,0,0,frandom(0.5,1.5),frandom(0.5,1.5),frandom(0.5,1.5),random(0,359),SXF_NOCHECKPOSITION);
				A_SpawnItemEx("GenericExplosionParticleSpawner",0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			}
		}
		TNT1 A 50
		{
			A_SpawnItemEx("D4RocketExplosion",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
			if (D4D_quakexplosions)
			{
				A_QuakeEx(2,2,2,15,0,768,"",QF_SCALEDOWN,0,0,0,1);
			}
			bNOINTERACTION = true;
		}
		Stop;
	}
}
Class GrenadeSmoke : D4DFX 
{
	double add;
	
	Default 
	{
		+ROLLSPRITE
		+CLIENTSIDEONLY
		+NOINTERACTION
		+FORCEXYBILLBOARD
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.1;
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			add = frandom(-3.0,3.0);
			A_SetRoll(random(0,359));
			return A_Jump(256,random(1,18));
		}
		X102 ABCDEFGHIJKLMNOPQRSTUV 0 { return ResolveState("Act"); }
	Act:
		"####" "#" 1
		{
			A_SetRoll(roll + add, SPF_INTERPOLATE);
			A_FadeOut(0.015);
			//A_ScaleVelocity(0.986);
			A_SetScale(Scale.X+0.01);
		}
		Loop;
	}
}
//==============================================================================
//	Player holograph
//==============================================================================
Class D4PlayerHolograph : D4EquipmentProjectile 
{
	int countdowntimer;
	MCHandler Event;
	Array<Actor> Missiles, Monsters;
	Default 
	{
		Monster;
		Radius 20;
		Height 56;
		Health 300;
		+DONTTHRUST
		+FRIENDLY
		+FORCERADIUSDMG
		+FOILINVUL
		-COUNTKILL
		+OLDRADIUSDMG
		+PAINLESS
		+CAUSEPAIN
		+BLOODLESSIMPACT
		+NODAMAGE
		+INVULNERABLE
		+LOOKALLAROUND
		+NOPAIN
		+NODAMAGETHRUST
		+NOBLOOD
		+NONSHOOTABLE
		+THRUACTORS
		DamageType "HoloAttract";
		DamageFactor 0;
	}
	
	void DrawAttention(bool justmissiles = false)
	{
		if (!Event)	Event = MCHandler.Fetch();
		if (!Event)	return;
		if (!justmissiles)
		{
			//Monsters.Copy(Event.Monsters.Actors);
			for (int i = 0; i < Event.Monsters.Size(); i++)
			{
				Actor mo = Event.Monsters.Actors[i];
				// Skip players, the dead, friendly and infighting monsters.
				if (!mo || mo.bFRIENDLY || mo.health < 1 || mo.player ||
					(mo.target && !mo.target.player) ||
					!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
					continue;
				
				if (!mo.LastHeard)
				{
					if (master)	mo.LastHeard = master;
					else		mo.LastHeard = self;
				}
				mo.target = self;
				mo.Threshold = mo.DefThreshold;
			}
		}
		//Missiles.Copy(Event.Missiles.Actors);
		
		// Redirect seeking missiles to this guy instead, if they're in sight.
		for (int i = 0; i < Event.Missiles.Size(); i++)
		{
			Actor mo = Event.Missiles.Actors[i];
			if (!mo || !CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
				continue;
			
			if (mo.tracer == master)
				mo.tracer = self;
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		return (flags & DMG_FORCED) ? Super.DamageMobj(inflictor, source, damage, mod, flags, angle) : 0;
	}
	
	States
	{
	Spawn:
		PLAZ E 0 NoDelay 
		{
			A_PlaySound("Doom4/HoloSpawn",CHAN_AUTO);
			A_SetAngle(random(0,359));
		}
	Idle:
		PLAZ E 2 
		{
			DrawAttention(true);
			A_ClearTarget();
			A_LookEx(0,0,0,0,360,"TickTock");
			countdowntimer += 2;
			return A_Jumpif (countdowntimer >= (35*6),"Death");
		}
		Loop;
	TickTock:
		PLAZ E 0 A_PlaySound("Doom4/Weapon/PlasmaGun/PlasmaLoop",5,1,true);
	TickTockLoop:
		PLAZ F 1 bright 
		{
			if (countdowntimer++ >= (35*6))
			{	return ResolveState("Death");	}
			//A_Explode(1,10280,XF_NOTMISSILE,0,10280); //Constantly draw their attention.
			DrawAttention();
			A_FaceTarget();
			A_SpawnProjectile("NewPlasmaBallNoDamage");
			if (!target || target.health < 1)
			{	
				A_Chase(null,null,CHF_DONTMOVE);
				if (!target || target.health < 1)
				{	
					A_PlaySound("Doom4/Weapon/PlasmaGun/Fire",5,1);
					return ResolveState("Idle");	
				}
			}
			return ResolveState(null);
		}
		PLAZ EE 1
		{
			if (countdowntimer++ >= (35*6))
			{	return ResolveState("Death");	}
			
			if (!target || target.health < 1)
			{	
				A_Chase(null,null,CHF_DONTMOVE);
				if (!target || target.health < 1)
				{	
					A_PlaySound("Doom4/Weapon/PlasmaGun/Fire",5,1);
					return ResolveState("Idle");	
				}
			}
			return ResolveState(null);
		}
		Loop;
	SoundStop:
		PLAZ "#" 0
		{
			A_PlaySound("Doom4/Weapon/PlasmaGun/Fire",5,1);
			return ResolveState("Idle");
		}
		Goto Idle;
	Death:
		PLAZ E 1 A_FadeOut();
		Wait;
	}
}

Class NewPlasmaBallNoDamage : Actor 
{
	Default 
	{
		Projectile;
		Scale 0.07;
		Height 8;
		Radius 4;
		Speed 30;
		Damage 0;
		RenderStyle "Add";
		Alpha 0.99;
		+FORCEXYBILLBOARD
		Translation "0:255=%[0,0,0]:[0.7,0.9,1.5]";
		DamageType "HoloAttract";
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			A_SetScale(frandom(0.04,0.06));
			return A_Jump(256,random(1,26));
		}
	Moving:
		PLS1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 Light("BlueSmallPoint1") Bright;
		PLS2 ABCDEF 1 Light("BlueSmallPoint1") Bright;
		Loop;
	Death:
		TNT1 A 10 A_SpawnItemEx("D4PistolPuffBig1",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		Stop;
	}
}

//==============================================================================
//	Flame Belch
//==============================================================================

Class CarrionFlameFastSmall : CarrionFlameFast
{
	Default
	{
		Scale 0.1;
	}
}

Class D4FlamePoint : D4EquipmentProjectile
{
	const FlameCone = cos(20);
	const IgniteRange = 256.0;
	const IgniteRangeSq = IgniteRange ** 2.0;
	MCHandler Event;
	int count;
	D4DIgniteTrace tr;
	Default
	{
		Projectile;
		+NOINTERACTION
		+INVISIBLE
		+NOTIMEFREEZE
		Radius 1;
		Height 1;
	}
	
	private void IgniteMobj(Actor mo)
	{
		let def = GetDefaultByType('D4FlameTimer');
		mo.SetInventory('D4FlameTimer', def.MaxAmount);
			
		let inv = D4FlameTimer(mo.FindInventory('D4FlameTimer'));
		if (inv)
		{
			inv.Damager = target;
		}
	}
	
	States
	{
	Spawn:
		TNT1 A 1
		{
			// Backup measure. Player dead or time's up.
			if (!target || !target.player || target.health < 1 || ++count > 16)
			{	Destroy(); return;	}
			
			// First tic, annoy monsters.
			if (count == 1)
			{
				A_PlaySound("CarrionCannon/BurnEnd", CHAN_AUTO);
				A_AlertMonsters();
			}
			
			// Perform delimited offsetting. This code makes the flame belcher
			// stay with the shoulder cannon.
			Vector3 x, y, z, origin;
			[x, y, z] = MC_CoordUtil.GetAxes(target.pitch,target.angle,target.roll);
			origin = target.Vec2OffsetZ(0,0,target.player.viewz) + -1.0 * x + -15.0 * y + 5.0 * z;
			SetOrigin(origin, true);
			
			angle = target.angle;
			pitch = target.pitch;
			Vector2 orig = (angle, pitch);
			
			// Flaming dopefish belch. Tartarus sauce is spiciest, hands down.
			int i = 0;
			int count = random(4,8);
			for (; i < count; i++)
			{
				double p = frandom(-10.0, 10.0);
				A_SpawnItemEx("CarrionFlameFastSmall", 0, 0, 0, cos(pitch + p) * 10.0, 0, -sin(pitch + p) * 10.0, frandom(-10.0, 10.0), SXF_NOCHECKPOSITION);
			}
			
			// Actual ignition code. Once every 4 tics, set fire to any monster
			// in the way of the flames.
			if (count % 4 == 0)
			{
				if (!Event)	Event = MCHandler.Fetch();
				for (int i = 0; i < Event.Monsters.Size(); i++)
				{
					// Root out all those that don't apply, such as dead and beyond
					// sight/range of the jet.
					Actor mo = Event.Monsters.Actors[i];
					if (!mo || mo.health < 1 || Distance3DSquared(mo) > IgniteRangeSq ||
						!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						continue;
				
					// Visible to the flames, so turn towards it within a cone.
					angle = orig.x;
					pitch = orig.y;
					TurnAng(mo, 10.0); // Delimited turning.
					
					// Set up a tracer to nab the hitbox. 
					if (!tr)	tr = new("D4DIgniteTrace");
					tr.Owner =	target;
					tr.Wanted =	mo;
					Vector3 viewVector = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
					
					// Lastly, see if it's viably within a cone via hitbox.
					if (tr.Trace(pos, CurSector, viewVector, IgniteRange, 0) && tr.Results.HitType == TRACE_HitActor)
					{
						// Time for the pink slip.
						Actor res = tr.Results.HitActor;
						if (res) IgniteMobj(res);
					}
				}
			}
			
			/*
			if (count % 4 < 1)
			{
				if (!Event)	Event = MCHandler.Fetch();
				for (int i = 0; i < Event.Monsters.Size(); i++)
				{
					Actor mo = Event.Monsters.Actors[i];
					if (!mo || mo.health < 1 || Distance3DSquared(mo) > IgniteRangeSq ||
						!CheckSight(mo, SF_IGNOREVISIBILITY|SF_IGNOREWATERBOUNDARY))
						continue;
				
					Vector3 forw = ( cos(angle) * cos(pitch), sin(angle) * cos(pitch), -sin(pitch) );
					Vector3 offs = pos; //Vec2OffsetZ(0, 0, player.viewz);		// Account for the view height
					Vector3 epos = mo.pos + (0, 0, mo.height * 0.5);
					Vector3 diff = level.Vec3Diff(offs, epos);	// Internally does v2 - v1.
					double cone = (forw dot diff) / diff.length();
					if (cone > FlameCone)
					{
						IgniteMobj(mo);
					}
				}
			}
			*/
		}
		Wait;
	}
}

Class D4FlameTimer : Inventory 
{
	const DamageInterval = 17;
	int tic, _damage;
	Actor Damager;
	
	Default 
	{ 
		Inventory.MaxAmount 175; 
	}
	
	override void DoEffect()
	{
		Super.DoEffect();
		if (bDESTROYED)	return;
		if (Amount > MaxAmount)	Amount = MaxAmount;
		if (!Owner || !Damager || --Amount < 1)	{ Destroy(); return; }
		
		// Damage every so often
		if (Owner.Health > 0 && --tic < 1)
		{
			tic = DamageInterval;
			_damage += Max(0, Owner.DamageMobj(self, Damager, 5, 'Normal', DMG_THRUSTLESS|DMG_NO_PAIN));
		}
		
		// Spawn armor shards
		if (_damage > 0 && Owner)
		{
			let chip = D4PinataArmor(Owner.Spawn('D4PinataArmor', Owner.Pos + (0, 0, Owner.Height * frandom(0.25, 0.75)), ALLOW_REPLACE));
			if (chip)
			{
				chip.bTHRUACTORS = true;
				double dmg = double(_damage * 0.01);
				chip.SaveAmount = Clamp(int(dmg), 1, 100);
				chip.bTHRUACTORS = false;
				chip.VelFromAngle(frandom[a](3,6),random[a](0,359));
				chip.vel.Z += frandom[a](1,5);
				chip.A_FaceMovementDirection(0,0);
			}
			_damage = 0;
		}
		
		// Spawn flames
		int rng = random(1,4);
		for (int i = 0; i < rng; i++)
		{
			Actor a; bool b;
			[b, a] = Owner.A_SpawnItemEx("CarrionFlameFast", 
				frandom(0.0, Owner.Radius), 0, frandom(1.0, Owner.Height),
				frandom(1.0, 2.0), 0, frandom(0.0, 1.0), random(0,359), SXF_NOCHECKPOSITION);
				
			if (a && b)
				a.Scale *= 0.35;
		}
	}
}

class D4DIgniteTrace : LineTracer play
{
    Actor Owner;
	Actor Wanted;
    
    override ETraceStatus TraceCallback() 
	{
		if (!Wanted)	return TRACE_Abort;
        if (Results.HitType == TRACE_HitActor)
		{
			Actor mo = Results.HitActor;
			if (mo != Wanted || mo == Owner)	return TRACE_Skip;
		}
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			Line ln = Results.Hitline;
			if (!Results.HitTexture && !(ln.Flags & (Line.ML_BlockHitscan)))
				return TRACE_Skip;
		}
		return TRACE_Stop;
    }
}

