const LGDmgMin = 3;
const LGDmgMax = 6;
const LGDmgMinUpgrade = 6;
const LGDmgMaxUpgrade = 10;

const LGChainDmgMin = 2;
const LGChainDmgMax = 5;
const LGChainDmgMinUpgrade = 4;
const LGChainDmgMaxUpgrade = 8;

const AltTrailLength = 256; //Indicates how far a beam can zap others with secondary.
const SHeight = -12;
const FBFlags = FBF_USEAMMO|FBF_PUFFTRACER|FBF_NORANDOMPUFFZ;
const FBFlagsNoAmmo = FBF_PUFFTRACER|FBF_NORANDOMPUFFZ;


Class D4LightningGun : Doom4Weapon
{
	Default 
	{
		+FLOORCLIP
		+DONTGIB
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.IGNORESKILL
		Scale 0.6;
		Weapon.AmmoType1 "D4Cells";
		Weapon.AmmoType2 "D4Cells";
		Weapon.AmmoGive1 40;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		
		Obituary "%o was left thunder struck by %k's lightning gun.";
		Inventory.PickupMessage "Lightning gun! The firepower is shocking!";
		Tag "Lightning Gun";
		Decal "D4LGDecal";
		Weapon.SelectionOrder 60;
		//Decal "Q4LGDecal"	//removed because when you are firing this weapon and turn too fast, it looks innacurate
	}
	States
	{
	Spawn:
		WPPK N -1;
		Wait;
	//-------------------------------------------------------
	// Deselect sequence
	//-------------------------------------------------------
	Deselect:
		LGNI A 0 
		{
			A_TakeInventory("AltFireToken",32767);
			ACS_NamedExecute("RemoveModText",0,0,0,0);
			A_StopSound(5);
		}
		LGNI A 1 A_Lower;
		LGNI A 0 A_Lower(WeaponSwitchSpeed);
		Goto Deselect+1;
	//-------------------------------------------------------
	// Select sequence
	//-------------------------------------------------------
	Select: 
		LGNI A 0 
		{
			ACS_NamedExecute("RemoveModText",0,0,0,0);
		}
		LGNI A 1 A_Raise;
		LGNI A 0 A_Raise(WeaponSwitchSpeed);
		Goto Select+1;
	//-------------------------------------------------------
	// Ready sequence
	//-------------------------------------------------------
	Ready:
		LGNI A 0 
		{
			A_SetInventory("AltFireToken",0);
			if (CountInv("LGUpgradeAltFire"))
			{ return ResolveState("ReadyWithAltFire"); }
			else
			{ return ResolveState("ReadyNoAltFire"); }
		}
	ReadyWithAltFire:
		LGNI AABBCC 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2);
		Goto Ready;
	ReadyNoAltFire:
		LGNI AABBCC 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER2|WRF_NOSECONDARY);
		Goto Ready;
		
	//===========================================================================	
	// Primary fire
	Fire:
		TNT1 A 0 
		{
			A_PlaySound("Doom4/Weapon/LightningGun/LightningGunFire", CHAN_WEAPON, 1, 1);
			A_PlaySound("Doom4/Weapon/LightningGun/LG2Loop", 5, 0.5, 1);
		}
		
	HoldPt1:
		LGNF B 1 Bright 
		{ 
			A_WeaponOffset(frandom(1.0,2.0),frandom(33.0,34.0));
			A_GunFlash("Null");
			int dmg = CountInv("LGUpgradeDamage") ? random(LGDmgMinUpgrade,LGDmgMaxUpgrade) : random(LGDmgMin,LGDmgMax);
			int Flags = ((CountInv("LGUpgradeAmmo") && random(1,3)==1) ? FBFlagsNoAmmo : FBFlags);
			int Dist = CountInv("LGUpgradeRange") ? 1024 : 768;
			A_FireBullets(0,0,1,dmg,"LightningPuffV2",Flags,Dist,"LightningBeamPrimarySpawner",SHeight,2);
			if (CountInv("PowerD4DFS"))
				A_FireBullets(0,0,1,dmg,"LightningPuffV2",Flags,Dist,"LightningBeamPrimarySpawner",SHeight,2);
		}
		//the second frame never uses ammo anyway, so no need to add those checks
		LGNF C 1 Bright 
		{ 
			A_GunFlash("Null");
			A_WeaponOffset(frandom(1.2,2.2),frandom(33.2,34.2)); 
			int dmg = CountInv("LGUpgradeDamage") ? random(LGDmgMinUpgrade,LGDmgMaxUpgrade) : random(LGDmgMin,LGDmgMax);
			int Flags = FBFlagsNoAmmo; 
			int Dist = CountInv("LGUpgradeRange") ? 1024 : 768;
			A_FireBullets(0,0,1,dmg,"LightningPuffV2",Flags,Dist,"LightningBeamPrimarySpawner",SHeight,2);
			if (CountInv("PowerD4DFS"))
				A_FireBullets(0,0,1,dmg,"LightningPuffV2",Flags,Dist,"LightningBeamPrimarySpawner",SHeight,2);
			
		}

		LGNF A 2 A_ReFire("HoldPt1");
		Goto EndHold;
	EndHold:
		LGNI A 1 
		{
			A_PlaySound("Doom4/Weapon/LightningGun/LightningGunEnd", CHAN_WEAPON);
			A_StopSound(5);
		}
		Goto Ready;		
	Flash:
		TNT1 A 0 A_SetBlend("LightBlue1",0.1,3);
		ZZZZ C 1 A_Light2();
		ZZZZ C 0 A_Light0();
		Stop;
		
	//===========================================================================	
	// Alt Fire
	AltFire:
		LGNG A 3 A_PlaySound("Doom4/Weapon/LightningGun/LightningGunFire", CHAN_WEAPON, 1, 1);
		LGNG B 3 A_GiveInventory("AltFireToken",1);
		Goto AltHold;
		
	AltHold:
		LGNG CD 1 Bright 
		{
			A_GunFlash("Null");
			A_WeaponOffset(frandom(1,3),frandom(33,35)); 
			
			int dmg = CountInv("LGUpgradeDamage") ? random(LGDmgMinUpgrade,LGDmgMaxUpgrade) : random(LGDmgMin,LGDmgMax);
			int Flags = FBFlagsNoAmmo; 
			int Dist = CountInv("LGUpgradeRange") ? 1024 : 768;
			
			A_FireBullets(0,0,1,dmg,"LightningPuffV3",Flags,Dist,"LightningBeamSecondarySpawner",SHeight,2);
			if (CountInv("PowerD4DFS"))
				A_FireBullets(0,0,1,dmg,"LightningPuffV3",Flags,Dist,"LightningBeamSecondarySpawner",SHeight,2);
			
		}
		LGNG B 1 A_ReFire("AltHold");	
		Goto AltEndHold;
	AltEndHold:
		LGNI A 0 
		{
			A_PlaySound("Doom4/Weapon/LightningGun/LightningGunEnd", CHAN_WEAPON);
			A_StopSound(5);
		}
		LGNG B 3;
		LGNG A 3 A_TakeInventory("AltFireToken",32767);
		Goto Ready;	
	}
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
Class LightningPuffV2 : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+NOTONAUTOMAP
		+ALWAYSPUFF
		+PUFFGETSOWNER
		+PUFFONACTORS
		+SKYEXPLODE
		+EXTREMEDEATH
		+DONTSPLASH
		Radius 1;
		Height 1;
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 2;
		Stop;
	}
}

Class LightningPuffV2NoPain : LightningPuffV2	{ Default { +PAINLESS }}

Class LightningPuffV3 : LightningPuffV2
{
	Default 
	{
		+HITTRACER
	}
	States
	{
	Spawn:
		TNT1 A 2 NoDelay
		{
			/*if (!IsPointerEqual(TracerPtr,NullPtr))
			{	A_RadiusGive("LightningGunBolter",AltTrailLength,RGF_MONSTERS|RGF_NOTRACER|RGF_NOTARGET,1,null,"None",0,4);	}*/
			//A_RadiusGive("LightningGunBolter",AltTrailLength,RGF_MONSTERS|RGF_NOTRACER|RGF_NOTARGET,1,null,"None",0,4);
		}
		Stop;
	}
}

Class LightningGunBolter : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (health < 1 || !bSHOOTABLE || CheckClass("DemonShield") ||  CheckClass("PlayerPawn",DefPtr,true))
			{	return false;	}
			A_SpawnItemEx("LightningBeamV3",0,0,height/2,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTRACER,0,1);
			return true;
		}
		Stop;
	}
}



/*
Class LGEmitter : Actor 
{
	const Flags = WARPF_NOCHECKPOSITION|WARPF_COPYPITCH;
	const Distance = 17;
	const YOff = 4;
	const ZOff = 38;
	double  pos;
	int t;
	Projectile;
	+NOINTERACTION
	RenderStyle "Add";
	Scale 0.10
	States
	{
	Spawn:
		PLAY A 1 NoDelay
		{
			A_Warp(MasterPtr,pos.x,pos.y,pos.z,0,Flags|WARPF_ABSOLUTEPOSITION); //Grab the pitch...
			pos = (-sin(pitch) * 3);
			A_Warp(MasterPtr,
				(cos(pitch)*(Distance)) - pos,
				YOff,
				(ZOff*GetCrouchFactor(MasterPtr))+(sin(-pitch)*(Distance)),0,Flags|WARPF_INTERPOLATE);	
		}
		Loop;
	}
}

Class LGPuff : Actor 
{
	const Limit = 12.0;
	const FMin = 0.5;
	const FMax = 1.0;
	double xa, xb, xc;
	double ya, yb, yc;
	double za, zb, zc;
	double  dist;
	double  anga, angb, angc;
	int life;
	int count;
	int minicount;
	double  narrow;
	Projectile;
	//+HITTRACER
	+CLIENTSIDEONLY
	+NOINTERACTION
	+ALWAYSPUFF
	+PUFFONACTORS
	+PUFFGETSOWNER
	+FORCEXYBILLBOARD
	+BRIGHT
	Radius 10
	Scale 0.35
	RenderStyle "Add";
	Obituary "%o was electrocuted by %k's lightning gun."
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)
		DB08 ABCDEFGHIJLKMNOPQRSTUVWXYZ 0 BRIGHT A_JumpIf(1 == 1,"Play")
	Play:
		"####" "#" 1 bright 
		{
			if (!A_CheckProximity("Null","LGEmitter",2048,1,CPXF_SETTRACER))
			{	return ResolveState("PlayNormal"); }
			narrow = 1.0;
			xc = pos.x;
			yc = pos.y;
			zc = pos.z;
			A_FaceTracer(0,0,0,0,FAF_MIDDLE);
			anga = angle;
			return ResolveState(null);
		}
		"####" "#" 1 bright
		{
			if (!IsPointerEqual(TracerPtr,NullPtr))
			{	
				angb = -GetAngle(true, TracerPtr));
				A_FaceTracer(0,0,0,0,FAF_MIDDLE);
				A_SetAngle(angle + angb);
				return ResolveState("Beam");	
			}
			A_Logfalse;
			return ResolveState(null);
		}
		Stop;
	Beam:
		"####" "#" 0
		{
			if (minicount <= 0)
			{
				
				xb = frandom(FMin,FMax) * randompick(-1,1);
				yb = frandom(FMin,FMax) * randompick(-1,1);
				zb = frandom(FMin,FMax) * randompick(-1,1);
				minicount = random(2,4);
			}
			else
			{
				
				xa += xb;
				ya += yb;
				za += zb;
				minicount--;
			}
			if (GetAngle(true,TracerPtr) > 0)
			{
				A_Warp(DefPtr,cos(pitch)*5,ya,-sin(pitch)*5,0,WARPF_NOCHECKPOSITION);
				A_FaceTracer(1,1,0,0,FAF_MIDDLE);
				A_SpawnParticle("2222FF",SPF_FULLBRIGHT|SPF_RELATIVE,2,8,0,(cos(pitch)*5),ya,(-sin(pitch)*5),0,0,0,0,0,0,1.0,0.5);
				return ResolveState("Beam");
			}
			dist = GetDistance(true,TracerPtr);
			return ResolveState("Beam2");
		}
	Beam2:
		"####" "#" 2 bright
		{
			
			if (count >= dist)
			{
				count = 0;
				A_RearrangePointers(DefPtr,DefPtr,NullPtr);
				A_Warp(DefPtr,xc,yc,zc,0,WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEPOSITION);
				return ResolveState(null);
			}			
			if (minicount <= 0)
			{
				
				xb = frandom(FMin,FMax) * randompick(-1,1);
				yb = frandom(FMin,FMax) * randompick(-1,1);
				zb = frandom(FMin,FMax) * randompick(-1,1);
				minicount = random(2,4);
			}
			else
			{
				xa += xb;
				ya += yb;
				za += zb;
				minicount--;
			}
			if (ya > Limit)		{	ya -= ((abs(ya) % Limit) * 2);	}
			if (za > Limit)		{	za -= ((abs(za) % Limit) * 2);	}
			if (ya < -Limit)		{	ya += ((abs(ya) % Limit) * 2);	}
			if (za < -Limit)		{	za += ((abs(za) % Limit) * 2);	}
			
			if (count >= dist - 100)
			{	narrow = Max(narrow - 0.05, 0);	}
			A_SpawnParticle("2222FF",SPF_FULLBRIGHT|SPF_RELATIVE,2,8,0,((cos(pitch)*count)+(-sin(pitch)*xa*narrow)),ya*narrow,((-sin(pitch)*count)+(cos(pitch)*za*narrow)),0,0,0,0,0,0,1.0,0.5);
			count += 5;
			return ResolveState("Beam");
		}
		Stop;
	PlayNormal:
		"####" "#" 2 bright A_Logfalse
		Stop;
	}
}*/

Class LGPuff : Actor 
{
	Default 
	{
		+CLIENTSIDEONLY
		Radius 10;
		+NOINTERACTION
		+ALWAYSPUFF
		+PUFFGETSOWNER
		Scale 0.35;
		RenderStyle "Add";
		Obituary "%o was electrocuted by %k's lightning gun.";
		//Alpha 0.6;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		//TNT1 A 0 NODELAY A_Jump(256,random(1,24));
		DB08 ABCDEFGHIJLKMNOPQRSTUVWXYZ 0 BRIGHT A_JumpIf(1 == 1,"Play");
	Play:
		"####" "##" 1 Bright;
		Stop;
	}
}

Class LGPuffNoPain : LGPuff
{
	Default 
	{
		+PAINLESS
		+BLOODLESSIMPACT
	}
}

//-----------------------------------------------------------------------
Class D4LGTrail : Actor 
{
	double dist;
	
	Default 
	{
		+NOINTERACTION
		//+NOTIMEFREEZE
		Scale 0.16;
		RenderStyle "Add";

		Translation "0:255=%[0,0,0]:[0.3,0.6,1.4]";
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			//Get the pitch. Only need to do this once.
			if (target)		{	pitch = target.pitch;	}
			dist = GetDistance(true,AAPTR_TARGET);
			
			if(GetCvar("HQEffectsWeapons"))
			{
				A_SpawnItemEx("ElectDrSpark",0,0,0,frandom(2.0,-2.0),frandom(2.0,-2.0),frandom(2.0,-2.0),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION,224);
			}
			
			return A_Jump(256,1,2,3,4,5,6,7,8);
		}
		HSP2 ABCDEFGH 0 A_Jump(256,"Play");
	Play:
		"####" "#" 1 BRIGHT
		{
			A_FadeOut(0.125);
			A_Warp(AAPTR_TARGET,cos(pitch)*dist,8+frandom(-1,1),frandom(-1,1)+32+sin(-pitch)*dist,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH|WARPF_COPYVELOCITY|WARPF_INTERPOLATE);
			
		}
		Wait;
	}
}

Class ElectDrSpark : Actor 
{
	Default 
	{
		Translation "0:255=%[0,0,0]:[0.75,0.75,2.0]";
		+NOINTERACTION
		Scale 0.08;
		RenderStyle "Add";
		+FORCEXYBILLBOARD
		Alpha 1.0;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256,1,2,3,4,5,6,7,8);
		X079 ABCDEFGH 0	{ return ResolveState("Perform"); }
	Perform:
		"####" "#" 1 Bright 
		{
			A_SetScale(Scale.X+0.0025);
			A_FadeOut(0.07);
		}
		Wait;
	}
}


//-----------------------------------------------------------------------
Class D4LGTrailAltFire : Actor 
{
	double  dist;
	int t;
	Default 
	{
		+NOINTERACTION
		+FORCEXYBILLBOARD
		//+NOTIMEFREEZE
		Scale 0.11;
		RenderStyle "Add";
		Translation "0:255=%[0,0,0]:[0.7,0.4,1.5]";
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay 
		{
			if (tid > 0)
			{	t = tid; Thing_ChangeTID(0,0);	}
			//Get the pitch. Only need to do this once.
			
			if (t == 0)
			{
				if (target) { pitch = target.pitch; }
				dist = GetDistance(true,AAPTR_TARGET);
			}
			
			if(GetCvar("HQEffectsWeapons")) 
			{
				A_SpawnItemEx("ElectDrSpark",0,0,0,frandom(2.0,-2.0),frandom(2.0,-2.0),frandom(2.0,-2.0),0,SXF_NOCHECKPOSITION|SXF_TRANSFERTRANSLATION);	
			}
			
			return A_Jump(256,1,2,3,4,5,6,7,8);
		}
		HSP2 ABCDEFGH 0 A_Jump(256,"Play");
	Play:
		"####" "#" 1 BRIGHT
		{
			A_FadeOut(0.125);
			//This gathers the new pitch every other time.
			if (t == 0)	{ A_Warp(AAPTR_TARGET,cos(pitch)*dist,8+frandom(-1,1),frandom(-1,1)+32+sin(-pitch)*dist,0,WARPF_NOCHECKPOSITION|WARPF_COPYPITCH|WARPF_COPYVELOCITY|WARPF_INTERPOLATE); }
		}
		Wait;
	}
}

Class LGAltPuff : Actor 
{
	const SpawnDistance = 10;
	int c;
	int count;
	double  distance;
	Default 
	{
		Projectile;
		+HITTRACER
		+CLIENTSIDEONLY
		+NOINTERACTION
		+ALWAYSPUFF
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		+BRIGHT
		Radius 10;
		Scale 0.35;
		RenderStyle "Add";
		Obituary "%o was electrocuted by %k's lightning gun.";
		Translation "0:255=%[0,0,0]:[0.7,0.4,1.5]";
		//Alpha 0.6;
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY 
		{
			A_RearrangePointers(DefPtr,TargetPtr,DefPtr,4);
			return A_Jump(256,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24);
		}
		DB08 ABCDEFGHIJLKMNOPQRSTUVWXYZ 0 BRIGHT { return ResolveState("Play"); }
	Play:
		"####" "#" 1 Bright
		{
			if (tracer && tracer.bShootable)
			{
				A_GiveInventory("ChainToken",1,TracerPtr);
				return ResolveState("Looping");
			}
			return ResolveState(null);
		}
		"####" "#" 1 Bright;
		Stop;
	Looping:
		"####" "#" 1 bright
		{
			if (A_RadiusGive("ChainChecker",384,RGF_MONSTERS|RGF_NOTRACER,1,null,"",0,1))
			{
				if (A_CheckProximity("Null","LightningChainTargeter",768,1,CPXF_SETTRACER|CPXF_CLOSEST))
				{
					//A_RadiusGive("ChainRemover",1024,RGF_MISSILES|RGF_NOTRACER,1,"LightningChainTargeter");
					A_TransferPointer(DefPtr,TracerPtr,MasterPtr,MasterPtr,4);
					A_FaceTracer(0,0,0,0,FAF_BOTTOM);
					distance = GetDistance(true,TracerPtr);
					return ResolveState("MiniLoop");
				}
			}
			if (count > 0)
			{	A_RadiusGive("ChainClearer",4096,RGF_MONSTERS,1);	}
			return ResolveState(null);
		}
		Stop;
	MiniLoop:
		"####" "#" 0
		{
			A_SpawnItemEx("D4LGTrailAltFire",cos(pitch)*c,0,-sin(pitch)*c,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH,0,1);
			c = c + 10;
			if (c >= distance)
			{
				A_Warp(TracerPtr,0,0,0,0,WARPF_NOCHECKPOSITION);
				A_GiveInventory("ChainDamager",1,TracerPtr);
				c = 0;
				count++;
				if (count > 2)	
				{
					A_RadiusGive("ChainClearer",4096,RGF_MONSTERS|RGF_OBJECTS,1);
					return ResolveState("Null"); 
				}
				
			}
			return ResolveState("Looping");
		}
		Goto Looping;
	}
}

Class ChainChecker : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CountInv("ChainToken") || !tracer || tracer.bKilled ||
				CheckClass("DemonShield"))	
			{	return false;	}
			
			A_SpawnItemEx("LightningChainTargeter",0,0,height/2.0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTRACER);
			A_GiveInventory("ChainToken",1);
			return true;
		}
		Stop;
	}
}

Class LGAltPuffNoPain : LGAltPuff
{	Default { +PAINLESS	+BLOODLESSIMPACT	}}

Class LightningChainTargeter : Actor 
{
	Default 
	{
		Projectile;
		+NOINTERACTION
		+NOTONAUTOMAP
		RenderStyle "None";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class ChainDamager : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CheckClass("LightningChainTargeter"))
			{
				//Make sure to pass the appropriate damaging Class for the inflictor so PAINLESS can be respected.
				if (A_CheckProximity("Null","LGAltPuff",512,1,CPXF_ANCESTOR|CPXF_SETTARGET))
				{	A_DamageTracer(random(LGDmgMin,LGDmgMax)*random(1,3),"Electric",DMSS_AFFECTARMOR,null,"",MasterPtr,TargetPtr);	}
				else
				{	A_DamageTracer(random(LGDmgMin,LGDmgMax)*random(1,3),"Electric",DMSS_AFFECTARMOR,null,"",MasterPtr);	}
				A_Remove(DefPtr,RMVF_EVERYTHING);
				return true;
			}
			return false;
		}
		Stop;
	}
}

Class ChainRemover : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0
		{
			if (CheckClass("LightningChainTargeter"))
			{	
				A_Remove(DefPtr,RMVF_EVERYTHING);	
				return true;
			}
			return false;
		}
		Stop;
	}
}

Class ChainClearer : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 A_TakeInventory("ChainToken",32767);
		Stop;
	}
}

Class ChainToken : Inventory {}

Class LGChainToggle : Inventory
{
	Default
	{
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		Inventory.InterhubAmount 1;
	}
}