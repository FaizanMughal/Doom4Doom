Class IamADemonToken  : Inventory { Default { Inventory.MaxAmount 1;    Inventory.InterHubAmount 0; }}
Class DemonTimerToken : Inventory { Default { Inventory.MaxAmount 2100; Inventory.InterHubAmount 0; }}
//Class DemonTimerTotal : Inventory { Default { Inventory.MaxAmount 25200; Inventory.InterHubAmount 0; }}

Class OverlaysStarted : Inventory { Default { Inventory.MaxAmount 1;    Inventory.InterHubAmount 0; }}

Class IamHellKnight 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamBaronOfHell 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamRevenant 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamCacodemon 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamFatso 				: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamPainElemental 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamCyberdemon 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamSpiderMastermind 	: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamArchvile 			: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}
Class IamArachnotron 		: Inventory { Default { Inventory.MaxAmount 1; Inventory.InterHubAmount 0; }}

/*==============================================================================
================================================================================
	Demon Player Base
	-----------------
	Initializes all shared overlays and plays the starting sound of the
	appropriate type, thanks to virtual override functions like PostBeginPlay.
	
	NOTICE:
	Whenever overriding an internal core function as part of the Actor class
	itself, remember to call the super function to ensure proper working order!
	
	The following are internal overrideable functions:
	- BeginPlay
	- PostBeginPlay
	- Tick
	- Activate
	- Deactivate
	
	See this for more information:
	http://zdoom.org/wiki/Converting_DECORATE_code_to_ZScript#Virtuals
	
================================================================================
==============================================================================*/

Class DemonPlayerBase : Doom4Player
{
	Class<Inventory> RuneBase;
	int TicDelay;
	int prevTic, currTic, nextTic;
	const interTic = 15;
	const minuteTic = 60 * 35;
	bool EndMe;
	// Only ever called once.
	override void PostBeginPlay()
	{
		if (!player || !player.mo || player.mo != self)
		{
			return PlayerPawn.PostBeginPlay();
		}
		PlayerPawn.PostBeginPlay();	//Always call the super version to ensure everything's in working order.
		MaxHealth = Health;
		static const String Demons[] =
		{
			"PlayerArachnotron",		"ArachnotronRune",
			"PlayerBaron",				"BaronRune",
			"PlayerCacodemon",			"CacodemonRune",
			"PlayerCyberdemon",			"CyberdemonRune",
			"PlayerFatso",				"FatsoRune",
			"PlayerKnight",				"KnightRune",
			"PlayerMastermind",			"MastermindRune",
			"PlayerPainElemental",		"PainElementalRune",
			"PlayerRevenant",			"RevenantRune",
			"PlayerArchvile",			"ArchvileRune"
		};
		
		for (int i = 0; i < Demons.Size(); i += 2)
		{
			if (GetClass() == Demons[i])
			{
				RuneBase = Demons[i + 1];
				break;
			}
		}
		let inv = PowerMorph(FindInventory("PowerMorph",true));
		if (inv)	currTic = inv.EffectTics;
		
		PlayDemonSightSound();
		StartDemonOverlays();
	}
	
	void PlayDemonSightSound()
	{
		static const Class<Actor> Demons[] =
		{
			"PlayerArachnotron",
			"PlayerBaron",
			"PlayerCacodemon",
			"PlayerCyberdemon",
			"PlayerFatso",
			"PlayerKnight",
			"PlayerMastermind",
			"PlayerPainElemental",
			"PlayerRevenant",
			"PlayerArchvile"			// The last one is comma conscientious. 
		};
		
		static const Sound SightSound[] =
		{
			"Doom4/Monsters/Arachnotron/Sight",
			"Doom4/Monsters/Baron/Sight",
			"Doom4/Monsters/Cacodemon/Sight",
			"Doom4/Cyberdemon/Sight",
			"Doom4/Monsters/Mancubus/Sight",
			"Doom4/Monsters/HellKnight/Sight",
			"Doom4/SpiderMastermind/Sight",
			"Doom4/Monsters/PainElemental/Sight",
			"Doom4/Monsters/Revenant/Sight",
			"Doom4/Monsters/Archvile/Sight"
		};
		
		for (int index = 0; index < Demons.Size(); index++)
		{
			if (self is Demons[index])
			{
				A_PlaySound(SightSound[index], 5);
				return;
			}
		}
	}
	
	virtual void StartDemonOverlays()
	{
		A_ClearOverlays();
		A_Overlay(6000,"Overlay.IdleSound",true);
		A_Overlay(6001,"Overlay.Steps",true);
		A_OverlayFlags(6000, PSPF_POWDOUBLE, false);
		A_OverlayFlags(6001, PSPF_POWDOUBLE, false);
		//Strangely, the timer visual runs out at least a few seconds before.
		A_SetInventory("DemonTimerToken",62*35, DefPtr, true);
	}
	
	//--------------------------------------------------------------------------
	// Tick
	//--------------------------------------------------------------------------
	override void Tick()
	{
		Super.Tick();
		
		if (!player || !player.mo || player.mo != self)
			return;
		
		if (EndMe || GetPlayerInput(MODINPUT_BUTTONS) & BT_USER4)
		{
			let inv = PowerMorph(FindInventory("PowerMorph",true));
			if (inv)
			{
				EndMe = true;
				A_SetInventory("DemonTimerToken",0);
				TicDelay = -1;
				inv.EffectTics = 1;
				return;
			}
		}
	
		// Count down the timer effect. Purely visual, not the actual timer.
		let check = PowerMorph(FindInventory("PowerMorph",true));
		if (check) 
		{
			nextTic = check.EffectTics;
			A_SetInventory("DemonTimerToken",nextTic, DefPtr, true);
		}
		
		TicDelay++;
		
		if (TicDelay > 1)
		{
			TicDelay = 0;
			
			if (!CountInv("PowerDrain") && CountInv("D4RuneUpgrade4"))
			{
				A_GiveInventory("DemonRuneDrainGiver");
			}
			
			// Think of this as A_CheckProximity, but with less limitation.
			// However, we have to invent all the checks in order to use it
			// properly.
			
			// So, create an iterator that searches for D4KeyBase-inheriting
			// and runes only.
			ThinkerIterator it = ThinkerIterator.Create("Inventory", STAT_RUNEPICKUPS);
			Inventory mo;
			while (mo = Inventory(it.Next()))
			{
				if (!(mo is "D4KeyBase") && (!CountInv("D4RuneUpgrade2") && !(mo is "DemonRuneBase")))
					continue;
				
				if (CountInv("D4RuneUpgrade2"))
				{
					let rune = DemonRuneBase(mo);
					if (rune && rune.ring)
					{
						rune.ring.bINVISIBLE = (mo.GetClass() != RuneBase);
					}
				}
				// Make sure it can be touched.
				double blockdist = radius + mo.radius;
				if (abs(pos.x - mo.pos.x) > blockdist || abs(pos.y - mo.pos.y) > blockdist)
					continue;	
								
				// So we're in range horizontally. What about vertically?
				if (pos.z + height < mo.pos.z || mo.pos.z + mo.height < pos.z)
					continue;	
				
				if (mo is "D4KeyBase")
				{
					// if it's a key, print a message, call its special and destroy it.
					A_GiveInventory(mo.GetClass(),1);
					A_Log(mo.PickupMessage().." found");
					mo.DoPickupSpecial(self);
					mo.Destroy();
					continue;
				}
				else if (mo is "DemonRuneBase" && CountInv("D4RuneUpgrade2"))
				{
					if (check && mo.GetClass() == RuneBase)
					{
						check.EffectTics += (35 * 60);
						int MaxHP = GetMaxHealth();
						int PartialHP = MaxHP * ((MaxHP >= 2000) ? 0.25 : 0.5);
						A_SetHealth(Clamp(health + PartialHP, 1, MaxHP));
						A_SetInventory("DemonTimerToken",CountInv("DemonTimerToken") + (35*60), DefPtr, true);
						A_SpawnItemEx("DemonRuneMorphOn",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET|SXF_ORIGINATOR);
						mo.DoPickupSpecial(self);
						mo.Destroy();
					}
					continue;
				}
			}
		}
	}
	
	// Skip the Doom4Player's version.
	override void CheckJump()
	{
		PlayerPawn.CheckJump();
	}
	
	Default
	{
		DamageFactor "Slime", 0.0;
		DamageFactor "HellSlime", 0.0;
		DamageFactor "Fall", 0.0;
		DamageFactor "Falling", 0.0;
		-ALLOWPAIN
	}
	
	States
	{
	// Dummy states to be overridden later. Except the DemonTimer one.
	Overlay.IdleSound:
	Overlay.Steps:
		TNT1 A 0;
		Stop;
	}
}


// upon getting this thing, player will unmorph immediately
// No longer used.
Class UnMorpher : ArtiTomeOfPower
{
	Default 
	{
		//Game "Doom";
		+INVENTORY.AUTOACTIVATE
		+INVENTORY.QUIET
		-INVENTORY.INVBAR
		-INVENTORY.PICKUPFLASH
		-COUNTITEM
		-FLOATBOB
		+NOTIMEFREEZE
		Inventory.PickupMessage "";
		Powerup.Duration 1;
	}
}

// The fog actor, cosmetic, but also does stuff to player for special behavior
Class DemonRuneMorphOff : Actor 
{
	Default 
	{
		+NOINTERACTION
		+NOTIMEFREEZE
		RenderStyle "None";
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		//Depending on the token, will play the death sound of that demon		
		static const Sound deathsnd[] =
		{
			"Doom4/Monsters/HellKnight/Death",
			"Doom4/Monsters/Baron/Death",
			"Doom4/Monsters/Revenant/Death",
			"Doom4/Monsters/Cacodemon/Death",
			"Doom4/Monsters/Mancubus/Death",
			"Doom4/Monsters/PainElemental/Death",
			"Doom4/Cyberdemon/Death",
			"Doom4/SpiderMastermind/Death",
			"Doom4/Monsters/Archvile/Death",
			"Doom4/Monsters/Arachnotron/Death"
		};
		
		static const Class<Inventory> things[] =
		{
			"IamHellKnight",
			"IamBaronOfHell",
			"IamRevenant",
			"IamCacodemon",
			"IamFatso",
			"IamPainElemental",
			"IamCyberdemon",
			"IamSpiderMastermind",
			"IamArchvile",
			"IamArachnotron",
			"IamADemonToken",
			"OverlaysStarted",
			"PowerFlight",
			"PowerDrain",
			"BusyToken"
		};
		
		//Removes any and all demon tokens from player
		bool played = false;
		int size = things.Size();
		if (target)
		{
			for (int i = 0; i < size; i++)
			{
				if (!played && i < deathsnd.Size() && target.CountInv(things[i]) > 0)
				{
					played = true;
					A_PlaySound(deathsnd[i],7);
				}
				target.A_SetInventory(things[i], 0);
			}
		
			target.A_GiveInventory("DemonOverlayCleaner",1);	//cleans the demon overlays on unmorphed player
			target.A_GiveInventory("DemonWarpersCleaner",1);	//cleans the demon warpers on unmorphed player
			target.A_GiveInventory("MinionsTurner",1);			//makes all minions enemy to unmorphed player
			target.A_GiveInventory("HealthArmorRestorer",1);	//restores health and armor
		}
		A_SpawnItemEx("BloodGibDropper",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION/*|SXF_USEBLOODCOLOR*/);
		A_PlaySound("Doom4/Other/GibExplode",6);
	}
	
	States
	{
	Spawn:
		PLAY A 0;
		PLAY AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
		{
			A_SpawnItemEx("CarrionFlameFast",0,0,0,frandom(4,-4),frandom(4,-4),frandom(4,-4),random(0,359),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("CarrionFlameFast",0,0,0,frandom(4,-4),frandom(4,-4),frandom(4,-4),random(0,359),SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

//-------------------------------------------------------------------
// Cleans the overlays called by demons
//-------------------------------------------------------------------
Class DemonOverlayCleaner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_ClearOverlays(6000,6100); //all demon overlays are between these two
			ACS_NamedExecute("ResetOverlayState",0,0,0,0);
		}
		Stop;
	}
}


//-------------------------------------------------------------------
// to save and restore health/armor pre/post morph
//-------------------------------------------------------------------
Class HealthArmorSaver : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory("DHealthCount",health);
			int arm = CountInv("BasicArmor");
			if (arm)
				A_GiveInventory("DArmorCount",arm); 
			return true;
		}
		Stop;
	}
}

Class HealthArmorRestorer : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory("Invul3s");
			A_SetHealth(CountInv("DHealthCount",Player1)); 
			while(countinv("DArmorCount"))
			{
				A_GiveInventory("ArmorSinglePoint",1);
				A_TakeInventory("DArmorCount",1);
			}
			
			A_SetInventory("DHealthCount",0);
			A_SetInventory("DArmorCount",0);
		}
		Stop;
	}
}

Class DHealthCount : Inventory { Default { Inventory.MaxAmount 500; +INVENTORY.IGNORESKILL } }
Class DArmorCount : Inventory { Default { Inventory.MaxAmount 500; 	+INVENTORY.IGNORESKILL } }



//-------------------------------------------------------------------
//Cleans all the A_Warp muzzle flashes
//-------------------------------------------------------------------
Class DemonWarpersCleaner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_RemoveChildren(true,RMVF_EVERYTHING,"BaronPlayerMuzzle");
			A_RemoveChildren(true,RMVF_EVERYTHING,"MastermindPlayerMuzzleRed");
			A_RemoveChildren(true,RMVF_EVERYTHING,"CyberdemonPlayerMuzzle");
			A_RemoveChildren(true,RMVF_EVERYTHING,"SummonerPlayerMuzzle");
		}
		Stop;
	}
}

//-------------------------------------------------------------------
// To make all summoned monsters (by pain elem or summoner)
// enemies to player after player unmorphs 
//-------------------------------------------------------------------
// Given to the player by the fog
Class MinionsTurner : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_SpawnItemEx("Enemifier",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_NOPOINTERS|SXF_SETTARGET);
			A_GiveToChildren("MinionsTurner2",1);
		}
		Stop;
	}
}

Class Enemifier : Actor 
{
	Default 
	{
		+NOINTERACTION
		-COUNTKILL
		+NODAMAGE
		+THRUACTORS
		-FRIENDLY
		Monster;
	}
	States
	{
	Spawn:
		TNT1 A 2;
		TNT1 A 1 Thing_Remove(0);
		Stop;
	}
}

//given to the monsters to make them unfriendly
Class MinionsTurner2 : CustomInventory
{
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
		+NOTIMEFREEZE
	}
	States
	{
	Spawn:
		BOS2 A 10 Bright;
		Loop;
	Pickup:
		TNT1 A 0 
		{
			if (CheckClass("D4AbstractMonster",DefPtr,True))
			{
				bFriendly = bThruSpecies = bNoBlockMonst = false;
				A_CheckProximity("Null","Enemifier",32767,1,CPXF_SETTRACER);
				A_CopyFriendliness(TracerPtr);
				A_ChangeCountFlags(true);
				return true;
			}
			return false;
		}
		Stop;
	}
}


//-------------------------------------------------------------------
// Fog for when you become a demon
//-------------------------------------------------------------------

Class DemonRuneMorphOn : Actor 
{
	const RollAmount = 8.0;
	const ScaleMul = 0.5;
	double  user_c;
	double  URoll;
	int user_t;
	int user_rng;
	double  user_dist;
	double  UCos;
	int UFloor;
	int user_duration;
	
	Default 
	{
		+NOINTERACTION
		+BRIGHT
		+FLATSPRITE
		+ROLLSPRITE
		RenderStyle "Add";
		Radius 32;
		Alpha 0;
		Scale 0;
		//Translation "0:255=%[0,0,0]:[1.0,0.0,0.2]"
	}
	States
	{
	Spawn:
		RUNE C 0 NoDelay
		{
			invoker.user_duration = 2;
			invoker.URoll = RollAmount * randompick(-1,1);
			A_PlaySound("Player/Demon/Fire",7,0.7);
		}
	Looping:
		"####" "#" 1
		{
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",1.4);
			A_SpawnItemEx("CarrionFlameFast",
					frandom(0.0,4.0),frandom(0.0,4.0),frandom(0,-80),
					frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION);	
			
			if (invoker.user_c >= 90.0)
			{	return ResolveState(1);	}
			invoker.user_c += (90.0/12.0);
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			A_FadeTo(0.99,(1.0/12.0),FTF_CLAMP);
			A_SetScale(sin(invoker.user_c) * ScaleMul);
			return ResolveState(null);
		}
		Loop;
	Shrink:
		"####" "#" 1
		{	
			A_Warp(TargetPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE,"Null",1.4);
			if (invoker.user_t < (40 + invoker.user_duration) )
			{	invoker.user_t++;	}
			else
			{
				invoker.user_c += (90.0/12.0);
				A_SetScale(sin(invoker.user_c) * ScaleMul);
				if (Scale.X <= 0)	{	return ResolveState("Null");	}
			}
			
			A_SetRoll((roll + RollAmount) % 360,SPF_INTERPOLATE);
			
			A_SpawnItemEx("CarrionFlameFast",
					frandom(0.0,4.0),frandom(0.0,4.0),frandom(0,-80),
					frandom(0.0, 2.0),0,frandom(-4.0,4.0),random(0,359),SXF_NOCHECKPOSITION);	
					
			return ResolveState(null);
		}
		Loop;
	}
}

Class SoundStopper : CustomInventory
{
	Default 
	{
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
	Pickup:
		TNT1 A 0 
		{
			A_StopSound(1);
			A_StopSound(2);
			A_StopSound(3);
			A_StopSound(4);
			A_StopSound(5);
			A_StopSound(6);
			A_StopSound(7);
			A_StopSound(0);
		}
		Stop;
	}
}
//=================================================================================================
//=================================================================================================

//		Base sprites for the thing

//=================================================================================================
//=================================================================================================

Class DemonRuneBase : CustomInventory
{
	Class<Inventory> Morph;
	Actor ring;
	int user_time;
	
	Property Morph: Morph;
	Default 
	{
		Inventory.MaxAmount 1;
		Inventory.Amount 1;
		Radius 6;
		Height 12;
		Scale 0.1;
		+FORCEXYBILLBOARD
		+BRIGHT
		+DONTGIB
	}
	
	override void BeginPlay()
	{
		ChangeStatNum(STAT_RUNEPICKUPS);
		Super.BeginPlay();
	}
	
	override void OnDestroy()
	{
		if (ring) ring.Destroy();
	}
	
	override void PostBeginPlay()
	{
		if (GetClassName() == 'DemonRuneBase')
			return Destroy();
		
		bool limit = true;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i]) 
			{
				let plr = players[i].mo;
				if (plr && plr.CountInv("D4RuneUpgrade3"))
				{
					limit = false;
					break;
				}
			}
		}
		// Only check for the same type.
		if (limit)
		{
			Class<Inventory> RuneName = GetClass();
			ThinkerIterator it = ThinkerIterator.Create("DemonRuneBase", STAT_RUNEPICKUPS);
			DemonRuneBase mo;
			while (mo = DemonRuneBase(it.Next()))
			{
				if (mo == self)
					continue;
					
				if (mo.GetClass() == GetClass())
					return Destroy();
			}
		}
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		RUNE A 0 NoDelay
		{
			bool d;
			[d, invoker.ring] = A_SpawnItemEx("DemonRuneBackground",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_TRANSFERSCALE|SXF_ORIGINATOR);
			invoker.user_time = 60 * 35;  // tics before expiration
		}
		Goto Idle;
	Idle:
		RUNE A 1 BRIGHT Light("OrangeSmallPoint1")
		{
			let ring = invoker.ring;
			let plr = players[0].mo;
			
			// Only check it if it's actually invisible already.
			if (!plr || !plr.CountInv("D4RuneUpgrade2"))
			{
				if (ring) ring.bINVISIBLE = false;
			}
			else if (ring && ring.bINVISIBLE)
			{
				if (plr)
				{
					Inventory i = plr.FindInventory("PowerMorph",true);
					ring.bINVISIBLE = (i && i.Amount > 0);
				}
			}
			if (!plr || (!plr.CountInv("PowerInvulBase") && !plr.CountInv("IamADemonToken")))
			{
				invoker.user_time--;
				if (invoker.user_time < (5 * 35))
					A_SetTranslucent((invoker.user_time % 35.0) / 35.0); // blink before time-out
			}
			if (invoker.user_time < 1)
			{
				return Destroy();
			}
		}
		Wait;
	}
}

Class DemonRuneBackground : Actor 
{
	Default 
	{
		+NOINTERACTION
		+ROLLCENTER
		+ROLLSPRITE
		Scale 0.1;
		+FORCEXYBILLBOARD
	}
	States
	{
	Spawn:
		TNT1 A 0 NODELAY A_PlaySound("Player/Demon/RuneFxLoop",CHAN_AUTO,1.0,1);
		RUNE B 1 BRIGHT 
		{
			if (master)
			{
				A_SetRoll(roll-0.9,SPF_INTERPOLATE);
				A_Warp(MasterPtr,0,0,0,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYVELOCITY);
			}
			else return Destroy();
		}
		Wait;
	}
}





//------------------------------------------------
//Secondary stuff


Class ArchieMonsterDropper : Actor 
{
	Default 
	{
		Projectile;
		+NOTARGET
		+FRIENDLY
		+FLOORCLIP
		+DONTSPLASH
		-NOGRAVITY
		+NOBLOCKMONST
		+SKYEXPLODE
		+EXPLODEONWATER
		Gravity 3;
		Radius 20;
		Height 8;
		Speed 16;
		DeathSound "";
		RenderStyle "None";
		Scale 0.4;
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("SummonTeleportFog",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 1 A_SpawnItemEx("TporDropBallSpawnerFriend",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS|SXF_SETMASTER);
		Stop;
	} 
}

Class TporDropBallSpawnerFriend : RandomSpawner
{
	Default 
	{
		+FRIENDLY
		+NOBLOCKMONST
		DropItem "D4ShotgunGuy", 255, 2;
		DropItem "D4ChaingunGuy", 255, 2;
		DropItem "D4DoomImp", 255, 2;
		DropItem "D4Demon", 255, 2;
		DropItem "D4Revenant", 255, 4;
		DropItem "D4HellKnight", 255, 4;
		DropItem "D4BaronOfHell", 255, 1;
	}
	
	override void PostSpawn(Actor spawned)
	{
		if (spawned)
		{
			spawned.bFRIENDLY = true;
			spawned.bCOUNTKILL = false;
			spawned.bNOBLOCKMONST = true;
		}
	}
}

Class DemonPuff : Actor //for xdeathing everything
{
	Default 
	{
		+NOINTERACTION
		+EXTREMEDEATH
		RenderStyle "None";
		DamageType "Melee";
	}
	states
	{
	Spawn:
		PLAY A 3;
		Stop;
	}
}

Class DemonPuffMelee : FistPuff //for xdeathing everything
{
	Default 
	{
		+NOINTERACTION
		+EXTREMEDEATH
		RenderStyle "None";
		DamageType "Melee";
	}
}

Class DemonRuneDrainGiver : PowerupGiver
{
	Default
	{
		+INVENTORY.ALWAYSPICKUP
		+INVENTORY.AUTOACTIVATE
		Powerup.Duration 0x7FFFFFFD;
		Powerup.Strength 0.05;
		Powerup.Type "PowerDrain";
	}
}

Class PowerRuneBase : PowerMorph
{
	override void InitEffect()
	{
		if (GetClass() == "PowerRuneBase")
		{
			bInitEffectFailed = true;
			return Destroy();
		}
		
		if (CountInv("D4RuneUpgrade4"))
			A_GiveInventory("DemonRuneDrainGiver",1);
		
		Super.InitEffect();
	}
	
	override void DoEffect()
	{	
		if (Owner)
		{
			if (globalfreeze || level.frozen)
			{
				EffectTics++; //'Freeze' the timer.
			}
			else
			{
				if (EffectTics <= 105)
				{
					Switch (EffectTics)
					{
						Case 105:
						{
							Owner.A_PlaySound("PentagramOfProtection/Warning",7,1,0,ATTN_NONE);
						}
						Case 70:
						Case 35:
							Owner.A_SetBlend("Yellow",0.4,12);
						Default:
							break;
					}
				}
			}
		}
		Super.DoEffect();
	}
	/*
	override void EndEffect()
	{
		Super.EndEffect();
	}
	*/
}